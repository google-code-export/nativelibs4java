package com.nativelibs4java.ffmpeg.avformat;
import com.nativelibs4java.ffmpeg.avcodec.AVCodecContext;
import com.nativelibs4java.ffmpeg.avcodec.AVCodecParserContext;
import com.nativelibs4java.ffmpeg.avcodec.AVPacket;
import com.nativelibs4java.ffmpeg.avformat.AvformatLibrary.AVMetadata;
import com.nativelibs4java.ffmpeg.avformat.AvformatLibrary.AVStreamParseType;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ValuedEnum;
import org.bridj.ann.Array;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
/**
 * <i>native declaration : libavformat/avformat.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("avformat") 
public class AVStream extends StructObject {
	public AVStream() {
		super();
	}
	public AVStream(Pointer pointer) {
		super(pointer);
	}
	/// < stream index in AVFormatContext
	@Field(0) 
	public int index() {
		return this.io.getIntField(this, 0);
	}
	/// < stream index in AVFormatContext
	@Field(0) 
	public AVStream index(int index) {
		this.io.setIntField(this, 0, index);
		return this;
	}
	public final int index_$eq(int index) {
		index(index);
		return index;
	}
	/// < format-specific stream ID
	@Field(1) 
	public int id() {
		return this.io.getIntField(this, 1);
	}
	/// < format-specific stream ID
	@Field(1) 
	public AVStream id(int id) {
		this.io.setIntField(this, 1, id);
		return this;
	}
	public final int id_$eq(int id) {
		id(id);
		return id;
	}
	/**
	 * < codec context<br>
	 * C type : AVCodecContext*
	 */
	@Field(2) 
	public Pointer<AVCodecContext > codec() {
		return this.io.getPointerField(this, 2);
	}
	/**
	 * < codec context<br>
	 * C type : AVCodecContext*
	 */
	@Field(2) 
	public AVStream codec(Pointer<AVCodecContext > codec) {
		this.io.setPointerField(this, 2, codec);
		return this;
	}
	/// C type : AVCodecContext*
	public final Pointer<AVCodecContext > codec_$eq(Pointer<AVCodecContext > codec) {
		codec(codec);
		return codec;
	}
	/// Conversion Error : AVRational (Unsupported type)
	/// C type : void*
	@Field(3) 
	public Pointer<? > priv_data() {
		return this.io.getPointerField(this, 3);
	}
	/// C type : void*
	@Field(3) 
	public AVStream priv_data(Pointer<? > priv_data) {
		this.io.setPointerField(this, 3, priv_data);
		return this;
	}
	/// C type : void*
	public final Pointer<? > priv_data_$eq(Pointer<? > priv_data) {
		priv_data(priv_data);
		return priv_data;
	}
	/// internal data used in av_find_stream_info()
	@Field(4) 
	public long first_dts() {
		return this.io.getLongField(this, 4);
	}
	/// internal data used in av_find_stream_info()
	@Field(4) 
	public AVStream first_dts(long first_dts) {
		this.io.setLongField(this, 4, first_dts);
		return this;
	}
	public final long first_dts_$eq(long first_dts) {
		first_dts(first_dts);
		return first_dts;
	}
	/**
	 * encoding: pts generation when outputting stream<br>
	 * C type : AVFrac
	 */
	@Field(5) 
	public avformat.AVFrac pts() {
		return this.io.getNativeObjectField(this, 5);
	}
	/// Conversion Error : AVRational (Unsupported type)
	/// < number of bits in pts (used for wrapping control)
	@Field(6) 
	public int pts_wrap_bits() {
		return this.io.getIntField(this, 6);
	}
	/// < number of bits in pts (used for wrapping control)
	@Field(6) 
	public AVStream pts_wrap_bits(int pts_wrap_bits) {
		this.io.setIntField(this, 6, pts_wrap_bits);
		return this;
	}
	public final int pts_wrap_bits_$eq(int pts_wrap_bits) {
		pts_wrap_bits(pts_wrap_bits);
		return pts_wrap_bits;
	}
	/**
	 * ffmpeg.c private use<br>
	 * < If set, just copy stream.
	 */
	@Field(7) 
	public int stream_copy() {
		return this.io.getIntField(this, 7);
	}
	/**
	 * ffmpeg.c private use<br>
	 * < If set, just copy stream.
	 */
	@Field(7) 
	public AVStream stream_copy(int stream_copy) {
		this.io.setIntField(this, 7, stream_copy);
		return this;
	}
	public final int stream_copy_$eq(int stream_copy) {
		stream_copy(stream_copy);
		return stream_copy;
	}
	/// Conversion Error : AVDiscard (Unsupported type)
	/**
	 * Quality, as it has been removed from AVCodecContext and put in AVVideoFrame.<br>
	 * MN: dunno if that is the right place for it
	 */
	@Field(8) 
	public float quality() {
		return this.io.getFloatField(this, 8);
	}
	/**
	 * Quality, as it has been removed from AVCodecContext and put in AVVideoFrame.<br>
	 * MN: dunno if that is the right place for it
	 */
	@Field(8) 
	public AVStream quality(float quality) {
		this.io.setFloatField(this, 8, quality);
		return this;
	}
	public final float quality_$eq(float quality) {
		quality(quality);
		return quality;
	}
	/**
	 * Decoding: pts of the first frame of the stream, in stream time base.<br>
	 * Only set this if you are absolutely 100% sure that the value you set<br>
	 * it to really is the pts of the first frame.<br>
	 * This may be undefined (AV_NOPTS_VALUE).<br>
	 * @note The ASF header does NOT contain a correct start_time the ASF<br>
	 * demuxer must NOT set this.
	 */
	@Field(9) 
	public long start_time() {
		return this.io.getLongField(this, 9);
	}
	/**
	 * Decoding: pts of the first frame of the stream, in stream time base.<br>
	 * Only set this if you are absolutely 100% sure that the value you set<br>
	 * it to really is the pts of the first frame.<br>
	 * This may be undefined (AV_NOPTS_VALUE).<br>
	 * @note The ASF header does NOT contain a correct start_time the ASF<br>
	 * demuxer must NOT set this.
	 */
	@Field(9) 
	public AVStream start_time(long start_time) {
		this.io.setLongField(this, 9, start_time);
		return this;
	}
	public final long start_time_$eq(long start_time) {
		start_time(start_time);
		return start_time;
	}
	/**
	 * Decoding: duration of the stream, in stream time base.<br>
	 * If a source file does not specify a duration, but does specify<br>
	 * a bitrate, this value will be estimated from bitrate and file size.
	 */
	@Field(10) 
	public long duration() {
		return this.io.getLongField(this, 10);
	}
	/**
	 * Decoding: duration of the stream, in stream time base.<br>
	 * If a source file does not specify a duration, but does specify<br>
	 * a bitrate, this value will be estimated from bitrate and file size.
	 */
	@Field(10) 
	public AVStream duration(long duration) {
		this.io.setLongField(this, 10, duration);
		return this;
	}
	public final long duration_$eq(long duration) {
		duration(duration);
		return duration;
	}
	/**
	 * ISO 639-2/B 3-letter language code (empty string if undefined)<br>
	 * C type : char[4]
	 */
	@Array({4}) 
	@Field(11) 
	public Pointer<java.lang.Byte > language() {
		return this.io.getPointerField(this, 11);
	}
	/**
	 * av_read_frame() support<br>
	 * C type : AVStreamParseType
	 */
	@Field(12) 
	public ValuedEnum<AVStreamParseType > need_parsing() {
		return this.io.getEnumField(this, 12);
	}
	/**
	 * av_read_frame() support<br>
	 * C type : AVStreamParseType
	 */
	@Field(12) 
	public AVStream need_parsing(ValuedEnum<AVStreamParseType > need_parsing) {
		this.io.setEnumField(this, 12, need_parsing);
		return this;
	}
	/// C type : AVStreamParseType
	public final ValuedEnum<AVStreamParseType > need_parsing_$eq(ValuedEnum<AVStreamParseType > need_parsing) {
		need_parsing(need_parsing);
		return need_parsing;
	}
	/// C type : AVCodecParserContext*
	@Field(13) 
	public Pointer<AVCodecParserContext > parser() {
		return this.io.getPointerField(this, 13);
	}
	/// C type : AVCodecParserContext*
	@Field(13) 
	public AVStream parser(Pointer<AVCodecParserContext > parser) {
		this.io.setPointerField(this, 13, parser);
		return this;
	}
	/// C type : AVCodecParserContext*
	public final Pointer<AVCodecParserContext > parser_$eq(Pointer<AVCodecParserContext > parser) {
		parser(parser);
		return parser;
	}
	@Field(14) 
	public long cur_dts() {
		return this.io.getLongField(this, 14);
	}
	@Field(14) 
	public AVStream cur_dts(long cur_dts) {
		this.io.setLongField(this, 14, cur_dts);
		return this;
	}
	public final long cur_dts_$eq(long cur_dts) {
		cur_dts(cur_dts);
		return cur_dts;
	}
	@Field(15) 
	public int last_IP_duration() {
		return this.io.getIntField(this, 15);
	}
	@Field(15) 
	public AVStream last_IP_duration(int last_IP_duration) {
		this.io.setIntField(this, 15, last_IP_duration);
		return this;
	}
	public final int last_IP_duration_$eq(int last_IP_duration) {
		last_IP_duration(last_IP_duration);
		return last_IP_duration;
	}
	@Field(16) 
	public long last_IP_pts() {
		return this.io.getLongField(this, 16);
	}
	@Field(16) 
	public AVStream last_IP_pts(long last_IP_pts) {
		this.io.setLongField(this, 16, last_IP_pts);
		return this;
	}
	public final long last_IP_pts_$eq(long last_IP_pts) {
		last_IP_pts(last_IP_pts);
		return last_IP_pts;
	}
	/**
	 * av_seek_frame() support<br>
	 * < Only used if the format does not<br>
	 * support seeking natively.<br>
	 * C type : AVIndexEntry*
	 */
	@Field(17) 
	public Pointer<com.nativelibs4java.ffmpeg.avformat.AVIndexEntry > index_entries() {
		return this.io.getPointerField(this, 17);
	}
	/**
	 * av_seek_frame() support<br>
	 * < Only used if the format does not<br>
	 * support seeking natively.<br>
	 * C type : AVIndexEntry*
	 */
	@Field(17) 
	public AVStream index_entries(Pointer<com.nativelibs4java.ffmpeg.avformat.AVIndexEntry > index_entries) {
		this.io.setPointerField(this, 17, index_entries);
		return this;
	}
	/// C type : AVIndexEntry*
	public final Pointer<com.nativelibs4java.ffmpeg.avformat.AVIndexEntry > index_entries_$eq(Pointer<com.nativelibs4java.ffmpeg.avformat.AVIndexEntry > index_entries) {
		index_entries(index_entries);
		return index_entries;
	}
	@Field(18) 
	public int nb_index_entries() {
		return this.io.getIntField(this, 18);
	}
	@Field(18) 
	public AVStream nb_index_entries(int nb_index_entries) {
		this.io.setIntField(this, 18, nb_index_entries);
		return this;
	}
	public final int nb_index_entries_$eq(int nb_index_entries) {
		nb_index_entries(nb_index_entries);
		return nb_index_entries;
	}
	@Field(19) 
	public int index_entries_allocated_size() {
		return this.io.getIntField(this, 19);
	}
	@Field(19) 
	public AVStream index_entries_allocated_size(int index_entries_allocated_size) {
		this.io.setIntField(this, 19, index_entries_allocated_size);
		return this;
	}
	public final int index_entries_allocated_size_$eq(int index_entries_allocated_size) {
		index_entries_allocated_size(index_entries_allocated_size);
		return index_entries_allocated_size;
	}
	/// < number of frames in this stream if known or 0
	@Field(20) 
	public long nb_frames() {
		return this.io.getLongField(this, 20);
	}
	/// < number of frames in this stream if known or 0
	@Field(20) 
	public AVStream nb_frames(long nb_frames) {
		this.io.setLongField(this, 20, nb_frames);
		return this;
	}
	public final long nb_frames_$eq(long nb_frames) {
		nb_frames(nb_frames);
		return nb_frames;
	}
	/// C type : int64_t[4 + 1]
	@Array({4 + 1}) 
	@Field(21) 
	public Pointer<java.lang.Long > unused() {
		return this.io.getPointerField(this, 21);
	}
	/**
	 * < source filename of the stream<br>
	 * C type : char*
	 */
	@Field(22) 
	public Pointer<java.lang.Byte > filename() {
		return this.io.getPointerField(this, 22);
	}
	/**
	 * < source filename of the stream<br>
	 * C type : char*
	 */
	@Field(22) 
	public AVStream filename(Pointer<java.lang.Byte > filename) {
		this.io.setPointerField(this, 22, filename);
		return this;
	}
	/// C type : char*
	public final Pointer<java.lang.Byte > filename_$eq(Pointer<java.lang.Byte > filename) {
		filename(filename);
		return filename;
	}
	/// < AV_DISPOSITION_* bit field
	@Field(23) 
	public int disposition() {
		return this.io.getIntField(this, 23);
	}
	/// < AV_DISPOSITION_* bit field
	@Field(23) 
	public AVStream disposition(int disposition) {
		this.io.setIntField(this, 23, disposition);
		return this;
	}
	public final int disposition_$eq(int disposition) {
		disposition(disposition);
		return disposition;
	}
	/// C type : AVProbeData
	@Field(24) 
	public avformat.AVProbeData probe_data() {
		return this.io.getNativeObjectField(this, 24);
	}
	/// C type : int64_t[16 + 1]
	@Array({16 + 1}) 
	@Field(25) 
	public Pointer<java.lang.Long > pts_buffer() {
		return this.io.getPointerField(this, 25);
	}
	/// Conversion Error : AVRational (Unsupported type)
	/// C type : AVMetadata*
	@Field(26) 
	public AVMetadata metadata() {
		return this.io.getTypedPointerField(this, 26);
	}
	/// C type : AVMetadata*
	@Field(26) 
	public AVStream metadata(AVMetadata metadata) {
		this.io.setPointerField(this, 26, metadata);
		return this;
	}
	/// C type : AVMetadata*
	public final AVMetadata metadata_$eq(AVMetadata metadata) {
		metadata(metadata);
		return metadata;
	}
	/**
	 * av_read_frame() support<br>
	 * C type : const uint8_t*
	 */
	@Field(27) 
	public Pointer<java.lang.Byte > cur_ptr() {
		return this.io.getPointerField(this, 27);
	}
	/**
	 * av_read_frame() support<br>
	 * C type : const uint8_t*
	 */
	@Field(27) 
	public AVStream cur_ptr(Pointer<java.lang.Byte > cur_ptr) {
		this.io.setPointerField(this, 27, cur_ptr);
		return this;
	}
	/// C type : const uint8_t*
	public final Pointer<java.lang.Byte > cur_ptr_$eq(Pointer<java.lang.Byte > cur_ptr) {
		cur_ptr(cur_ptr);
		return cur_ptr;
	}
	@Field(28) 
	public int cur_len() {
		return this.io.getIntField(this, 28);
	}
	@Field(28) 
	public AVStream cur_len(int cur_len) {
		this.io.setIntField(this, 28, cur_len);
		return this;
	}
	public final int cur_len_$eq(int cur_len) {
		cur_len(cur_len);
		return cur_len;
	}
	/// C type : AVPacket
	@Field(29) 
	public AVPacket cur_pkt() {
		return this.io.getNativeObjectField(this, 29);
	}
	/**
	 * Timestamp corresponding to the last dts sync point.<br>
	 * * Initialized when AVCodecParserContext.dts_sync_point >= 0 and<br>
	 * a DTS is received from the underlying container. Otherwise set to<br>
	 * AV_NOPTS_VALUE by default.
	 */
	@Field(30) 
	public long reference_dts() {
		return this.io.getLongField(this, 30);
	}
	/**
	 * Timestamp corresponding to the last dts sync point.<br>
	 * * Initialized when AVCodecParserContext.dts_sync_point >= 0 and<br>
	 * a DTS is received from the underlying container. Otherwise set to<br>
	 * AV_NOPTS_VALUE by default.
	 */
	@Field(30) 
	public AVStream reference_dts(long reference_dts) {
		this.io.setLongField(this, 30, reference_dts);
		return this;
	}
	public final long reference_dts_$eq(long reference_dts) {
		reference_dts(reference_dts);
		return reference_dts;
	}
	@Field(31) 
	public int probe_packets() {
		return this.io.getIntField(this, 31);
	}
	@Field(31) 
	public AVStream probe_packets(int probe_packets) {
		this.io.setIntField(this, 31, probe_packets);
		return this;
	}
	public final int probe_packets_$eq(int probe_packets) {
		probe_packets(probe_packets);
		return probe_packets;
	}
	/**
	 * last packet in packet_buffer for this stream when muxing.<br>
	 * used internally, NOT PART OF PUBLIC API, dont read or write from outside of libav*<br>
	 * C type : AVPacketList*
	 */
	@Field(32) 
	public Pointer<com.nativelibs4java.ffmpeg.avformat.AVPacketList > last_in_packet_buffer() {
		return this.io.getPointerField(this, 32);
	}
	/**
	 * last packet in packet_buffer for this stream when muxing.<br>
	 * used internally, NOT PART OF PUBLIC API, dont read or write from outside of libav*<br>
	 * C type : AVPacketList*
	 */
	@Field(32) 
	public AVStream last_in_packet_buffer(Pointer<com.nativelibs4java.ffmpeg.avformat.AVPacketList > last_in_packet_buffer) {
		this.io.setPointerField(this, 32, last_in_packet_buffer);
		return this;
	}
	/// C type : AVPacketList*
	public final Pointer<com.nativelibs4java.ffmpeg.avformat.AVPacketList > last_in_packet_buffer_$eq(Pointer<com.nativelibs4java.ffmpeg.avformat.AVPacketList > last_in_packet_buffer) {
		last_in_packet_buffer(last_in_packet_buffer);
		return last_in_packet_buffer;
	}
	/// Conversion Error : AVRational (Unsupported type)
	/// Number of frames that have been demuxed during av_find_stream_info()
	@Field(33) 
	public int codec_info_nb_frames() {
		return this.io.getIntField(this, 33);
	}
	/// Number of frames that have been demuxed during av_find_stream_info()
	@Field(33) 
	public AVStream codec_info_nb_frames(int codec_info_nb_frames) {
		this.io.setIntField(this, 33, codec_info_nb_frames);
		return this;
	}
	public final int codec_info_nb_frames_$eq(int codec_info_nb_frames) {
		codec_info_nb_frames(codec_info_nb_frames);
		return codec_info_nb_frames;
	}
}
