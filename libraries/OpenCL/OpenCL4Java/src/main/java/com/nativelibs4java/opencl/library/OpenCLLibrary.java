package com.nativelibs4java.opencl.library;
import com.ochafik.lang.jnaerator.runtime.LibraryExtractor;
import com.ochafik.lang.jnaerator.runtime.MangledFunctionMapper;
import com.ochafik.lang.jnaerator.runtime.NativeSize;
import com.ochafik.lang.jnaerator.runtime.NativeSizeByReference;
import com.ochafik.lang.jnaerator.runtime.globals.GlobalCallback;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.win32.StdCallLibrary;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.LongByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.IntBuffer;
import java.nio.LongBuffer;
/**
 * JNA Wrapper for library <b>OpenCL</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface OpenCLLibrary extends Library {
	public static final int CL_DEVICE_TYPE_CPU = (1 << 1);
	public static final int CL_SCHAR_MAX = 127;
	public static final int CL_FP_INF_NAN = (1 << 1);
	public static final int CL_GLX_DISPLAY_KHR = 8202;
	public static final int CL_GLOBAL = 2;
	public static final int CL_DEVICE_GLOBAL_MEM_SIZE = 4127;
	public static final int CL_KERNEL_LOCAL_MEM_SIZE = 4530;
	public static final int CL_MEM_READ_ONLY = (1 << 2);
	public static final int CL_PROGRAM_REFERENCE_COUNT = 4448;
	public static final double CL_M_PI_2 = 1.5707963267948966;
	public static final float CL_M_LOG2E_F = 1.442695F;
	public static final double CL_M_PI_4 = 0.7853981633974483;
	public static final int CL_FLT_MIN_EXP = -125;
	public static final int CL_DEVICE_VENDOR_ID = 4097;
	public static final int CL_FLOAT = 4318;
	public static final int CL_NONE = 0;
	public static final int CL_BGRA = 4278;
	public static final int CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR = 4150;
	public static final int CL_UNSIGNED_INT32 = 4316;
	public static final int CL_DEVICE_MAX_COMPUTE_UNITS = 4098;
	public static final int CL_RGBx = 4284;
	public static final int CL_DEVICE_REGISTERS_PER_BLOCK_NV = 16386;
	public static final int CL_PLATFORM_EXTENSIONS = 2308;
	public static final int CL_DEVICE_TYPE_GPU = (1 << 2);
	public static final float CL_M_PI_F = 3.1415927F;
	public static final int CL_READ_ONLY_CACHE = 1;
	public static final int CL_IMAGE_FORMAT_MISMATCH = -9;
	public static final int CL_OUT_OF_RESOURCES = -5;
	public static final int CL_INVALID_IMAGE_SIZE = -40;
	public static final int CL_INVALID_EVENT_WAIT_LIST = -57;
	public static final int cl_APPLE_SetMemObjectDestructor = 1;
	public static final int CL_UNSIGNED_INT16 = 4315;
	public static final int CL_COMMAND_NDRANGE_KERNEL = 4592;
	public static final int CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT = 4106;
	public static final int CL_DEVICE_MAX_CONSTANT_ARGS = 4129;
	public static final int CL_CHAR_BIT = 8;
	public static final int CL_DEVICE_TYPE_ALL = -1;
	public static final int CL_QUEUED = 3;
	public static final double CL_M_LN10 = 2.302585092994046;
	public static final int CL_INVALID_MIP_LEVEL = -62;
	public static final int CL_ADDRESS_NONE = 4400;
	public static final int CL_RGBA = 4277;
	public static final int CL_CONTEXT_DEVICES = 4225;
	public static final int CL_INVALID_PARTITION_NAME_EXT = -1059;
	public static final int CL_INVALID_WORK_ITEM_SIZE = -55;
	public static final int CL_DEVICE_KERNEL_EXEC_TIMEOUT_NV = 16389;
	public static final int CL_INVALID_WORK_GROUP_SIZE = -54;
	public static final int CL_DEVICE_ERROR_CORRECTION_SUPPORT = 4132;
	public static final int CL_DBL_RADIX = 2;
	public static final int CL_DEVICE_LOCAL_MEM_SIZE = 4131;
	public static final int CL_COMMAND_RELEASE_GL_OBJECTS = 4608;
	public static final int CL_ADDRESS_MIRRORED_REPEAT = 4404;
	public static final int CL_INVALID_KERNEL_ARGS = -52;
	public static final int CL_CONTEXT_PLATFORM = 4228;
	public static final int CL_CONTEXT_PROPERTY_USE_CGL_SHAREGROUP_APPLE = 0x10000000;
	public static final int CL_HAS_HI_LO_VECTOR_FIELDS = 1;
	public static final int CL_MEM_MAP_COUNT = 4356;
	public static final int CL_AFFINITY_DOMAIN_NEXT_FISSIONABLE_EXT = 256;
	public static final int CL_PROFILING_COMMAND_SUBMIT = 4737;
	public static final int CL_DBL_MIN_EXP = -1021;
	public static final double CL_M_SQRT2 = 1.4142135623730951;
	public static final int CL_COMMAND_ACQUIRE_GL_OBJECTS = 4607;
	public static final int CL_UINT_MAX = -1;
	public static final float CL_M_SQRT1_2_F = 0.70710677F;
	public static final double CL_M_2_SQRTPI = 1.1283791670955126;
	public static final int CL_COMMAND_NATIVE_KERNEL = 4594;
	public static final int CL_IMAGE_WIDTH = 4372;
	public static final int CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG = 4105;
	public static final int CL_INVALID_DEVICE_TYPE = -31;
	public static final int CL_COMMAND_COPY_IMAGE_TO_BUFFER = 4601;
	public static final int CL_GL_TEXTURE_TARGET = 8196;
	public static final int CL_QUEUE_PROPERTIES = 4243;
	public static final float CL_M_2_PI_F = 0.63661975F;
	public static final int CL_COMMAND_WRITE_BUFFER_RECT = 4610;
	public static final int CL_MEM_ASSOCIATED_MEMOBJECT = 4359;
	public static final int CL_INVALID_ARG_VALUE = -50;
	public static final int CL_CONTEXT_REFERENCE_COUNT = 4224;
	public static final int CL_DEVICE_TYPE = 4096;
	public static final int CL_QUEUE_CONTEXT = 4240;
	public static final int CL_DEVICE_SINGLE_FP_CONFIG = 4123;
	public static final int CL_SNORM_INT16 = 4305;
	public static final int CL_ARGB = 4279;
	public static final int CL_DEVICE_COMPUTE_CAPABILITY_MINOR_NV = 16385;
	public static final int CL_EVENT_COMMAND_QUEUE = 4560;
	public static final int CL_SUCCESS = 0;
	public static final int CL_PROFILING_INFO_NOT_AVAILABLE = -7;
	public static final int CL_INVALID_BUFFER_SIZE = -61;
	public static final int CL_INVALID_ARG_SIZE = -51;
	public static final int CL_QUEUE_PROFILING_ENABLE = (1 << 1);
	public static final int CL_KERNEL_REFERENCE_COUNT = 4498;
	public static final int CL_MEM_ALLOC_HOST_PTR = (1 << 4);
	public static final int CL_DEVICE_IMAGE2D_MAX_WIDTH = 4113;
	public static final int CL_BUILD_PROGRAM_FAILURE = -11;
	public static final int CL_COMMAND_COPY_BUFFER = 4597;
	public static final int CL_KERNEL_NUM_ARGS = 4497;
	public static final int CL_BUFFER_CREATE_TYPE_REGION = 4640;
	public static final int CL_UNORM_SHORT_555 = 4309;
	public static final int CL_PROGRAM_SOURCE = 4452;
	public static final int CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR = 4102;
	public static final int CL_DEVICE_COMPILER_AVAILABLE = 4136;
	public static final int CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE = 4125;
	public static final int CL_FP_ROUND_TO_INF = (1 << 4);
	public static final int CL_IMAGE_ROW_PITCH = 4370;
	public static final int CL_INVALID_ARG_INDEX = -49;
	public static final int CL_DEVICE_ENDIAN_LITTLE = 4134;
	public static final int CL_COMMAND_READ_BUFFER = 4595;
	public static final int CL_UNORM_INT_101010 = 4310;
	public static final int CL_KERNEL_WORK_GROUP_SIZE = 4528;
	public static final int CL_COMMAND_UNMAP_MEM_OBJECT = 4605;
	public static final int CL_INVALID_PLATFORM = -32;
	public static final int CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR = -1000;
	public static final int CL_FLT_RADIX = 2;
	public static final int CL_DEVICE_PARTITION_BY_NAMES_EXT = 16466;
	public static final int CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT = 4104;
	public static final int CL_SHRT_MIN = (-32767 - 1);
	public static final int CL_INVALID_EVENT = -58;
	public static final int CL_RG = 4274;
	public static final int CL_RA = 4275;
	public static final int CL_PROGRAM_BUILD_OPTIONS = 4482;
	public static final int CL_INVALID_COMMAND_QUEUE = -36;
	public static final int cl_khr_icd = 1;
	public static final int CL_FP_ROUND_TO_NEAREST = (1 << 2);
	public static final int CL_HALF_FLOAT = 4317;
	public static final int CL_INVALID_BINARY = -42;
	public static final int CL_COMMAND_WRITE_IMAGE = 4599;
	public static final int CL_INVALID_KERNEL_DEFINITION = -47;
	public static final int CL_ADDRESS_CLAMP = 4402;
	public static final int CL_COMMAND_USER = 4612;
	public static final int CL_UNORM_SHORT_565 = 4308;
	public static final int CL_UNORM_INT16 = 4307;
	public static final double CL_M_2_PI = 0.6366197723675814;
	public static final int CL_ADDRESS_REPEAT = 4403;
	public static final int CL_FALSE = 0;
	public static final int CL_Rx = 4282;
	public static final int CL_INVALID_GLOBAL_OFFSET = -56;
	public static final int CL_INVALID_PROGRAM = -44;
	public static final int CL_INVALID_KERNEL = -48;
	public static final int CL_MEM_SIZE = 4354;
	public static final int CL_AFFINITY_DOMAIN_L1_CACHE_EXT = 1;
	public static final int CL_PROGRAM_BINARIES = 4454;
	public static final int CL_DEVICE_TYPE_DEFAULT = (1 << 0);
	public static final int CL_DEVICE_IMAGE2D_MAX_HEIGHT = 4114;
	public static final int CL_INVALID_BUILD_OPTIONS = -43;
	public static final int CL_DEVICE_NOT_AVAILABLE = -2;
	public static final int CL_INVALID_VALUE = -30;
	public static final int CL_AFFINITY_DOMAIN_L3_CACHE_EXT = 3;
	public static final int CL_DEVICE_MEM_BASE_ADDR_ALIGN = 4121;
	public static final int CL_DEVICE_MAX_WORK_GROUP_SIZE = 4100;
	public static final int CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE = (1 << 0);
	public static final int CL_SAMPLER_NORMALIZED_COORDS = 4434;
	public static final int CL_EVENT_REFERENCE_COUNT = 4562;
	public static final int CL_MEM_HOST_PTR = 4355;
	public static final float CL_M_1_PI_F = 0.31830987F;
	public static final int CL_MEM_OBJECT_ALLOCATION_FAILURE = -4;
	public static final int CL_INVALID_MEM_OBJECT = -38;
	public static final double CL_M_LN2 = 0.6931471805599453;
	public static final int CL_COMPLETE = 0;
	public static final int CL_INTENSITY = 4280;
	public static final int CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF = 4156;
	public static final int CL_INVALID_PROGRAM_EXECUTABLE = -45;
	public static final int CL_MEM_WRITE_ONLY = (1 << 1);
	public static final int CL_PROGRAM_CONTEXT = 4449;
	public static final int CL_PLATFORM_ICD_SUFFIX_KHR = 2336;
	public static final int CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST = -14;
	public static final int CL_SAMPLER_ADDRESSING_MODE = 4435;
	public static final int CL_MEM_CONTEXT = 4358;
	public static final int CL_DEVICE_IMAGE3D_MAX_HEIGHT = 4116;
	public static final int CL_DEVICE_MAX_READ_IMAGE_ARGS = 4110;
	public static final int CL_DEVICE_NOT_FOUND = -1;
	public static final int CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF = 4148;
	public static final int CL_RGx = 4283;
	public static final int CL_DEVICE_MAX_PARAMETER_SIZE = 4119;
	public static final int CL_DEVICE_IMAGE3D_MAX_DEPTH = 4117;
	public static final int CL_GL_OBJECT_TEXTURE2D = 8193;
	public static final int CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN_EXT = 16467;
	public static final int CL_MEM_USE_HOST_PTR = (1 << 3);
	public static final int CL_SIGNED_INT8 = 4311;
	public static final int CL_DEVICE_WARP_SIZE_NV = 16387;
	public static final int CL_DEVICE_OPENCL_C_VERSION = 4157;
	public static final int CL_DEVICE_ADDRESS_BITS = 4109;
	public static final int CL_DEVICE_PARTITION_BY_COUNTS_EXT = 16465;
	public static final int CL_GL_OBJECT_BUFFER = 8192;
	public static final int CL_SAMPLER_CONTEXT = 4433;
	public static final int CL_GL_OBJECT_TEXTURE3D = 8194;
	public static final int CL_PLATFORM_VERSION = 2305;
	public static final int CL_DEVICE_LOCAL_MEM_TYPE = 4130;
	public static final int CL_DRIVER_VERSION = 4141;
	public static final int CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE = 4122;
	public static final int CL_DEVICE_VERSION = 4143;
	public static final int CL_PLATFORM_NOT_FOUND_KHR = -1001;
	public static final float CL_M_2_SQRTPI_F = 1.1283792F;
	public static final int CL_SIGNED_INT32 = 4313;
	public static final int CL_READ_WRITE_CACHE = 2;
	public static final int CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT = 4151;
	public static final int CL_KERNEL_COMPILE_WORK_GROUP_SIZE = 4529;
	public static final int CL_PLATFORM_PROFILE = 2304;
	public static final int CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT = 4154;
	public static final float CL_M_PI_4_F = 0.7853982F;
	public static final int CL_PROFILING_COMMAND_END = 4739;
	public static final int CL_DEVICE_PROFILE = 4142;
	public static final int CL_INVALID_OPERATION = -59;
	public static final int CL_DEVICE_REFERENCE_COUNT_EXT = 16471;
	public static final int CL_MEM_TYPE = 4352;
	public static final int CL_KERNEL_CONTEXT = 4499;
	public static final int CL_DEVICE_MAX_CLOCK_FREQUENCY = 4108;
	public static final int CL_EVENT_CONTEXT = 4564;
	public static final int CL_CONTEXT_NUM_DEVICES = 4227;
	public static final int CL_HAS_NAMED_VECTOR_FIELDS = 1;
	public static final int CL_GL_CONTEXT_KHR = 8200;
	public static final int CL_DEVICE_PROFILING_TIMER_RESOLUTION = 4133;
	public static final int CL_PROGRAM_BUILD_STATUS = 4481;
	public static final int CL_DEVICE_GLOBAL_MEM_CACHE_TYPE = 4124;
	public static final int CL_SUBMITTED = 2;
	public static final int CL_PLATFORM_NAME = 2306;
	public static final int CL_COMMAND_COPY_BUFFER_RECT = 4611;
	public static final int CL_COMPILER_NOT_AVAILABLE = -3;
	public static final int CL_SNORM_INT8 = 4304;
	public static final int CL_FP_FMA = (1 << 5);
	public static final int CL_PROFILING_COMMAND_START = 4738;
	public static final int CL_COMMAND_COPY_IMAGE = 4600;
	public static final int CL_DEVICE_MAX_WORK_ITEM_SIZES = 4101;
	public static final int CL_IMAGE_ELEMENT_SIZE = 4369;
	public static final int CL_DEVICE_PARTITION_EQUALLY_EXT = 16464;
	public static final int CL_INVALID_CONTEXT = -34;
	public static final int CL_IMAGE_HEIGHT = 4373;
	public static final int CL_DEVICE_HOST_UNIFIED_MEMORY = 4149;
	public static final int CL_COMMAND_MARKER = 4606;
	public static final int CL_COMMAND_GL_FENCE_SYNC_OBJECT_KHR = 8205;
	public static final int CL_AFFINITY_DOMAIN_L2_CACHE_EXT = 2;
	public static final int CL_EXEC_NATIVE_KERNEL = (1 << 1);
	public static final int CL_USHRT_MAX = 65535;
	public static final int CL_CURRENT_DEVICE_FOR_GL_CONTEXT_KHR = 8198;
	public static final int CL_KERNEL_PRIVATE_MEM_SIZE = 4532;
	public static final int CL_COMMAND_MAP_IMAGE = 4604;
	public static final int CL_EXEC_KERNEL = (1 << 0);
	public static final int CL_INVALID_GL_OBJECT = -60;
	public static final int CL_DEVICE_COMPUTE_CAPABILITY_MAJOR_NV = 16384;
	public static final int CL_COMMAND_READ_BUFFER_RECT = 4609;
	public static final int CL_QUEUE_DEVICE = 4241;
	public static final int CL_DEVICE_GPU_OVERLAP_NV = 16388;
	public static final int CL_DEVICE_EXTENSIONS = 4144;
	public static final int CL_DEVICE_PARENT_DEVICE_EXT = 16468;
	public static final int CL_MISALIGNED_SUB_BUFFER_OFFSET = -13;
	public static final int CL_EVENT_COMMAND_EXECUTION_STATUS = 4563;
	public static final int CL_DEVICE_MAX_WRITE_IMAGE_ARGS = 4111;
	public static final int CL_INVALID_HOST_PTR = -37;
	public static final float CL_M_SQRT2_F = 1.4142135F;
	public static final int CL_VERSION_1_1 = 1;
	public static final int CL_VERSION_1_0 = 1;
	public static final int CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE = 4107;
	public static final double CL_M_LOG2E = 1.4426950408889634;
	public static final int CL_SHRT_MAX = 32767;
	public static final int CL_UNORM_INT8 = 4306;
	public static final int CL_DEVICE_QUEUE_PROPERTIES = 4138;
	public static final int CL_BUILD_SUCCESS = 0;
	public static final int CL_FP_DENORM = (1 << 0);
	public static final float CL_M_LOG10E_F = 0.4342945F;
	public static final int CL_GL_MIPMAP_LEVEL = 8197;
	public static final int CL_SIGNED_INT16 = 4312;
	public static final int CL_INT_MIN = (-2147483647 - 1);
	public static final int CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT = 4103;
	public static final int CL_DEVICE_PARTITION_STYLE_EXT = 16472;
	public static final int CL_COMMAND_MAP_BUFFER = 4603;
	public static final int CL_MAP_WRITE = (1 << 1);
	public static final double CL_M_SQRT1_2 = 0.7071067811865476;
	public static final float CL_M_LN10_F = 2.3025851F;
	public static final int CL_FILTER_NEAREST = 4416;
	public static final int CL_KERNEL_FUNCTION_NAME = 4496;
	public static final int cl_khr_gl_sharing = 1;
	public static final int CL_BUILD_ERROR = -2;
	public static final int CL_OUT_OF_HOST_MEMORY = -6;
	public static final int CL_DEVICE_GLOBAL_MEM_CACHE_SIZE = 4126;
	public static final int CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS = 4099;
	public static final int CL_EVENT_COMMAND_TYPE = 4561;
	public static final int CL_A = 4273;
	public static final int CL_DEVICES_FOR_GL_CONTEXT_KHR = 8199;
	public static final int CL_MEM_OFFSET = 4360;
	public static final int CL_RGB = 4276;
	public static final int CL_PROGRAM_BINARY_SIZES = 4453;
	public static final int CL_INVALID_DEVICE = -33;
	public static final int CL_R = 4272;
	public static final int CL_COMMAND_WRITE_BUFFER = 4596;
	public static final int CL_INVALID_PARTITION_COUNT_EXT = -1058;
	public static final int CL_EGL_DISPLAY_KHR = 8201;
	public static final int CL_TRUE = 1;
	public static final int CL_BUILD_IN_PROGRESS = -3;
	public static final int CL_MEM_OBJECT_BUFFER = 4336;
	public static final float CL_M_PI_2_F = 1.5707964F;
	public static final int CL_DEVICE_AFFINITY_DOMAINS_EXT = 16470;
	public static final int CL_CONTEXT_PROPERTIES = 4226;
	public static final int CL_SCHAR_MIN = (-127 - 1);
	public static final int CL_FP_SOFT_FLOAT = (1 << 6);
	public static final int CL_DEVICE_VENDOR = 4140;
	public static final int CL_BUILD_NONE = -1;
	public static final int CL_FLT_DIG = 6;
	public static final int CL_MEM_OBJECT_IMAGE2D = 4337;
	public static final double CL_M_PI = 3.141592653589793;
	public static final int CL_IMAGE_FORMAT = 4368;
	public static final int CL_PLATFORM_VENDOR = 2307;
	public static final int CL_DEVICE_MAX_MEM_ALLOC_SIZE = 4112;
	public static final int CL_PROFILING_COMMAND_QUEUED = 4736;
	public static final float CL_M_LN2_F = 0.6931472F;
	public static final int CL_DEVICE_PARTITION_TYPES_EXT = 16469;
	public static final int CL_FILTER_LINEAR = 4417;
	public static final int CL_DEVICE_TYPE_ACCELERATOR = (1 << 3);
	public static final int CL_DEVICE_IMAGE_SUPPORT = 4118;
	public static final int CL_PROGRAM_BUILD_LOG = 4483;
	public static final int CL_IMAGE_DEPTH = 4374;
	public static final int CL_KERNEL_PROGRAM = 4500;
	public static final int CL_MEM_OBJECT_IMAGE3D = 4338;
	public static final double CL_M_1_PI = 0.3183098861837907;
	public static final float CL_M_E_F = 2.7182817F;
	public static final int CL_FLT_MANT_DIG = 24;
	public static final int CL_LOCAL = 1;
	public static final int CL_DEVICE_PROFILING_TIMER_OFFSET_AMD = 16438;
	public static final int CL_QUEUE_REFERENCE_COUNT = 4242;
	public static final int CL_DEVICE_PARTITION_FAILED_EXT = -1057;
	public static final double CL_M_LOG10E = 0.4342944819032518;
	public static final int CL_IMAGE_FORMAT_NOT_SUPPORTED = -10;
	public static final int CL_DEVICE_AVAILABLE = 4135;
	public static final int CL_UCHAR_MAX = 255;
	public static final int CL_DBL_MIN_10_EXP = -307;
	public static final int CL_DEVICE_MAX_SAMPLERS = 4120;
	public static final int CL_MEM_COPY_OVERLAP = -8;
	public static final int CL_MAP_READ = (1 << 0);
	public static final int CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE = 4155;
	public static final int CL_COMMAND_READ_IMAGE = 4598;
	public static final int CL_PROGRAM_NUM_DEVICES = 4450;
	public static final int CL_UNSIGNED_INT8 = 4314;
	public static final int CL_DBL_DIG = 15;
	public static final int cl_APPLE_ContextLoggingFunctions = 1;
	public static final int CL_WGL_HDC_KHR = 8203;
	public static final int CL_DBL_MANT_DIG = 53;
	public static final int CL_COMMAND_COPY_BUFFER_TO_IMAGE = 4602;
	public static final int CL_CGL_SHAREGROUP_KHR = 8204;
	public static final int CL_PROGRAM_DEVICES = 4451;
	public static final int CL_SAMPLER_REFERENCE_COUNT = 4432;
	public static final int CL_MEM_READ_WRITE = (1 << 0);
	public static final int CL_INVALID_KERNEL_NAME = -46;
	public static final int CL_DEVICE_EXECUTION_CAPABILITIES = 4137;
	public static final int CL_DEVICE_NAME = 4139;
	public static final int CL_DEVICE_INTEGRATED_MEMORY_NV = 16390;
	public static final int CL_MEM_REFERENCE_COUNT = 4357;
	public static final int CL_INVALID_IMAGE_FORMAT_DESCRIPTOR = -39;
	public static final int cl_ext_device_fission = 1;
	public static final int CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE = 4128;
	public static final int CL_MAP_FAILURE = -12;
	public static final int CL_IMAGE_SLICE_PITCH = 4371;
	public static final int CL_LUMINANCE = 4281;
	public static final int CL_ADDRESS_CLAMP_TO_EDGE = 4401;
	public static final int CL_GL_OBJECT_RENDERBUFFER = 8195;
	public static final int CL_DEVICE_NATIVE_VECTOR_WIDTH_INT = 4152;
	public static final int CL_SAMPLER_FILTER_MODE = 4436;
	public static final int CL_INVALID_QUEUE_PROPERTIES = -35;
	public static final int CL_INVALID_GLOBAL_WORK_SIZE = -63;
	public static final int CL_INT_MAX = 2147483647;
	public static final int CL_AFFINITY_DOMAIN_NUMA_EXT = 16;
	public static final int CL_FLT_MIN_10_EXP = -37;
	public static final int CL_AFFINITY_DOMAIN_L4_CACHE_EXT = 4;
	public static final int CL_MEM_COPY_HOST_PTR = (1 << 5);
	public static final int CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE = 4531;
	public static final int CL_MEM_FLAGS = 4353;
	public static final int CL_DEVICE_DOUBLE_FP_CONFIG = 4146;
	public static final int CL_COMMAND_TASK = 4593;
	public static final int CL_DEVICE_HALF_FP_CONFIG = 4147;
	public static final int CL_FP_ROUND_TO_ZERO = (1 << 3);
	public static final int CL_RUNNING = 1;
	public static final int CL_DEVICE_IMAGE3D_MAX_WIDTH = 4115;
	public static final int CL_INVALID_WORK_DIMENSION = -53;
	public static final int CL_DEVICE_PLATFORM = 4145;
	public static final int CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG = 4153;
	public static final double CL_M_E = 2.718281828459045;
	public static final int CL_INVALID_SAMPLER = -41;
	public static final int CL_CHAR_MIN = -127 - 1;
	public static final int CL_CHAR_MAX = OpenCLLibrary.CL_SCHAR_MAX;
	public interface clGetGLContextInfoKHR_fn extends Callback {
		int invoke(NativeSizeByReference properties, int param_name, NativeSize param_value_size, Pointer param_value, NativeSizeByReference param_value_size_ret);
	};
	public interface clIcdGetPlatformIDsKHR_fn extends Callback {
		int invoke(int cl_uint1, PointerByReference cl_platform_idPtr1, IntByReference cl_uintPtr1);
	};
	public interface clReleaseDeviceEXT_fn extends Callback {
		int invoke(OpenCLLibrary.cl_device_id cl_device_id1);
	};
	public interface clRetainDeviceEXT_fn extends Callback {
		int invoke(OpenCLLibrary.cl_device_id cl_device_id1);
	};
	public interface clCreateContext_arg1_callback extends Callback {
		void invoke(Pointer charPtr1, Pointer voidPtr1, NativeSize size_t1, Pointer voidPtr2);
	};
	public interface clCreateContextFromType_arg1_callback extends Callback {
		void invoke(Pointer charPtr1, Pointer voidPtr1, NativeSize size_t1, Pointer voidPtr2);
	};
	public interface clSetMemObjectDestructorCallback_arg1_callback extends Callback {
		/// @param cl_mem1 user_data
		void invoke(OpenCLLibrary.cl_mem cl_mem1, Pointer voidPtr1);
	};
	public interface clBuildProgram_arg1_callback extends Callback {
		/// @param cl_program1 user_data
		void invoke(OpenCLLibrary.cl_program cl_program1, Pointer voidPtr1);
	};
	public interface clSetEventCallback_arg1_callback extends Callback {
		void invoke(OpenCLLibrary.cl_event cl_event1, int cl_int1, Pointer voidPtr1);
	};
	public interface user_func extends Callback {
		void invoke(Pointer voidPtr1);
	};
	public interface clSetMemObjectDestructorAPPLE_arg1_callback extends Callback {
		/// @param cl_mem1 user_data
		void invoke(OpenCLLibrary.cl_mem cl_mem1, Pointer voidPtr1);
	};
	public interface clCreateSubDevicesEXT_fn_callback extends Callback {
		int invoke(OpenCLLibrary.cl_device_id cl_device_id1, LongByReference cl_device_partition_property_extPtr1, int cl_uint1, PointerByReference cl_device_idPtr1, IntByReference cl_uintPtr1);
	};
	/**
	 * Platform API<br>
	 * Original signature : <code>cl_int clGetPlatformIDs(cl_uint, cl_platform_id*, cl_uint*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clGetPlatformIDs.html">Khronos Documentation for clGetPlatformIDs</a><br>
	 * @deprecated use the safer methods {@link #clGetPlatformIDs(int, com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer)} and {@link #clGetPlatformIDs(int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_platform_id[], com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated 
	int clGetPlatformIDs(int cl_uint1, PointerByReference cl_platform_idPtr1, IntByReference cl_uintPtr1);
	/**
	 * Platform API<br>
	 * Original signature : <code>cl_int clGetPlatformIDs(cl_uint, cl_platform_id*, cl_uint*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clGetPlatformIDs.html">Khronos Documentation for clGetPlatformIDs</a>
	 */
	int clGetPlatformIDs(int cl_uint1, PointerByReference cl_platform_idPtr1, IntBuffer cl_uintPtr1);
	/**
	 * Platform API<br>
	 * Original signature : <code>cl_int clGetPlatformIDs(cl_uint, cl_platform_id*, cl_uint*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clGetPlatformIDs.html">Khronos Documentation for clGetPlatformIDs</a>
	 */
	int clGetPlatformIDs(int cl_uint1, OpenCLLibrary.cl_platform_id cl_platform_idPtr1[], IntByReference cl_uintPtr1);
	/**
	 * Original signature : <code>cl_int clGetPlatformInfo(cl_platform_id, cl_platform_info, size_t, void*, size_t*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clGetPlatformInfo.html">Khronos Documentation for clGetPlatformInfo</a>
	 */
	int clGetPlatformInfo(OpenCLLibrary.cl_platform_id cl_platform_id1, int cl_platform_info1, NativeSize size_t1, Pointer voidPtr1, NativeSizeByReference size_tPtr1);
	/**
	 * Device APIs<br>
	 * Original signature : <code>cl_int clGetDeviceIDs(cl_platform_id, cl_device_type, cl_uint, cl_device_id*, cl_uint*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clGetDeviceIDs.html">Khronos Documentation for clGetDeviceIDs</a><br>
	 * @deprecated use the safer methods {@link #clGetDeviceIDs(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_platform_id, long, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_device_id[], java.nio.IntBuffer)} and {@link #clGetDeviceIDs(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_platform_id, long, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_device_id[], com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated 
	int clGetDeviceIDs(OpenCLLibrary.cl_platform_id cl_platform_id1, long cl_device_type1, int cl_uint1, PointerByReference cl_device_idPtr1, IntByReference cl_uintPtr1);
	/**
	 * Device APIs<br>
	 * Original signature : <code>cl_int clGetDeviceIDs(cl_platform_id, cl_device_type, cl_uint, cl_device_id*, cl_uint*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clGetDeviceIDs.html">Khronos Documentation for clGetDeviceIDs</a>
	 */
	int clGetDeviceIDs(OpenCLLibrary.cl_platform_id cl_platform_id1, long cl_device_type1, int cl_uint1, OpenCLLibrary.cl_device_id cl_device_idPtr1[], IntBuffer cl_uintPtr1);
	/**
	 * Device APIs<br>
	 * Original signature : <code>cl_int clGetDeviceIDs(cl_platform_id, cl_device_type, cl_uint, cl_device_id*, cl_uint*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clGetDeviceIDs.html">Khronos Documentation for clGetDeviceIDs</a>
	 */
	int clGetDeviceIDs(OpenCLLibrary.cl_platform_id cl_platform_id1, long cl_device_type1, int cl_uint1, OpenCLLibrary.cl_device_id cl_device_idPtr1[], IntByReference cl_uintPtr1);
	/**
	 * Original signature : <code>cl_int clGetDeviceInfo(cl_device_id, cl_device_info, size_t, void*, size_t*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clGetDeviceInfo.html">Khronos Documentation for clGetDeviceInfo</a>
	 */
	int clGetDeviceInfo(OpenCLLibrary.cl_device_id cl_device_id1, int cl_device_info1, NativeSize size_t1, Pointer voidPtr1, NativeSizeByReference size_tPtr1);
	/**
	 * Context APIs<br>
	 * Original signature : <code>cl_context clCreateContext(const cl_context_properties*, cl_uint, const cl_device_id*, clCreateContext_arg1_callback, void*, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateContext.html">Khronos Documentation for clCreateContext</a><br>
	 * @deprecated use the safer methods {@link #clCreateContext(com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_device_id[], com.nativelibs4java.opencl.library.OpenCLLibrary.clCreateContext_arg1_callback, com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #clCreateContext(com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_device_id[], com.nativelibs4java.opencl.library.OpenCLLibrary.clCreateContext_arg1_callback, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated 
	OpenCLLibrary.cl_context clCreateContext(NativeSizeByReference cl_context_propertiesPtr1, int cl_uint1, PointerByReference cl_device_idPtr1, OpenCLLibrary.clCreateContext_arg1_callback arg1, Pointer voidPtr1, IntByReference cl_intPtr1);
	/**
	 * Context APIs<br>
	 * Original signature : <code>cl_context clCreateContext(const cl_context_properties*, cl_uint, const cl_device_id*, clCreateContext_arg1_callback, void*, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateContext.html">Khronos Documentation for clCreateContext</a>
	 */
	OpenCLLibrary.cl_context clCreateContext(NativeSizeByReference cl_context_propertiesPtr1, int cl_uint1, OpenCLLibrary.cl_device_id cl_device_idPtr1[], OpenCLLibrary.clCreateContext_arg1_callback arg1, Pointer voidPtr1, IntBuffer cl_intPtr1);
	/**
	 * Context APIs<br>
	 * Original signature : <code>cl_context clCreateContext(const cl_context_properties*, cl_uint, const cl_device_id*, clCreateContext_arg1_callback, void*, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateContext.html">Khronos Documentation for clCreateContext</a>
	 */
	OpenCLLibrary.cl_context clCreateContext(NativeSizeByReference cl_context_propertiesPtr1, int cl_uint1, OpenCLLibrary.cl_device_id cl_device_idPtr1[], OpenCLLibrary.clCreateContext_arg1_callback arg1, Pointer voidPtr1, IntByReference cl_intPtr1);
	/**
	 * Original signature : <code>cl_context clCreateContextFromType(const cl_context_properties*, cl_device_type, clCreateContextFromType_arg1_callback, void*, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateContextFromType.html">Khronos Documentation for clCreateContextFromType</a><br>
	 * @deprecated use the safer methods {@link #clCreateContextFromType(com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, long, com.nativelibs4java.opencl.library.OpenCLLibrary.clCreateContextFromType_arg1_callback, com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #clCreateContextFromType(com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, long, com.nativelibs4java.opencl.library.OpenCLLibrary.clCreateContextFromType_arg1_callback, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated 
	OpenCLLibrary.cl_context clCreateContextFromType(NativeSizeByReference cl_context_propertiesPtr1, long cl_device_type1, OpenCLLibrary.clCreateContextFromType_arg1_callback arg1, Pointer voidPtr1, IntByReference cl_intPtr1);
	/**
	 * Original signature : <code>cl_context clCreateContextFromType(const cl_context_properties*, cl_device_type, clCreateContextFromType_arg1_callback, void*, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateContextFromType.html">Khronos Documentation for clCreateContextFromType</a>
	 */
	OpenCLLibrary.cl_context clCreateContextFromType(NativeSizeByReference cl_context_propertiesPtr1, long cl_device_type1, OpenCLLibrary.clCreateContextFromType_arg1_callback arg1, Pointer voidPtr1, IntBuffer cl_intPtr1);
	/**
	 * Original signature : <code>cl_int clRetainContext(cl_context)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clRetainContext.html">Khronos Documentation for clRetainContext</a>
	 */
	int clRetainContext(OpenCLLibrary.cl_context cl_context1);
	/**
	 * Original signature : <code>cl_int clReleaseContext(cl_context)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clReleaseContext.html">Khronos Documentation for clReleaseContext</a>
	 */
	int clReleaseContext(OpenCLLibrary.cl_context cl_context1);
	/**
	 * Original signature : <code>cl_int clGetContextInfo(cl_context, cl_context_info, size_t, void*, size_t*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clGetContextInfo.html">Khronos Documentation for clGetContextInfo</a>
	 */
	int clGetContextInfo(OpenCLLibrary.cl_context cl_context1, int cl_context_info1, NativeSize size_t1, Pointer voidPtr1, NativeSizeByReference size_tPtr1);
	/**
	 * Command Queue APIs<br>
	 * Original signature : <code>cl_command_queue clCreateCommandQueue(cl_context, cl_device_id, cl_command_queue_properties, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateCommandQueue.html">Khronos Documentation for clCreateCommandQueue</a><br>
	 * @deprecated use the safer methods {@link #clCreateCommandQueue(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_context, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_device_id, long, java.nio.IntBuffer)} and {@link #clCreateCommandQueue(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_context, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_device_id, long, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated 
	OpenCLLibrary.cl_command_queue clCreateCommandQueue(OpenCLLibrary.cl_context cl_context1, OpenCLLibrary.cl_device_id cl_device_id1, long cl_command_queue_properties1, IntByReference cl_intPtr1);
	/**
	 * Command Queue APIs<br>
	 * Original signature : <code>cl_command_queue clCreateCommandQueue(cl_context, cl_device_id, cl_command_queue_properties, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateCommandQueue.html">Khronos Documentation for clCreateCommandQueue</a>
	 */
	OpenCLLibrary.cl_command_queue clCreateCommandQueue(OpenCLLibrary.cl_context cl_context1, OpenCLLibrary.cl_device_id cl_device_id1, long cl_command_queue_properties1, IntBuffer cl_intPtr1);
	/**
	 * Original signature : <code>cl_int clRetainCommandQueue(cl_command_queue)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clRetainCommandQueue.html">Khronos Documentation for clRetainCommandQueue</a>
	 */
	int clRetainCommandQueue(OpenCLLibrary.cl_command_queue cl_command_queue1);
	/**
	 * Original signature : <code>cl_int clReleaseCommandQueue(cl_command_queue)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clReleaseCommandQueue.html">Khronos Documentation for clReleaseCommandQueue</a>
	 */
	int clReleaseCommandQueue(OpenCLLibrary.cl_command_queue cl_command_queue1);
	/**
	 * Original signature : <code>cl_int clGetCommandQueueInfo(cl_command_queue, cl_command_queue_info, size_t, void*, size_t*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clGetCommandQueueInfo.html">Khronos Documentation for clGetCommandQueueInfo</a>
	 */
	int clGetCommandQueueInfo(OpenCLLibrary.cl_command_queue cl_command_queue1, int cl_command_queue_info1, NativeSize size_t1, Pointer voidPtr1, NativeSizeByReference size_tPtr1);
	/**
	 * WARNING:<br>
	 *     This API introduces mutable state into the OpenCL implementation. It has been REMOVED<br>
	 *  to better facilitate thread safety.  The 1.0 API is not thread safe. It is not tested by the<br>
	 *  OpenCL 1.1 conformance test, and consequently may not work or may not work dependably.<br>
	 *  It is likely to be non-performant. Use of this API is not advised. Use at your own risk.<br>
	 * *  Software developers previously relying on this API are instructed to set the command queue <br>
	 *  properties when creating the queue, instead.<br>
	 * Original signature : <code>cl_int clSetCommandQueueProperty(cl_command_queue, cl_command_queue_properties, cl_bool, cl_command_queue_properties*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clSetCommandQueueProperty.html">Khronos Documentation for clSetCommandQueueProperty</a><br>
	 * @deprecated use the safer methods {@link #clSetCommandQueueProperty(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, long, int, java.nio.LongBuffer)} and {@link #clSetCommandQueueProperty(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, long, int, com.sun.jna.ptr.LongByReference)} instead
	 */
	@java.lang.Deprecated 
	int clSetCommandQueueProperty(OpenCLLibrary.cl_command_queue cl_command_queue1, long cl_command_queue_properties1, int cl_bool1, LongByReference cl_command_queue_propertiesPtr1);
	/**
	 * WARNING:<br>
	 *     This API introduces mutable state into the OpenCL implementation. It has been REMOVED<br>
	 *  to better facilitate thread safety.  The 1.0 API is not thread safe. It is not tested by the<br>
	 *  OpenCL 1.1 conformance test, and consequently may not work or may not work dependably.<br>
	 *  It is likely to be non-performant. Use of this API is not advised. Use at your own risk.<br>
	 * *  Software developers previously relying on this API are instructed to set the command queue <br>
	 *  properties when creating the queue, instead.<br>
	 * Original signature : <code>cl_int clSetCommandQueueProperty(cl_command_queue, cl_command_queue_properties, cl_bool, cl_command_queue_properties*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clSetCommandQueueProperty.html">Khronos Documentation for clSetCommandQueueProperty</a>
	 */
	int clSetCommandQueueProperty(OpenCLLibrary.cl_command_queue cl_command_queue1, long cl_command_queue_properties1, int cl_bool1, LongBuffer cl_command_queue_propertiesPtr1);
	/**
	 * Memory Object APIs<br>
	 * Original signature : <code>cl_mem clCreateBuffer(cl_context, cl_mem_flags, size_t, void*, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateBuffer.html">Khronos Documentation for clCreateBuffer</a><br>
	 * @deprecated use the safer methods {@link #clCreateBuffer(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_context, long, com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #clCreateBuffer(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_context, long, com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated 
	OpenCLLibrary.cl_mem clCreateBuffer(OpenCLLibrary.cl_context cl_context1, long cl_mem_flags1, NativeSize size_t1, Pointer voidPtr1, IntByReference cl_intPtr1);
	/**
	 * Memory Object APIs<br>
	 * Original signature : <code>cl_mem clCreateBuffer(cl_context, cl_mem_flags, size_t, void*, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateBuffer.html">Khronos Documentation for clCreateBuffer</a>
	 */
	OpenCLLibrary.cl_mem clCreateBuffer(OpenCLLibrary.cl_context cl_context1, long cl_mem_flags1, NativeSize size_t1, Pointer voidPtr1, IntBuffer cl_intPtr1);
	/**
	 * Original signature : <code>cl_mem clCreateSubBuffer(cl_mem, cl_mem_flags, cl_buffer_create_type, const void*, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateSubBuffer.html">Khronos Documentation for clCreateSubBuffer</a><br>
	 * @deprecated use the safer methods {@link #clCreateSubBuffer(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, long, int, com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #clCreateSubBuffer(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, long, int, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated 
	OpenCLLibrary.cl_mem clCreateSubBuffer(OpenCLLibrary.cl_mem cl_mem1, long cl_mem_flags1, int cl_buffer_create_type1, Pointer voidPtr1, IntByReference cl_intPtr1);
	/**
	 * Original signature : <code>cl_mem clCreateSubBuffer(cl_mem, cl_mem_flags, cl_buffer_create_type, const void*, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateSubBuffer.html">Khronos Documentation for clCreateSubBuffer</a>
	 */
	OpenCLLibrary.cl_mem clCreateSubBuffer(OpenCLLibrary.cl_mem cl_mem1, long cl_mem_flags1, int cl_buffer_create_type1, Pointer voidPtr1, IntBuffer cl_intPtr1);
	/**
	 * Original signature : <code>cl_mem clCreateImage2D(cl_context, cl_mem_flags, const cl_image_format*, size_t, size_t, size_t, void*, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateImage2D.html">Khronos Documentation for clCreateImage2D</a><br>
	 * @deprecated use the safer methods {@link #clCreateImage2D(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_context, long, com.nativelibs4java.opencl.library.cl_image_format, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #clCreateImage2D(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_context, long, com.nativelibs4java.opencl.library.cl_image_format, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated 
	OpenCLLibrary.cl_mem clCreateImage2D(OpenCLLibrary.cl_context cl_context1, long cl_mem_flags1, com.nativelibs4java.opencl.library.cl_image_format cl_image_formatPtr1, NativeSize size_t1, NativeSize size_t2, NativeSize size_t3, Pointer voidPtr1, IntByReference cl_intPtr1);
	/**
	 * Original signature : <code>cl_mem clCreateImage2D(cl_context, cl_mem_flags, const cl_image_format*, size_t, size_t, size_t, void*, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateImage2D.html">Khronos Documentation for clCreateImage2D</a>
	 */
	OpenCLLibrary.cl_mem clCreateImage2D(OpenCLLibrary.cl_context cl_context1, long cl_mem_flags1, com.nativelibs4java.opencl.library.cl_image_format cl_image_formatPtr1, NativeSize size_t1, NativeSize size_t2, NativeSize size_t3, Pointer voidPtr1, IntBuffer cl_intPtr1);
	/**
	 * Original signature : <code>cl_mem clCreateImage3D(cl_context, cl_mem_flags, const cl_image_format*, size_t, size_t, size_t, size_t, size_t, void*, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateImage3D.html">Khronos Documentation for clCreateImage3D</a><br>
	 * @deprecated use the safer methods {@link #clCreateImage3D(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_context, long, com.nativelibs4java.opencl.library.cl_image_format, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #clCreateImage3D(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_context, long, com.nativelibs4java.opencl.library.cl_image_format, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated 
	OpenCLLibrary.cl_mem clCreateImage3D(OpenCLLibrary.cl_context cl_context1, long cl_mem_flags1, com.nativelibs4java.opencl.library.cl_image_format cl_image_formatPtr1, NativeSize size_t1, NativeSize size_t2, NativeSize size_t3, NativeSize size_t4, NativeSize size_t5, Pointer voidPtr1, IntByReference cl_intPtr1);
	/**
	 * Original signature : <code>cl_mem clCreateImage3D(cl_context, cl_mem_flags, const cl_image_format*, size_t, size_t, size_t, size_t, size_t, void*, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateImage3D.html">Khronos Documentation for clCreateImage3D</a>
	 */
	OpenCLLibrary.cl_mem clCreateImage3D(OpenCLLibrary.cl_context cl_context1, long cl_mem_flags1, com.nativelibs4java.opencl.library.cl_image_format cl_image_formatPtr1, NativeSize size_t1, NativeSize size_t2, NativeSize size_t3, NativeSize size_t4, NativeSize size_t5, Pointer voidPtr1, IntBuffer cl_intPtr1);
	/**
	 * Original signature : <code>cl_int clRetainMemObject(cl_mem)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clRetainMemObject.html">Khronos Documentation for clRetainMemObject</a>
	 */
	int clRetainMemObject(OpenCLLibrary.cl_mem cl_mem1);
	/**
	 * Original signature : <code>cl_int clReleaseMemObject(cl_mem)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clReleaseMemObject.html">Khronos Documentation for clReleaseMemObject</a>
	 */
	int clReleaseMemObject(OpenCLLibrary.cl_mem cl_mem1);
	/**
	 * Original signature : <code>cl_int clGetSupportedImageFormats(cl_context, cl_mem_flags, cl_mem_object_type, cl_uint, cl_image_format*, cl_uint*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clGetSupportedImageFormats.html">Khronos Documentation for clGetSupportedImageFormats</a><br>
	 * @deprecated use the safer methods {@link #clGetSupportedImageFormats(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_context, long, int, int, com.nativelibs4java.opencl.library.cl_image_format, java.nio.IntBuffer)} and {@link #clGetSupportedImageFormats(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_context, long, int, int, com.nativelibs4java.opencl.library.cl_image_format, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated 
	int clGetSupportedImageFormats(OpenCLLibrary.cl_context cl_context1, long cl_mem_flags1, int cl_mem_object_type1, int cl_uint1, com.nativelibs4java.opencl.library.cl_image_format cl_image_formatPtr1, IntByReference cl_uintPtr1);
	/**
	 * Original signature : <code>cl_int clGetSupportedImageFormats(cl_context, cl_mem_flags, cl_mem_object_type, cl_uint, cl_image_format*, cl_uint*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clGetSupportedImageFormats.html">Khronos Documentation for clGetSupportedImageFormats</a>
	 */
	int clGetSupportedImageFormats(OpenCLLibrary.cl_context cl_context1, long cl_mem_flags1, int cl_mem_object_type1, int cl_uint1, com.nativelibs4java.opencl.library.cl_image_format cl_image_formatPtr1, IntBuffer cl_uintPtr1);
	/**
	 * Original signature : <code>cl_int clGetMemObjectInfo(cl_mem, cl_mem_info, size_t, void*, size_t*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clGetMemObjectInfo.html">Khronos Documentation for clGetMemObjectInfo</a>
	 */
	int clGetMemObjectInfo(OpenCLLibrary.cl_mem cl_mem1, int cl_mem_info1, NativeSize size_t1, Pointer voidPtr1, NativeSizeByReference size_tPtr1);
	/**
	 * Original signature : <code>cl_int clGetImageInfo(cl_mem, cl_image_info, size_t, void*, size_t*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clGetImageInfo.html">Khronos Documentation for clGetImageInfo</a>
	 */
	int clGetImageInfo(OpenCLLibrary.cl_mem cl_mem1, int cl_image_info1, NativeSize size_t1, Pointer voidPtr1, NativeSizeByReference size_tPtr1);
	/**
	 * Original signature : <code>cl_int clSetMemObjectDestructorCallback(cl_mem, clSetMemObjectDestructorCallback_arg1_callback, void*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clSetMemObjectDestructorCallback.html">Khronos Documentation for clSetMemObjectDestructorCallback</a>
	 */
	int clSetMemObjectDestructorCallback(OpenCLLibrary.cl_mem cl_mem1, OpenCLLibrary.clSetMemObjectDestructorCallback_arg1_callback arg1, Pointer voidPtr1);
	/**
	 * Sampler APIs<br>
	 * Original signature : <code>cl_sampler clCreateSampler(cl_context, cl_bool, cl_addressing_mode, cl_filter_mode, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateSampler.html">Khronos Documentation for clCreateSampler</a><br>
	 * @deprecated use the safer methods {@link #clCreateSampler(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_context, int, int, int, java.nio.IntBuffer)} and {@link #clCreateSampler(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_context, int, int, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated 
	OpenCLLibrary.cl_sampler clCreateSampler(OpenCLLibrary.cl_context cl_context1, int cl_bool1, int cl_addressing_mode1, int cl_filter_mode1, IntByReference cl_intPtr1);
	/**
	 * Sampler APIs<br>
	 * Original signature : <code>cl_sampler clCreateSampler(cl_context, cl_bool, cl_addressing_mode, cl_filter_mode, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateSampler.html">Khronos Documentation for clCreateSampler</a>
	 */
	OpenCLLibrary.cl_sampler clCreateSampler(OpenCLLibrary.cl_context cl_context1, int cl_bool1, int cl_addressing_mode1, int cl_filter_mode1, IntBuffer cl_intPtr1);
	/**
	 * Original signature : <code>cl_int clRetainSampler(cl_sampler)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clRetainSampler.html">Khronos Documentation for clRetainSampler</a>
	 */
	int clRetainSampler(OpenCLLibrary.cl_sampler cl_sampler1);
	/**
	 * Original signature : <code>cl_int clReleaseSampler(cl_sampler)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clReleaseSampler.html">Khronos Documentation for clReleaseSampler</a>
	 */
	int clReleaseSampler(OpenCLLibrary.cl_sampler cl_sampler1);
	/**
	 * Original signature : <code>cl_int clGetSamplerInfo(cl_sampler, cl_sampler_info, size_t, void*, size_t*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clGetSamplerInfo.html">Khronos Documentation for clGetSamplerInfo</a>
	 */
	int clGetSamplerInfo(OpenCLLibrary.cl_sampler cl_sampler1, int cl_sampler_info1, NativeSize size_t1, Pointer voidPtr1, NativeSizeByReference size_tPtr1);
	/**
	 * Program Object APIs<br>
	 * Original signature : <code>cl_program clCreateProgramWithSource(cl_context, cl_uint, const char**, const size_t*, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateProgramWithSource.html">Khronos Documentation for clCreateProgramWithSource</a><br>
	 * @deprecated use the safer methods {@link #clCreateProgramWithSource(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_context, int, java.lang.String[], com.ochafik.lang.jnaerator.runtime.NativeSize[], java.nio.IntBuffer)} and {@link #clCreateProgramWithSource(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_context, int, com.sun.jna.ptr.PointerByReference, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated 
	OpenCLLibrary.cl_program clCreateProgramWithSource(OpenCLLibrary.cl_context cl_context1, int cl_uint1, PointerByReference charPtrPtr1, NativeSizeByReference size_tPtr1, IntByReference cl_intPtr1);
	/**
	 * Program Object APIs<br>
	 * Original signature : <code>cl_program clCreateProgramWithSource(cl_context, cl_uint, const char**, const size_t*, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateProgramWithSource.html">Khronos Documentation for clCreateProgramWithSource</a>
	 */
	OpenCLLibrary.cl_program clCreateProgramWithSource(OpenCLLibrary.cl_context cl_context1, int cl_uint1, java.lang.String charPtrPtr1[], NativeSize size_tPtr1[], IntBuffer cl_intPtr1);
	/**
	 * Original signature : <code>cl_program clCreateProgramWithBinary(cl_context, cl_uint, const cl_device_id*, const size_t*, const unsigned char**, cl_int*, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateProgramWithBinary.html">Khronos Documentation for clCreateProgramWithBinary</a><br>
	 * @deprecated use the safer methods {@link #clCreateProgramWithBinary(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_context, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_device_id[], com.ochafik.lang.jnaerator.runtime.NativeSize[], com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #clCreateProgramWithBinary(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_context, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_device_id[], com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated 
	OpenCLLibrary.cl_program clCreateProgramWithBinary(OpenCLLibrary.cl_context cl_context1, int cl_uint1, PointerByReference cl_device_idPtr1, NativeSizeByReference size_tPtr1, PointerByReference charPtrPtr1, IntByReference cl_intPtr1, IntByReference cl_intPtr2);
	/**
	 * Original signature : <code>cl_program clCreateProgramWithBinary(cl_context, cl_uint, const cl_device_id*, const size_t*, const unsigned char**, cl_int*, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateProgramWithBinary.html">Khronos Documentation for clCreateProgramWithBinary</a>
	 */
	OpenCLLibrary.cl_program clCreateProgramWithBinary(OpenCLLibrary.cl_context cl_context1, int cl_uint1, OpenCLLibrary.cl_device_id cl_device_idPtr1[], NativeSize size_tPtr1[], PointerByReference charPtrPtr1, IntBuffer cl_intPtr1, IntBuffer cl_intPtr2);
	/**
	 * Original signature : <code>cl_program clCreateProgramWithBinary(cl_context, cl_uint, const cl_device_id*, const size_t*, const unsigned char**, cl_int*, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateProgramWithBinary.html">Khronos Documentation for clCreateProgramWithBinary</a>
	 */
	OpenCLLibrary.cl_program clCreateProgramWithBinary(OpenCLLibrary.cl_context cl_context1, int cl_uint1, OpenCLLibrary.cl_device_id cl_device_idPtr1[], NativeSize size_tPtr1[], String[] charPtrPtr1, IntBuffer cl_intPtr1, IntBuffer cl_intPtr2);
	/**
	 * Original signature : <code>cl_program clCreateProgramWithBinary(cl_context, cl_uint, const cl_device_id*, const size_t*, const unsigned char**, cl_int*, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/opencl/sdk/1.0/docs/man/xhtml/clCreateProgramWithBinary.html">Khronos Documentation for clCreateProgramWithBinary</a>
	 */
	OpenCLLibrary.cl_program clCreateProgramWithBinary(OpenCLLibrary.cl_context cl_context1, int cl_uint1, OpenCLLibrary.cl_device_id cl_device_idPtr1[], NativeSizeByReference size_tPtr1, PointerByReference charPtrPtr1, IntByReference cl_intPtr1, IntByReference cl_intPtr2);
	/**
	 * Original signature : <code>cl_int clRetainProgram(cl_program)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clRetainProgram.html">Khronos Documentation for clRetainProgram</a>
	 */
	int clRetainProgram(OpenCLLibrary.cl_program cl_program1);
	/**
	 * Original signature : <code>cl_int clReleaseProgram(cl_program)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clReleaseProgram.html">Khronos Documentation for clReleaseProgram</a>
	 */
	int clReleaseProgram(OpenCLLibrary.cl_program cl_program1);
	/**
	 * Original signature : <code>cl_int clBuildProgram(cl_program, cl_uint, const cl_device_id*, const char*, clBuildProgram_arg1_callback, void*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clBuildProgram.html">Khronos Documentation for clBuildProgram</a><br>
	 * @deprecated use the safer methods {@link #clBuildProgram(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_program, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_device_id[], java.lang.String, com.nativelibs4java.opencl.library.OpenCLLibrary.clBuildProgram_arg1_callback, com.sun.jna.Pointer)} and {@link #clBuildProgram(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_program, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_device_id[], com.sun.jna.Pointer, com.nativelibs4java.opencl.library.OpenCLLibrary.clBuildProgram_arg1_callback, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated 
	int clBuildProgram(OpenCLLibrary.cl_program cl_program1, int cl_uint1, PointerByReference cl_device_idPtr1, Pointer charPtr1, OpenCLLibrary.clBuildProgram_arg1_callback arg1, Pointer voidPtr1);
	/**
	 * Original signature : <code>cl_int clBuildProgram(cl_program, cl_uint, const cl_device_id*, const char*, clBuildProgram_arg1_callback, void*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clBuildProgram.html">Khronos Documentation for clBuildProgram</a>
	 */
	int clBuildProgram(OpenCLLibrary.cl_program cl_program1, int cl_uint1, OpenCLLibrary.cl_device_id cl_device_idPtr1[], java.lang.String charPtr1, OpenCLLibrary.clBuildProgram_arg1_callback arg1, Pointer voidPtr1);
	/**
	 * Original signature : <code>cl_int clBuildProgram(cl_program, cl_uint, const cl_device_id*, const char*, clBuildProgram_arg1_callback, void*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clBuildProgram.html">Khronos Documentation for clBuildProgram</a>
	 */
	int clBuildProgram(OpenCLLibrary.cl_program cl_program1, int cl_uint1, OpenCLLibrary.cl_device_id cl_device_idPtr1[], Pointer charPtr1, OpenCLLibrary.clBuildProgram_arg1_callback arg1, Pointer voidPtr1);
	/**
	 * Original signature : <code>cl_int clUnloadCompiler()</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clUnloadCompiler.html">Khronos Documentation for clUnloadCompiler</a>
	 */
	int clUnloadCompiler();
	/**
	 * Original signature : <code>cl_int clGetProgramInfo(cl_program, cl_program_info, size_t, void*, size_t*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clGetProgramInfo.html">Khronos Documentation for clGetProgramInfo</a>
	 */
	int clGetProgramInfo(OpenCLLibrary.cl_program cl_program1, int cl_program_info1, NativeSize size_t1, Pointer voidPtr1, NativeSizeByReference size_tPtr1);
	/**
	 * Original signature : <code>cl_int clGetProgramBuildInfo(cl_program, cl_device_id, cl_program_build_info, size_t, void*, size_t*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clGetProgramBuildInfo.html">Khronos Documentation for clGetProgramBuildInfo</a>
	 */
	int clGetProgramBuildInfo(OpenCLLibrary.cl_program cl_program1, OpenCLLibrary.cl_device_id cl_device_id1, int cl_program_build_info1, NativeSize size_t1, Pointer voidPtr1, NativeSizeByReference size_tPtr1);
	/**
	 * Kernel Object APIs<br>
	 * Original signature : <code>cl_kernel clCreateKernel(cl_program, const char*, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateKernel.html">Khronos Documentation for clCreateKernel</a><br>
	 * @deprecated use the safer methods {@link #clCreateKernel(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_program, java.lang.String, java.nio.IntBuffer)} and {@link #clCreateKernel(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_program, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated 
	OpenCLLibrary.cl_kernel clCreateKernel(OpenCLLibrary.cl_program cl_program1, Pointer charPtr1, IntByReference cl_intPtr1);
	/**
	 * Kernel Object APIs<br>
	 * Original signature : <code>cl_kernel clCreateKernel(cl_program, const char*, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateKernel.html">Khronos Documentation for clCreateKernel</a>
	 */
	OpenCLLibrary.cl_kernel clCreateKernel(OpenCLLibrary.cl_program cl_program1, java.lang.String charPtr1, IntBuffer cl_intPtr1);
	/**
	 * Original signature : <code>cl_int clCreateKernelsInProgram(cl_program, cl_uint, cl_kernel*, cl_uint*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateKernelsInProgram.html">Khronos Documentation for clCreateKernelsInProgram</a><br>
	 * @deprecated use the safer methods {@link #clCreateKernelsInProgram(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_program, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_kernel[], java.nio.IntBuffer)} and {@link #clCreateKernelsInProgram(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_program, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_kernel[], com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated 
	int clCreateKernelsInProgram(OpenCLLibrary.cl_program cl_program1, int cl_uint1, PointerByReference cl_kernelPtr1, IntByReference cl_uintPtr1);
	/**
	 * Original signature : <code>cl_int clCreateKernelsInProgram(cl_program, cl_uint, cl_kernel*, cl_uint*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateKernelsInProgram.html">Khronos Documentation for clCreateKernelsInProgram</a>
	 */
	int clCreateKernelsInProgram(OpenCLLibrary.cl_program cl_program1, int cl_uint1, OpenCLLibrary.cl_kernel cl_kernelPtr1[], IntBuffer cl_uintPtr1);
	/**
	 * Original signature : <code>cl_int clCreateKernelsInProgram(cl_program, cl_uint, cl_kernel*, cl_uint*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateKernelsInProgram.html">Khronos Documentation for clCreateKernelsInProgram</a>
	 */
	int clCreateKernelsInProgram(OpenCLLibrary.cl_program cl_program1, int cl_uint1, OpenCLLibrary.cl_kernel cl_kernelPtr1[], IntByReference cl_uintPtr1);
	/**
	 * Original signature : <code>cl_int clRetainKernel(cl_kernel)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clRetainKernel.html">Khronos Documentation for clRetainKernel</a>
	 */
	int clRetainKernel(OpenCLLibrary.cl_kernel cl_kernel1);
	/**
	 * Original signature : <code>cl_int clReleaseKernel(cl_kernel)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clReleaseKernel.html">Khronos Documentation for clReleaseKernel</a>
	 */
	int clReleaseKernel(OpenCLLibrary.cl_kernel cl_kernel1);
	/**
	 * Original signature : <code>cl_int clSetKernelArg(cl_kernel, cl_uint, size_t, const void*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clSetKernelArg.html">Khronos Documentation for clSetKernelArg</a>
	 */
	int clSetKernelArg(OpenCLLibrary.cl_kernel cl_kernel1, int cl_uint1, NativeSize size_t1, Pointer voidPtr1);
	/**
	 * Original signature : <code>cl_int clGetKernelInfo(cl_kernel, cl_kernel_info, size_t, void*, size_t*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clGetKernelInfo.html">Khronos Documentation for clGetKernelInfo</a>
	 */
	int clGetKernelInfo(OpenCLLibrary.cl_kernel cl_kernel1, int cl_kernel_info1, NativeSize size_t1, Pointer voidPtr1, NativeSizeByReference size_tPtr1);
	/**
	 * Original signature : <code>cl_int clGetKernelWorkGroupInfo(cl_kernel, cl_device_id, cl_kernel_work_group_info, size_t, void*, size_t*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clGetKernelWorkGroupInfo.html">Khronos Documentation for clGetKernelWorkGroupInfo</a>
	 */
	int clGetKernelWorkGroupInfo(OpenCLLibrary.cl_kernel cl_kernel1, OpenCLLibrary.cl_device_id cl_device_id1, int cl_kernel_work_group_info1, NativeSize size_t1, Pointer voidPtr1, NativeSizeByReference size_tPtr1);
	/**
	 * Event Object APIs<br>
	 * Original signature : <code>cl_int clWaitForEvents(cl_uint, const cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clWaitForEvents.html">Khronos Documentation for clWaitForEvents</a><br>
	 * @deprecated use the safer method {@link #clWaitForEvents(int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[])} instead
	 */
	@java.lang.Deprecated 
	int clWaitForEvents(int cl_uint1, PointerByReference cl_eventPtr1);
	/**
	 * Event Object APIs<br>
	 * Original signature : <code>cl_int clWaitForEvents(cl_uint, const cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clWaitForEvents.html">Khronos Documentation for clWaitForEvents</a>
	 */
	int clWaitForEvents(int cl_uint1, OpenCLLibrary.cl_event cl_eventPtr1[]);
	/**
	 * Original signature : <code>cl_int clGetEventInfo(cl_event, cl_event_info, size_t, void*, size_t*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clGetEventInfo.html">Khronos Documentation for clGetEventInfo</a>
	 */
	int clGetEventInfo(OpenCLLibrary.cl_event cl_event1, int cl_event_info1, NativeSize size_t1, Pointer voidPtr1, NativeSizeByReference size_tPtr1);
	/**
	 * Original signature : <code>cl_event clCreateUserEvent(cl_context, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateUserEvent.html">Khronos Documentation for clCreateUserEvent</a><br>
	 * @deprecated use the safer methods {@link #clCreateUserEvent(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_context, java.nio.IntBuffer)} and {@link #clCreateUserEvent(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_context, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated 
	OpenCLLibrary.cl_event clCreateUserEvent(OpenCLLibrary.cl_context cl_context1, IntByReference cl_intPtr1);
	/**
	 * Original signature : <code>cl_event clCreateUserEvent(cl_context, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateUserEvent.html">Khronos Documentation for clCreateUserEvent</a>
	 */
	OpenCLLibrary.cl_event clCreateUserEvent(OpenCLLibrary.cl_context cl_context1, IntBuffer cl_intPtr1);
	/**
	 * Original signature : <code>cl_int clRetainEvent(cl_event)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clRetainEvent.html">Khronos Documentation for clRetainEvent</a>
	 */
	int clRetainEvent(OpenCLLibrary.cl_event cl_event1);
	/**
	 * Original signature : <code>cl_int clReleaseEvent(cl_event)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clReleaseEvent.html">Khronos Documentation for clReleaseEvent</a>
	 */
	int clReleaseEvent(OpenCLLibrary.cl_event cl_event1);
	/**
	 * Original signature : <code>cl_int clSetUserEventStatus(cl_event, cl_int)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clSetUserEventStatus.html">Khronos Documentation for clSetUserEventStatus</a>
	 */
	int clSetUserEventStatus(OpenCLLibrary.cl_event cl_event1, int cl_int1);
	/**
	 * Original signature : <code>cl_int clSetEventCallback(cl_event, cl_int, clSetEventCallback_arg1_callback, void*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clSetEventCallback.html">Khronos Documentation for clSetEventCallback</a>
	 */
	int clSetEventCallback(OpenCLLibrary.cl_event cl_event1, int cl_int1, OpenCLLibrary.clSetEventCallback_arg1_callback arg1, Pointer voidPtr1);
	/**
	 * Profiling APIs<br>
	 * Original signature : <code>cl_int clGetEventProfilingInfo(cl_event, cl_profiling_info, size_t, void*, size_t*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clGetEventProfilingInfo.html">Khronos Documentation for clGetEventProfilingInfo</a>
	 */
	int clGetEventProfilingInfo(OpenCLLibrary.cl_event cl_event1, int cl_profiling_info1, NativeSize size_t1, Pointer voidPtr1, NativeSizeByReference size_tPtr1);
	/**
	 * Flush and Finish APIs<br>
	 * Original signature : <code>cl_int clFlush(cl_command_queue)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clFlush.html">Khronos Documentation for clFlush</a>
	 */
	int clFlush(OpenCLLibrary.cl_command_queue cl_command_queue1);
	/**
	 * Original signature : <code>cl_int clFinish(cl_command_queue)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clFinish.html">Khronos Documentation for clFinish</a>
	 */
	int clFinish(OpenCLLibrary.cl_command_queue cl_command_queue1);
	/**
	 * Enqueued Commands APIs<br>
	 * Original signature : <code>cl_int clEnqueueReadBuffer(cl_command_queue, cl_mem, cl_bool, size_t, size_t, void*, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueReadBuffer.html">Khronos Documentation for clEnqueueReadBuffer</a><br>
	 * @deprecated use the safer method {@link #clEnqueueReadBuffer(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, int, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[])} instead
	 */
	@java.lang.Deprecated 
	int clEnqueueReadBuffer(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, int cl_bool1, NativeSize size_t1, NativeSize size_t2, Pointer voidPtr1, int cl_uint1, PointerByReference cl_eventPtr1, PointerByReference cl_eventPtr2);
	/**
	 * Enqueued Commands APIs<br>
	 * Original signature : <code>cl_int clEnqueueReadBuffer(cl_command_queue, cl_mem, cl_bool, size_t, size_t, void*, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueReadBuffer.html">Khronos Documentation for clEnqueueReadBuffer</a>
	 */
	int clEnqueueReadBuffer(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, int cl_bool1, NativeSize size_t1, NativeSize size_t2, Pointer voidPtr1, int cl_uint1, OpenCLLibrary.cl_event cl_eventPtr1[], OpenCLLibrary.cl_event cl_eventPtr2[]);
	/**
	 * Original signature : <code>cl_int clEnqueueReadBufferRect(cl_command_queue, cl_mem, cl_bool, const size_t*, const size_t*, const size_t*, size_t, size_t, size_t, size_t, void*, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueReadBufferRect.html">Khronos Documentation for clEnqueueReadBufferRect</a><br>
	 * @deprecated use the safer methods {@link #clEnqueueReadBufferRect(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, int, com.ochafik.lang.jnaerator.runtime.NativeSize[], com.ochafik.lang.jnaerator.runtime.NativeSize[], com.ochafik.lang.jnaerator.runtime.NativeSize[], com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[])} and {@link #clEnqueueReadBufferRect(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, int, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[])} instead
	 */
	@java.lang.Deprecated 
	int clEnqueueReadBufferRect(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, int cl_bool1, NativeSizeByReference size_tPtr1, NativeSizeByReference size_tPtr2, NativeSizeByReference size_tPtr3, NativeSize size_t1, NativeSize size_t2, NativeSize size_t3, NativeSize size_t4, Pointer voidPtr1, int cl_uint1, PointerByReference cl_eventPtr1, PointerByReference cl_eventPtr2);
	/**
	 * Original signature : <code>cl_int clEnqueueReadBufferRect(cl_command_queue, cl_mem, cl_bool, const size_t*, const size_t*, const size_t*, size_t, size_t, size_t, size_t, void*, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueReadBufferRect.html">Khronos Documentation for clEnqueueReadBufferRect</a>
	 */
	int clEnqueueReadBufferRect(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, int cl_bool1, NativeSize size_tPtr1[], NativeSize size_tPtr2[], NativeSize size_tPtr3[], NativeSize size_t1, NativeSize size_t2, NativeSize size_t3, NativeSize size_t4, Pointer voidPtr1, int cl_uint1, OpenCLLibrary.cl_event cl_eventPtr1[], OpenCLLibrary.cl_event cl_eventPtr2[]);
	/**
	 * Original signature : <code>cl_int clEnqueueReadBufferRect(cl_command_queue, cl_mem, cl_bool, const size_t*, const size_t*, const size_t*, size_t, size_t, size_t, size_t, void*, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueReadBufferRect.html">Khronos Documentation for clEnqueueReadBufferRect</a>
	 */
	int clEnqueueReadBufferRect(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, int cl_bool1, NativeSizeByReference size_tPtr1, NativeSizeByReference size_tPtr2, NativeSizeByReference size_tPtr3, NativeSize size_t1, NativeSize size_t2, NativeSize size_t3, NativeSize size_t4, Pointer voidPtr1, int cl_uint1, OpenCLLibrary.cl_event cl_eventPtr1[], OpenCLLibrary.cl_event cl_eventPtr2[]);
	/**
	 * Original signature : <code>cl_int clEnqueueWriteBuffer(cl_command_queue, cl_mem, cl_bool, size_t, size_t, const void*, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueWriteBuffer.html">Khronos Documentation for clEnqueueWriteBuffer</a><br>
	 * @deprecated use the safer method {@link #clEnqueueWriteBuffer(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, int, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[])} instead
	 */
	@java.lang.Deprecated 
	int clEnqueueWriteBuffer(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, int cl_bool1, NativeSize size_t1, NativeSize size_t2, Pointer voidPtr1, int cl_uint1, PointerByReference cl_eventPtr1, PointerByReference cl_eventPtr2);
	/**
	 * Original signature : <code>cl_int clEnqueueWriteBuffer(cl_command_queue, cl_mem, cl_bool, size_t, size_t, const void*, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueWriteBuffer.html">Khronos Documentation for clEnqueueWriteBuffer</a>
	 */
	int clEnqueueWriteBuffer(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, int cl_bool1, NativeSize size_t1, NativeSize size_t2, Pointer voidPtr1, int cl_uint1, OpenCLLibrary.cl_event cl_eventPtr1[], OpenCLLibrary.cl_event cl_eventPtr2[]);
	/**
	 * Original signature : <code>cl_int clEnqueueWriteBufferRect(cl_command_queue, cl_mem, cl_bool, const size_t*, const size_t*, const size_t*, size_t, size_t, size_t, size_t, const void*, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueWriteBufferRect.html">Khronos Documentation for clEnqueueWriteBufferRect</a><br>
	 * @deprecated use the safer methods {@link #clEnqueueWriteBufferRect(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, int, com.ochafik.lang.jnaerator.runtime.NativeSize[], com.ochafik.lang.jnaerator.runtime.NativeSize[], com.ochafik.lang.jnaerator.runtime.NativeSize[], com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[])} and {@link #clEnqueueWriteBufferRect(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, int, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[])} instead
	 */
	@java.lang.Deprecated 
	int clEnqueueWriteBufferRect(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, int cl_bool1, NativeSizeByReference size_tPtr1, NativeSizeByReference size_tPtr2, NativeSizeByReference size_tPtr3, NativeSize size_t1, NativeSize size_t2, NativeSize size_t3, NativeSize size_t4, Pointer voidPtr1, int cl_uint1, PointerByReference cl_eventPtr1, PointerByReference cl_eventPtr2);
	/**
	 * Original signature : <code>cl_int clEnqueueWriteBufferRect(cl_command_queue, cl_mem, cl_bool, const size_t*, const size_t*, const size_t*, size_t, size_t, size_t, size_t, const void*, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueWriteBufferRect.html">Khronos Documentation for clEnqueueWriteBufferRect</a>
	 */
	int clEnqueueWriteBufferRect(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, int cl_bool1, NativeSize size_tPtr1[], NativeSize size_tPtr2[], NativeSize size_tPtr3[], NativeSize size_t1, NativeSize size_t2, NativeSize size_t3, NativeSize size_t4, Pointer voidPtr1, int cl_uint1, OpenCLLibrary.cl_event cl_eventPtr1[], OpenCLLibrary.cl_event cl_eventPtr2[]);
	/**
	 * Original signature : <code>cl_int clEnqueueWriteBufferRect(cl_command_queue, cl_mem, cl_bool, const size_t*, const size_t*, const size_t*, size_t, size_t, size_t, size_t, const void*, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueWriteBufferRect.html">Khronos Documentation for clEnqueueWriteBufferRect</a>
	 */
	int clEnqueueWriteBufferRect(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, int cl_bool1, NativeSizeByReference size_tPtr1, NativeSizeByReference size_tPtr2, NativeSizeByReference size_tPtr3, NativeSize size_t1, NativeSize size_t2, NativeSize size_t3, NativeSize size_t4, Pointer voidPtr1, int cl_uint1, OpenCLLibrary.cl_event cl_eventPtr1[], OpenCLLibrary.cl_event cl_eventPtr2[]);
	/**
	 * Original signature : <code>cl_int clEnqueueCopyBuffer(cl_command_queue, cl_mem, cl_mem, size_t, size_t, size_t, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueCopyBuffer.html">Khronos Documentation for clEnqueueCopyBuffer</a><br>
	 * @deprecated use the safer method {@link #clEnqueueCopyBuffer(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[])} instead
	 */
	@java.lang.Deprecated 
	int clEnqueueCopyBuffer(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, OpenCLLibrary.cl_mem cl_mem2, NativeSize size_t1, NativeSize size_t2, NativeSize size_t3, int cl_uint1, PointerByReference cl_eventPtr1, PointerByReference cl_eventPtr2);
	/**
	 * Original signature : <code>cl_int clEnqueueCopyBuffer(cl_command_queue, cl_mem, cl_mem, size_t, size_t, size_t, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueCopyBuffer.html">Khronos Documentation for clEnqueueCopyBuffer</a>
	 */
	int clEnqueueCopyBuffer(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, OpenCLLibrary.cl_mem cl_mem2, NativeSize size_t1, NativeSize size_t2, NativeSize size_t3, int cl_uint1, OpenCLLibrary.cl_event cl_eventPtr1[], OpenCLLibrary.cl_event cl_eventPtr2[]);
	/**
	 * Original signature : <code>cl_int clEnqueueCopyBufferRect(cl_command_queue, cl_mem, cl_mem, const size_t*, const size_t*, const size_t*, size_t, size_t, size_t, size_t, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueCopyBufferRect.html">Khronos Documentation for clEnqueueCopyBufferRect</a><br>
	 * @deprecated use the safer methods {@link #clEnqueueCopyBufferRect(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, com.ochafik.lang.jnaerator.runtime.NativeSize[], com.ochafik.lang.jnaerator.runtime.NativeSize[], com.ochafik.lang.jnaerator.runtime.NativeSize[], com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[])} and {@link #clEnqueueCopyBufferRect(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[])} instead
	 */
	@java.lang.Deprecated 
	int clEnqueueCopyBufferRect(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, OpenCLLibrary.cl_mem cl_mem2, NativeSizeByReference size_tPtr1, NativeSizeByReference size_tPtr2, NativeSizeByReference size_tPtr3, NativeSize size_t1, NativeSize size_t2, NativeSize size_t3, NativeSize size_t4, int cl_uint1, PointerByReference cl_eventPtr1, PointerByReference cl_eventPtr2);
	/**
	 * Original signature : <code>cl_int clEnqueueCopyBufferRect(cl_command_queue, cl_mem, cl_mem, const size_t*, const size_t*, const size_t*, size_t, size_t, size_t, size_t, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueCopyBufferRect.html">Khronos Documentation for clEnqueueCopyBufferRect</a>
	 */
	int clEnqueueCopyBufferRect(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, OpenCLLibrary.cl_mem cl_mem2, NativeSize size_tPtr1[], NativeSize size_tPtr2[], NativeSize size_tPtr3[], NativeSize size_t1, NativeSize size_t2, NativeSize size_t3, NativeSize size_t4, int cl_uint1, OpenCLLibrary.cl_event cl_eventPtr1[], OpenCLLibrary.cl_event cl_eventPtr2[]);
	/**
	 * Original signature : <code>cl_int clEnqueueCopyBufferRect(cl_command_queue, cl_mem, cl_mem, const size_t*, const size_t*, const size_t*, size_t, size_t, size_t, size_t, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueCopyBufferRect.html">Khronos Documentation for clEnqueueCopyBufferRect</a>
	 */
	int clEnqueueCopyBufferRect(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, OpenCLLibrary.cl_mem cl_mem2, NativeSizeByReference size_tPtr1, NativeSizeByReference size_tPtr2, NativeSizeByReference size_tPtr3, NativeSize size_t1, NativeSize size_t2, NativeSize size_t3, NativeSize size_t4, int cl_uint1, OpenCLLibrary.cl_event cl_eventPtr1[], OpenCLLibrary.cl_event cl_eventPtr2[]);
	/**
	 * Original signature : <code>cl_int clEnqueueReadImage(cl_command_queue, cl_mem, cl_bool, const size_t*, const size_t*, size_t, size_t, void*, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueReadImage.html">Khronos Documentation for clEnqueueReadImage</a><br>
	 * @deprecated use the safer methods {@link #clEnqueueReadImage(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, int, com.ochafik.lang.jnaerator.runtime.NativeSize[], com.ochafik.lang.jnaerator.runtime.NativeSize[], com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[])} and {@link #clEnqueueReadImage(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, int, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[])} instead
	 */
	@java.lang.Deprecated 
	int clEnqueueReadImage(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, int cl_bool1, NativeSizeByReference size_tPtr1, NativeSizeByReference size_tPtr2, NativeSize size_t1, NativeSize size_t2, Pointer voidPtr1, int cl_uint1, PointerByReference cl_eventPtr1, PointerByReference cl_eventPtr2);
	/**
	 * Original signature : <code>cl_int clEnqueueReadImage(cl_command_queue, cl_mem, cl_bool, const size_t*, const size_t*, size_t, size_t, void*, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueReadImage.html">Khronos Documentation for clEnqueueReadImage</a>
	 */
	int clEnqueueReadImage(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, int cl_bool1, NativeSize size_tPtr1[], NativeSize size_tPtr2[], NativeSize size_t1, NativeSize size_t2, Pointer voidPtr1, int cl_uint1, OpenCLLibrary.cl_event cl_eventPtr1[], OpenCLLibrary.cl_event cl_eventPtr2[]);
	/**
	 * Original signature : <code>cl_int clEnqueueReadImage(cl_command_queue, cl_mem, cl_bool, const size_t*, const size_t*, size_t, size_t, void*, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueReadImage.html">Khronos Documentation for clEnqueueReadImage</a>
	 */
	int clEnqueueReadImage(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, int cl_bool1, NativeSizeByReference size_tPtr1, NativeSizeByReference size_tPtr2, NativeSize size_t1, NativeSize size_t2, Pointer voidPtr1, int cl_uint1, OpenCLLibrary.cl_event cl_eventPtr1[], OpenCLLibrary.cl_event cl_eventPtr2[]);
	/**
	 * Original signature : <code>cl_int clEnqueueWriteImage(cl_command_queue, cl_mem, cl_bool, const size_t*, const size_t*, size_t, size_t, const void*, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueWriteImage.html">Khronos Documentation for clEnqueueWriteImage</a><br>
	 * @deprecated use the safer methods {@link #clEnqueueWriteImage(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, int, com.ochafik.lang.jnaerator.runtime.NativeSize[], com.ochafik.lang.jnaerator.runtime.NativeSize[], com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[])} and {@link #clEnqueueWriteImage(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, int, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[])} instead
	 */
	@java.lang.Deprecated 
	int clEnqueueWriteImage(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, int cl_bool1, NativeSizeByReference size_tPtr1, NativeSizeByReference size_tPtr2, NativeSize size_t1, NativeSize size_t2, Pointer voidPtr1, int cl_uint1, PointerByReference cl_eventPtr1, PointerByReference cl_eventPtr2);
	/**
	 * Original signature : <code>cl_int clEnqueueWriteImage(cl_command_queue, cl_mem, cl_bool, const size_t*, const size_t*, size_t, size_t, const void*, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueWriteImage.html">Khronos Documentation for clEnqueueWriteImage</a>
	 */
	int clEnqueueWriteImage(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, int cl_bool1, NativeSize size_tPtr1[], NativeSize size_tPtr2[], NativeSize size_t1, NativeSize size_t2, Pointer voidPtr1, int cl_uint1, OpenCLLibrary.cl_event cl_eventPtr1[], OpenCLLibrary.cl_event cl_eventPtr2[]);
	/**
	 * Original signature : <code>cl_int clEnqueueWriteImage(cl_command_queue, cl_mem, cl_bool, const size_t*, const size_t*, size_t, size_t, const void*, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueWriteImage.html">Khronos Documentation for clEnqueueWriteImage</a>
	 */
	int clEnqueueWriteImage(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, int cl_bool1, NativeSizeByReference size_tPtr1, NativeSizeByReference size_tPtr2, NativeSize size_t1, NativeSize size_t2, Pointer voidPtr1, int cl_uint1, OpenCLLibrary.cl_event cl_eventPtr1[], OpenCLLibrary.cl_event cl_eventPtr2[]);
	/**
	 * Original signature : <code>cl_int clEnqueueCopyImage(cl_command_queue, cl_mem, cl_mem, const size_t*, const size_t*, const size_t*, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueCopyImage.html">Khronos Documentation for clEnqueueCopyImage</a><br>
	 * @deprecated use the safer methods {@link #clEnqueueCopyImage(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, com.ochafik.lang.jnaerator.runtime.NativeSize[], com.ochafik.lang.jnaerator.runtime.NativeSize[], com.ochafik.lang.jnaerator.runtime.NativeSize[], int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[])} and {@link #clEnqueueCopyImage(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[])} instead
	 */
	@java.lang.Deprecated 
	int clEnqueueCopyImage(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, OpenCLLibrary.cl_mem cl_mem2, NativeSizeByReference size_tPtr1, NativeSizeByReference size_tPtr2, NativeSizeByReference size_tPtr3, int cl_uint1, PointerByReference cl_eventPtr1, PointerByReference cl_eventPtr2);
	/**
	 * Original signature : <code>cl_int clEnqueueCopyImage(cl_command_queue, cl_mem, cl_mem, const size_t*, const size_t*, const size_t*, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueCopyImage.html">Khronos Documentation for clEnqueueCopyImage</a>
	 */
	int clEnqueueCopyImage(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, OpenCLLibrary.cl_mem cl_mem2, NativeSize size_tPtr1[], NativeSize size_tPtr2[], NativeSize size_tPtr3[], int cl_uint1, OpenCLLibrary.cl_event cl_eventPtr1[], OpenCLLibrary.cl_event cl_eventPtr2[]);
	/**
	 * Original signature : <code>cl_int clEnqueueCopyImage(cl_command_queue, cl_mem, cl_mem, const size_t*, const size_t*, const size_t*, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueCopyImage.html">Khronos Documentation for clEnqueueCopyImage</a>
	 */
	int clEnqueueCopyImage(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, OpenCLLibrary.cl_mem cl_mem2, NativeSizeByReference size_tPtr1, NativeSizeByReference size_tPtr2, NativeSizeByReference size_tPtr3, int cl_uint1, OpenCLLibrary.cl_event cl_eventPtr1[], OpenCLLibrary.cl_event cl_eventPtr2[]);
	/**
	 * Original signature : <code>cl_int clEnqueueCopyImageToBuffer(cl_command_queue, cl_mem, cl_mem, const size_t*, const size_t*, size_t, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueCopyImageToBuffer.html">Khronos Documentation for clEnqueueCopyImageToBuffer</a><br>
	 * @deprecated use the safer methods {@link #clEnqueueCopyImageToBuffer(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, com.ochafik.lang.jnaerator.runtime.NativeSize[], com.ochafik.lang.jnaerator.runtime.NativeSize[], com.ochafik.lang.jnaerator.runtime.NativeSize, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[])} and {@link #clEnqueueCopyImageToBuffer(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, com.ochafik.lang.jnaerator.runtime.NativeSize, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[])} instead
	 */
	@java.lang.Deprecated 
	int clEnqueueCopyImageToBuffer(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, OpenCLLibrary.cl_mem cl_mem2, NativeSizeByReference size_tPtr1, NativeSizeByReference size_tPtr2, NativeSize size_t1, int cl_uint1, PointerByReference cl_eventPtr1, PointerByReference cl_eventPtr2);
	/**
	 * Original signature : <code>cl_int clEnqueueCopyImageToBuffer(cl_command_queue, cl_mem, cl_mem, const size_t*, const size_t*, size_t, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueCopyImageToBuffer.html">Khronos Documentation for clEnqueueCopyImageToBuffer</a>
	 */
	int clEnqueueCopyImageToBuffer(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, OpenCLLibrary.cl_mem cl_mem2, NativeSize size_tPtr1[], NativeSize size_tPtr2[], NativeSize size_t1, int cl_uint1, OpenCLLibrary.cl_event cl_eventPtr1[], OpenCLLibrary.cl_event cl_eventPtr2[]);
	/**
	 * Original signature : <code>cl_int clEnqueueCopyImageToBuffer(cl_command_queue, cl_mem, cl_mem, const size_t*, const size_t*, size_t, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueCopyImageToBuffer.html">Khronos Documentation for clEnqueueCopyImageToBuffer</a>
	 */
	int clEnqueueCopyImageToBuffer(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, OpenCLLibrary.cl_mem cl_mem2, NativeSizeByReference size_tPtr1, NativeSizeByReference size_tPtr2, NativeSize size_t1, int cl_uint1, OpenCLLibrary.cl_event cl_eventPtr1[], OpenCLLibrary.cl_event cl_eventPtr2[]);
	/**
	 * Original signature : <code>cl_int clEnqueueCopyBufferToImage(cl_command_queue, cl_mem, cl_mem, size_t, const size_t*, const size_t*, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueCopyBufferToImage.html">Khronos Documentation for clEnqueueCopyBufferToImage</a><br>
	 * @deprecated use the safer methods {@link #clEnqueueCopyBufferToImage(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize[], com.ochafik.lang.jnaerator.runtime.NativeSize[], int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[])} and {@link #clEnqueueCopyBufferToImage(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[])} instead
	 */
	@java.lang.Deprecated 
	int clEnqueueCopyBufferToImage(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, OpenCLLibrary.cl_mem cl_mem2, NativeSize size_t1, NativeSizeByReference size_tPtr1, NativeSizeByReference size_tPtr2, int cl_uint1, PointerByReference cl_eventPtr1, PointerByReference cl_eventPtr2);
	/**
	 * Original signature : <code>cl_int clEnqueueCopyBufferToImage(cl_command_queue, cl_mem, cl_mem, size_t, const size_t*, const size_t*, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueCopyBufferToImage.html">Khronos Documentation for clEnqueueCopyBufferToImage</a>
	 */
	int clEnqueueCopyBufferToImage(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, OpenCLLibrary.cl_mem cl_mem2, NativeSize size_t1, NativeSize size_tPtr1[], NativeSize size_tPtr2[], int cl_uint1, OpenCLLibrary.cl_event cl_eventPtr1[], OpenCLLibrary.cl_event cl_eventPtr2[]);
	/**
	 * Original signature : <code>cl_int clEnqueueCopyBufferToImage(cl_command_queue, cl_mem, cl_mem, size_t, const size_t*, const size_t*, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueCopyBufferToImage.html">Khronos Documentation for clEnqueueCopyBufferToImage</a>
	 */
	int clEnqueueCopyBufferToImage(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, OpenCLLibrary.cl_mem cl_mem2, NativeSize size_t1, NativeSizeByReference size_tPtr1, NativeSizeByReference size_tPtr2, int cl_uint1, OpenCLLibrary.cl_event cl_eventPtr1[], OpenCLLibrary.cl_event cl_eventPtr2[]);
	/**
	 * Original signature : <code>void* clEnqueueMapBuffer(cl_command_queue, cl_mem, cl_bool, cl_map_flags, size_t, size_t, cl_uint, const cl_event*, cl_event*, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueMapBuffer.html">Khronos Documentation for clEnqueueMapBuffer</a><br>
	 * @deprecated use the safer methods {@link #clEnqueueMapBuffer(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, int, long, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], java.nio.IntBuffer)} and {@link #clEnqueueMapBuffer(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, int, long, com.ochafik.lang.jnaerator.runtime.NativeSize, com.ochafik.lang.jnaerator.runtime.NativeSize, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated 
	Pointer clEnqueueMapBuffer(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, int cl_bool1, long cl_map_flags1, NativeSize size_t1, NativeSize size_t2, int cl_uint1, PointerByReference cl_eventPtr1, PointerByReference cl_eventPtr2, IntByReference cl_intPtr1);
	/**
	 * Original signature : <code>void* clEnqueueMapBuffer(cl_command_queue, cl_mem, cl_bool, cl_map_flags, size_t, size_t, cl_uint, const cl_event*, cl_event*, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueMapBuffer.html">Khronos Documentation for clEnqueueMapBuffer</a>
	 */
	Pointer clEnqueueMapBuffer(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, int cl_bool1, long cl_map_flags1, NativeSize size_t1, NativeSize size_t2, int cl_uint1, OpenCLLibrary.cl_event cl_eventPtr1[], OpenCLLibrary.cl_event cl_eventPtr2[], IntBuffer cl_intPtr1);
	/**
	 * Original signature : <code>void* clEnqueueMapBuffer(cl_command_queue, cl_mem, cl_bool, cl_map_flags, size_t, size_t, cl_uint, const cl_event*, cl_event*, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueMapBuffer.html">Khronos Documentation for clEnqueueMapBuffer</a>
	 */
	Pointer clEnqueueMapBuffer(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, int cl_bool1, long cl_map_flags1, NativeSize size_t1, NativeSize size_t2, int cl_uint1, OpenCLLibrary.cl_event cl_eventPtr1[], OpenCLLibrary.cl_event cl_eventPtr2[], IntByReference cl_intPtr1);
	/**
	 * Original signature : <code>void* clEnqueueMapImage(cl_command_queue, cl_mem, cl_bool, cl_map_flags, const size_t*, const size_t*, size_t*, size_t*, cl_uint, const cl_event*, cl_event*, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueMapImage.html">Khronos Documentation for clEnqueueMapImage</a><br>
	 * @deprecated use the safer methods {@link #clEnqueueMapImage(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, int, long, com.ochafik.lang.jnaerator.runtime.NativeSize[], com.ochafik.lang.jnaerator.runtime.NativeSize[], com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], java.nio.IntBuffer)} and {@link #clEnqueueMapImage(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, int, long, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated 
	Pointer clEnqueueMapImage(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, int cl_bool1, long cl_map_flags1, NativeSizeByReference size_tPtr1, NativeSizeByReference size_tPtr2, NativeSizeByReference size_tPtr3, NativeSizeByReference size_tPtr4, int cl_uint1, PointerByReference cl_eventPtr1, PointerByReference cl_eventPtr2, IntByReference cl_intPtr1);
	/**
	 * Original signature : <code>void* clEnqueueMapImage(cl_command_queue, cl_mem, cl_bool, cl_map_flags, const size_t*, const size_t*, size_t*, size_t*, cl_uint, const cl_event*, cl_event*, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueMapImage.html">Khronos Documentation for clEnqueueMapImage</a>
	 */
	Pointer clEnqueueMapImage(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, int cl_bool1, long cl_map_flags1, NativeSize size_tPtr1[], NativeSize size_tPtr2[], NativeSizeByReference size_tPtr3, NativeSizeByReference size_tPtr4, int cl_uint1, OpenCLLibrary.cl_event cl_eventPtr1[], OpenCLLibrary.cl_event cl_eventPtr2[], IntBuffer cl_intPtr1);
	/**
	 * Original signature : <code>void* clEnqueueMapImage(cl_command_queue, cl_mem, cl_bool, cl_map_flags, const size_t*, const size_t*, size_t*, size_t*, cl_uint, const cl_event*, cl_event*, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueMapImage.html">Khronos Documentation for clEnqueueMapImage</a>
	 */
	Pointer clEnqueueMapImage(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, int cl_bool1, long cl_map_flags1, NativeSizeByReference size_tPtr1, NativeSizeByReference size_tPtr2, NativeSizeByReference size_tPtr3, NativeSizeByReference size_tPtr4, int cl_uint1, OpenCLLibrary.cl_event cl_eventPtr1[], OpenCLLibrary.cl_event cl_eventPtr2[], IntByReference cl_intPtr1);
	/**
	 * Original signature : <code>cl_int clEnqueueUnmapMemObject(cl_command_queue, cl_mem, void*, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueUnmapMemObject.html">Khronos Documentation for clEnqueueUnmapMemObject</a><br>
	 * @deprecated use the safer method {@link #clEnqueueUnmapMemObject(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, com.sun.jna.Pointer, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[])} instead
	 */
	@java.lang.Deprecated 
	int clEnqueueUnmapMemObject(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, Pointer voidPtr1, int cl_uint1, PointerByReference cl_eventPtr1, PointerByReference cl_eventPtr2);
	/**
	 * Original signature : <code>cl_int clEnqueueUnmapMemObject(cl_command_queue, cl_mem, void*, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueUnmapMemObject.html">Khronos Documentation for clEnqueueUnmapMemObject</a>
	 */
	int clEnqueueUnmapMemObject(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_mem cl_mem1, Pointer voidPtr1, int cl_uint1, OpenCLLibrary.cl_event cl_eventPtr1[], OpenCLLibrary.cl_event cl_eventPtr2[]);
	/**
	 * Original signature : <code>cl_int clEnqueueNDRangeKernel(cl_command_queue, cl_kernel, cl_uint, const size_t*, const size_t*, const size_t*, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueNDRangeKernel.html">Khronos Documentation for clEnqueueNDRangeKernel</a><br>
	 * @deprecated use the safer methods {@link #clEnqueueNDRangeKernel(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_kernel, int, com.ochafik.lang.jnaerator.runtime.NativeSize[], com.ochafik.lang.jnaerator.runtime.NativeSize[], com.ochafik.lang.jnaerator.runtime.NativeSize[], int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[])} and {@link #clEnqueueNDRangeKernel(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_kernel, int, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, com.ochafik.lang.jnaerator.runtime.NativeSizeByReference, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[])} instead
	 */
	@java.lang.Deprecated 
	int clEnqueueNDRangeKernel(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_kernel cl_kernel1, int cl_uint1, NativeSizeByReference size_tPtr1, NativeSizeByReference size_tPtr2, NativeSizeByReference size_tPtr3, int cl_uint2, PointerByReference cl_eventPtr1, PointerByReference cl_eventPtr2);
	/**
	 * Original signature : <code>cl_int clEnqueueNDRangeKernel(cl_command_queue, cl_kernel, cl_uint, const size_t*, const size_t*, const size_t*, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueNDRangeKernel.html">Khronos Documentation for clEnqueueNDRangeKernel</a>
	 */
	int clEnqueueNDRangeKernel(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_kernel cl_kernel1, int cl_uint1, NativeSize size_tPtr1[], NativeSize size_tPtr2[], NativeSize size_tPtr3[], int cl_uint2, OpenCLLibrary.cl_event cl_eventPtr1[], OpenCLLibrary.cl_event cl_eventPtr2[]);
	/**
	 * Original signature : <code>cl_int clEnqueueNDRangeKernel(cl_command_queue, cl_kernel, cl_uint, const size_t*, const size_t*, const size_t*, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueNDRangeKernel.html">Khronos Documentation for clEnqueueNDRangeKernel</a>
	 */
	int clEnqueueNDRangeKernel(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_kernel cl_kernel1, int cl_uint1, NativeSizeByReference size_tPtr1, NativeSizeByReference size_tPtr2, NativeSizeByReference size_tPtr3, int cl_uint2, OpenCLLibrary.cl_event cl_eventPtr1[], OpenCLLibrary.cl_event cl_eventPtr2[]);
	/**
	 * Original signature : <code>cl_int clEnqueueTask(cl_command_queue, cl_kernel, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueTask.html">Khronos Documentation for clEnqueueTask</a><br>
	 * @deprecated use the safer method {@link #clEnqueueTask(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_kernel, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[])} instead
	 */
	@java.lang.Deprecated 
	int clEnqueueTask(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_kernel cl_kernel1, int cl_uint1, PointerByReference cl_eventPtr1, PointerByReference cl_eventPtr2);
	/**
	 * Original signature : <code>cl_int clEnqueueTask(cl_command_queue, cl_kernel, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueTask.html">Khronos Documentation for clEnqueueTask</a>
	 */
	int clEnqueueTask(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_kernel cl_kernel1, int cl_uint1, OpenCLLibrary.cl_event cl_eventPtr1[], OpenCLLibrary.cl_event cl_eventPtr2[]);
	/**
	 * Original signature : <code>cl_int clEnqueueNativeKernel(cl_command_queue, user_func, void*, size_t, cl_uint, const cl_mem*, const void**, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueNativeKernel.html">Khronos Documentation for clEnqueueNativeKernel</a><br>
	 * @deprecated use the safer method {@link #clEnqueueNativeKernel(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, com.nativelibs4java.opencl.library.OpenCLLibrary.user_func, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem[], com.sun.jna.ptr.PointerByReference, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[])} instead
	 */
	@java.lang.Deprecated 
	int clEnqueueNativeKernel(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.user_func arg1, Pointer voidPtr1, NativeSize size_t1, int cl_uint1, PointerByReference cl_memPtr1, PointerByReference voidPtrPtr1, int cl_uint2, PointerByReference cl_eventPtr1, PointerByReference cl_eventPtr2);
	/**
	 * Original signature : <code>cl_int clEnqueueNativeKernel(cl_command_queue, user_func, void*, size_t, cl_uint, const cl_mem*, const void**, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueNativeKernel.html">Khronos Documentation for clEnqueueNativeKernel</a>
	 */
	int clEnqueueNativeKernel(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.user_func arg1, Pointer voidPtr1, NativeSize size_t1, int cl_uint1, OpenCLLibrary.cl_mem cl_memPtr1[], PointerByReference voidPtrPtr1, int cl_uint2, OpenCLLibrary.cl_event cl_eventPtr1[], OpenCLLibrary.cl_event cl_eventPtr2[]);
	/**
	 * Original signature : <code>cl_int clEnqueueMarker(cl_command_queue, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueMarker.html">Khronos Documentation for clEnqueueMarker</a><br>
	 * @deprecated use the safer method {@link #clEnqueueMarker(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[])} instead
	 */
	@java.lang.Deprecated 
	int clEnqueueMarker(OpenCLLibrary.cl_command_queue cl_command_queue1, PointerByReference cl_eventPtr1);
	/**
	 * Original signature : <code>cl_int clEnqueueMarker(cl_command_queue, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueMarker.html">Khronos Documentation for clEnqueueMarker</a>
	 */
	int clEnqueueMarker(OpenCLLibrary.cl_command_queue cl_command_queue1, OpenCLLibrary.cl_event cl_eventPtr1[]);
	/**
	 * Original signature : <code>cl_int clEnqueueWaitForEvents(cl_command_queue, cl_uint, const cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueWaitForEvents.html">Khronos Documentation for clEnqueueWaitForEvents</a><br>
	 * @deprecated use the safer method {@link #clEnqueueWaitForEvents(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[])} instead
	 */
	@java.lang.Deprecated 
	int clEnqueueWaitForEvents(OpenCLLibrary.cl_command_queue cl_command_queue1, int cl_uint1, PointerByReference cl_eventPtr1);
	/**
	 * Original signature : <code>cl_int clEnqueueWaitForEvents(cl_command_queue, cl_uint, const cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueWaitForEvents.html">Khronos Documentation for clEnqueueWaitForEvents</a>
	 */
	int clEnqueueWaitForEvents(OpenCLLibrary.cl_command_queue cl_command_queue1, int cl_uint1, OpenCLLibrary.cl_event cl_eventPtr1[]);
	/**
	 * Original signature : <code>cl_int clEnqueueBarrier(cl_command_queue)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueBarrier.html">Khronos Documentation for clEnqueueBarrier</a>
	 */
	int clEnqueueBarrier(OpenCLLibrary.cl_command_queue cl_command_queue1);
	/**
	 * Extension function access<br>
	 * * Returns the extension function address for the given function name,<br>
	 * or NULL if a valid function can not be found.  The client must<br>
	 * check to make sure the address is not NULL, before using or <br>
	 * calling the returned function address.<br>
	 * func_name<br>
	 * Original signature : <code>void* clGetExtensionFunctionAddress(const char*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clGetExtensionFunctionAddress.html">Khronos Documentation for clGetExtensionFunctionAddress</a><br>
	 * @deprecated use the safer methods {@link #clGetExtensionFunctionAddress(java.lang.String)} and {@link #clGetExtensionFunctionAddress(com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated 
	Pointer clGetExtensionFunctionAddress(Pointer charPtr1);
	/**
	 * Extension function access<br>
	 * * Returns the extension function address for the given function name,<br>
	 * or NULL if a valid function can not be found.  The client must<br>
	 * check to make sure the address is not NULL, before using or <br>
	 * calling the returned function address.<br>
	 * func_name<br>
	 * Original signature : <code>void* clGetExtensionFunctionAddress(const char*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clGetExtensionFunctionAddress.html">Khronos Documentation for clGetExtensionFunctionAddress</a>
	 */
	Pointer clGetExtensionFunctionAddress(java.lang.String charPtr1);
	/**
	 * Original signature : <code>cl_mem clCreateFromGLBuffer(cl_context, cl_mem_flags, cl_GLuint, int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateFromGLBuffer.html">Khronos Documentation for clCreateFromGLBuffer</a><br>
	 * @deprecated use the safer methods {@link #clCreateFromGLBuffer(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_context, long, int, java.nio.IntBuffer)} and {@link #clCreateFromGLBuffer(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_context, long, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated 
	OpenCLLibrary.cl_mem clCreateFromGLBuffer(OpenCLLibrary.cl_context cl_context1, long cl_mem_flags1, int cl_GLuint1, IntByReference intPtr1);
	/**
	 * Original signature : <code>cl_mem clCreateFromGLBuffer(cl_context, cl_mem_flags, cl_GLuint, int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateFromGLBuffer.html">Khronos Documentation for clCreateFromGLBuffer</a>
	 */
	OpenCLLibrary.cl_mem clCreateFromGLBuffer(OpenCLLibrary.cl_context cl_context1, long cl_mem_flags1, int cl_GLuint1, IntBuffer intPtr1);
	/**
	 * Original signature : <code>cl_mem clCreateFromGLTexture2D(cl_context, cl_mem_flags, cl_GLenum, cl_GLint, cl_GLuint, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateFromGLTexture2D.html">Khronos Documentation for clCreateFromGLTexture2D</a><br>
	 * @deprecated use the safer methods {@link #clCreateFromGLTexture2D(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_context, long, int, int, int, java.nio.IntBuffer)} and {@link #clCreateFromGLTexture2D(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_context, long, int, int, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated 
	OpenCLLibrary.cl_mem clCreateFromGLTexture2D(OpenCLLibrary.cl_context cl_context1, long cl_mem_flags1, int cl_GLenum1, int cl_GLint1, int cl_GLuint1, IntByReference cl_intPtr1);
	/**
	 * Original signature : <code>cl_mem clCreateFromGLTexture2D(cl_context, cl_mem_flags, cl_GLenum, cl_GLint, cl_GLuint, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateFromGLTexture2D.html">Khronos Documentation for clCreateFromGLTexture2D</a>
	 */
	OpenCLLibrary.cl_mem clCreateFromGLTexture2D(OpenCLLibrary.cl_context cl_context1, long cl_mem_flags1, int cl_GLenum1, int cl_GLint1, int cl_GLuint1, IntBuffer cl_intPtr1);
	/**
	 * Original signature : <code>cl_mem clCreateFromGLTexture3D(cl_context, cl_mem_flags, cl_GLenum, cl_GLint, cl_GLuint, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateFromGLTexture3D.html">Khronos Documentation for clCreateFromGLTexture3D</a><br>
	 * @deprecated use the safer methods {@link #clCreateFromGLTexture3D(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_context, long, int, int, int, java.nio.IntBuffer)} and {@link #clCreateFromGLTexture3D(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_context, long, int, int, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated 
	OpenCLLibrary.cl_mem clCreateFromGLTexture3D(OpenCLLibrary.cl_context cl_context1, long cl_mem_flags1, int cl_GLenum1, int cl_GLint1, int cl_GLuint1, IntByReference cl_intPtr1);
	/**
	 * Original signature : <code>cl_mem clCreateFromGLTexture3D(cl_context, cl_mem_flags, cl_GLenum, cl_GLint, cl_GLuint, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateFromGLTexture3D.html">Khronos Documentation for clCreateFromGLTexture3D</a>
	 */
	OpenCLLibrary.cl_mem clCreateFromGLTexture3D(OpenCLLibrary.cl_context cl_context1, long cl_mem_flags1, int cl_GLenum1, int cl_GLint1, int cl_GLuint1, IntBuffer cl_intPtr1);
	/**
	 * Original signature : <code>cl_mem clCreateFromGLRenderbuffer(cl_context, cl_mem_flags, cl_GLuint, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateFromGLRenderbuffer.html">Khronos Documentation for clCreateFromGLRenderbuffer</a><br>
	 * @deprecated use the safer methods {@link #clCreateFromGLRenderbuffer(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_context, long, int, java.nio.IntBuffer)} and {@link #clCreateFromGLRenderbuffer(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_context, long, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated 
	OpenCLLibrary.cl_mem clCreateFromGLRenderbuffer(OpenCLLibrary.cl_context cl_context1, long cl_mem_flags1, int cl_GLuint1, IntByReference cl_intPtr1);
	/**
	 * Original signature : <code>cl_mem clCreateFromGLRenderbuffer(cl_context, cl_mem_flags, cl_GLuint, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateFromGLRenderbuffer.html">Khronos Documentation for clCreateFromGLRenderbuffer</a>
	 */
	OpenCLLibrary.cl_mem clCreateFromGLRenderbuffer(OpenCLLibrary.cl_context cl_context1, long cl_mem_flags1, int cl_GLuint1, IntBuffer cl_intPtr1);
	/**
	 * Original signature : <code>cl_int clGetGLObjectInfo(cl_mem, cl_gl_object_type*, cl_GLuint*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clGetGLObjectInfo.html">Khronos Documentation for clGetGLObjectInfo</a><br>
	 * @deprecated use the safer methods {@link #clGetGLObjectInfo(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #clGetGLObjectInfo(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated 
	int clGetGLObjectInfo(OpenCLLibrary.cl_mem cl_mem1, IntByReference cl_gl_object_typePtr1, IntByReference cl_GLuintPtr1);
	/**
	 * Original signature : <code>cl_int clGetGLObjectInfo(cl_mem, cl_gl_object_type*, cl_GLuint*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clGetGLObjectInfo.html">Khronos Documentation for clGetGLObjectInfo</a>
	 */
	int clGetGLObjectInfo(OpenCLLibrary.cl_mem cl_mem1, IntBuffer cl_gl_object_typePtr1, IntBuffer cl_GLuintPtr1);
	/**
	 * Original signature : <code>cl_int clGetGLTextureInfo(cl_mem, cl_gl_texture_info, size_t, void*, size_t*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clGetGLTextureInfo.html">Khronos Documentation for clGetGLTextureInfo</a>
	 */
	int clGetGLTextureInfo(OpenCLLibrary.cl_mem cl_mem1, int cl_gl_texture_info1, NativeSize size_t1, Pointer voidPtr1, NativeSizeByReference size_tPtr1);
	/**
	 * Original signature : <code>cl_int clEnqueueAcquireGLObjects(cl_command_queue, cl_uint, const cl_mem*, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueAcquireGLObjects.html">Khronos Documentation for clEnqueueAcquireGLObjects</a><br>
	 * @deprecated use the safer method {@link #clEnqueueAcquireGLObjects(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem[], int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[])} instead
	 */
	@java.lang.Deprecated 
	int clEnqueueAcquireGLObjects(OpenCLLibrary.cl_command_queue cl_command_queue1, int cl_uint1, PointerByReference cl_memPtr1, int cl_uint2, PointerByReference cl_eventPtr1, PointerByReference cl_eventPtr2);
	/**
	 * Original signature : <code>cl_int clEnqueueAcquireGLObjects(cl_command_queue, cl_uint, const cl_mem*, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueAcquireGLObjects.html">Khronos Documentation for clEnqueueAcquireGLObjects</a>
	 */
	int clEnqueueAcquireGLObjects(OpenCLLibrary.cl_command_queue cl_command_queue1, int cl_uint1, OpenCLLibrary.cl_mem cl_memPtr1[], int cl_uint2, OpenCLLibrary.cl_event cl_eventPtr1[], OpenCLLibrary.cl_event cl_eventPtr2[]);
	/**
	 * Original signature : <code>cl_int clEnqueueReleaseGLObjects(cl_command_queue, cl_uint, const cl_mem*, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueReleaseGLObjects.html">Khronos Documentation for clEnqueueReleaseGLObjects</a><br>
	 * @deprecated use the safer method {@link #clEnqueueReleaseGLObjects(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_command_queue, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_mem[], int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[], com.nativelibs4java.opencl.library.OpenCLLibrary.cl_event[])} instead
	 */
	@java.lang.Deprecated 
	int clEnqueueReleaseGLObjects(OpenCLLibrary.cl_command_queue cl_command_queue1, int cl_uint1, PointerByReference cl_memPtr1, int cl_uint2, PointerByReference cl_eventPtr1, PointerByReference cl_eventPtr2);
	/**
	 * Original signature : <code>cl_int clEnqueueReleaseGLObjects(cl_command_queue, cl_uint, const cl_mem*, cl_uint, const cl_event*, cl_event*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clEnqueueReleaseGLObjects.html">Khronos Documentation for clEnqueueReleaseGLObjects</a>
	 */
	int clEnqueueReleaseGLObjects(OpenCLLibrary.cl_command_queue cl_command_queue1, int cl_uint1, OpenCLLibrary.cl_mem cl_memPtr1[], int cl_uint2, OpenCLLibrary.cl_event cl_eventPtr1[], OpenCLLibrary.cl_event cl_eventPtr2[]);
	/**
	 * Original signature : <code>cl_int clGetGLContextInfoKHR(const cl_context_properties*, cl_gl_context_info, size_t, void*, size_t*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clGetGLContextInfoKHR.html">Khronos Documentation for clGetGLContextInfoKHR</a>
	 */
	int clGetGLContextInfoKHR(NativeSizeByReference cl_context_propertiesPtr1, int cl_gl_context_info1, NativeSize size_t1, Pointer voidPtr1, NativeSizeByReference size_tPtr1);
	/**
	 * Original signature : <code>cl_event clCreateEventFromGLsyncKHR(cl_context, cl_GLsync, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateEventFromGLsyncKHR.html">Khronos Documentation for clCreateEventFromGLsyncKHR</a><br>
	 * @deprecated use the safer methods {@link #clCreateEventFromGLsyncKHR(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_context, com.nativelibs4java.opencl.library.OpenCLLibrary.__GLsync, java.nio.IntBuffer)} and {@link #clCreateEventFromGLsyncKHR(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_context, com.nativelibs4java.opencl.library.OpenCLLibrary.__GLsync, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated 
	OpenCLLibrary.cl_event clCreateEventFromGLsyncKHR(OpenCLLibrary.cl_context cl_context1, OpenCLLibrary.__GLsync cl_GLsync1, IntByReference cl_intPtr1);
	/**
	 * Original signature : <code>cl_event clCreateEventFromGLsyncKHR(cl_context, cl_GLsync, cl_int*)</code><br>
	 * @see <a href="http://www.khronos.org/registry/cl/sdk/1.1/docs/man/xhtml/clCreateEventFromGLsyncKHR.html">Khronos Documentation for clCreateEventFromGLsyncKHR</a>
	 */
	OpenCLLibrary.cl_event clCreateEventFromGLsyncKHR(OpenCLLibrary.cl_context cl_context1, OpenCLLibrary.__GLsync cl_GLsync1, IntBuffer cl_intPtr1);
	public static final int CL_INVALID_GL_CONTEXT_APPLE = -1000;
	/**
	 * context<br>
	 * Original signature : <code>cl_int	clGetGLContextInfoAPPLE(cl_context context, void *platform_gl_ctx, cl_gl_platform_info param_name, size_t param_value_size, void *param_value, size_t *param_value_size_ret)</code>
	 */
	int clGetGLContextInfoAPPLE(cl_context context, NativeSize platform_gl_ctx, int param_name, NativeSize param_value_size, Pointer param_value, NativeSizeByReference param_value_size_ret);
	/**
	 * memobj<br>
	 * Original signature : <code>cl_int clSetMemObjectDestructorAPPLE(cl_mem, clSetMemObjectDestructorAPPLE_arg1_callback, void*)</code>
	 */
	int clSetMemObjectDestructorAPPLE(OpenCLLibrary.cl_mem cl_mem1, OpenCLLibrary.clSetMemObjectDestructorAPPLE_arg1_callback arg1, Pointer voidPtr1);
	/**
	 * errstr<br>
	 * Original signature : <code>void clLogMessagesToSystemLogAPPLE(const char*, const void*, size_t, void*)</code><br>
	 * @deprecated use the safer methods {@link #clLogMessagesToSystemLogAPPLE(java.lang.String, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer)} and {@link #clLogMessagesToSystemLogAPPLE(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated 
	void clLogMessagesToSystemLogAPPLE(Pointer charPtr1, Pointer voidPtr1, NativeSize size_t1, Pointer voidPtr2);
	/**
	 * errstr<br>
	 * Original signature : <code>void clLogMessagesToSystemLogAPPLE(const char*, const void*, size_t, void*)</code>
	 */
	void clLogMessagesToSystemLogAPPLE(java.lang.String charPtr1, Pointer voidPtr1, NativeSize size_t1, Pointer voidPtr2);
	/**
	 * clLogMessagesToStdout sends all log messages to the file descriptor stdout<br>
	 * errstr<br>
	 * Original signature : <code>void clLogMessagesToStdoutAPPLE(const char*, const void*, size_t, void*)</code><br>
	 * @deprecated use the safer methods {@link #clLogMessagesToStdoutAPPLE(java.lang.String, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer)} and {@link #clLogMessagesToStdoutAPPLE(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated 
	void clLogMessagesToStdoutAPPLE(Pointer charPtr1, Pointer voidPtr1, NativeSize size_t1, Pointer voidPtr2);
	/**
	 * clLogMessagesToStdout sends all log messages to the file descriptor stdout<br>
	 * errstr<br>
	 * Original signature : <code>void clLogMessagesToStdoutAPPLE(const char*, const void*, size_t, void*)</code>
	 */
	void clLogMessagesToStdoutAPPLE(java.lang.String charPtr1, Pointer voidPtr1, NativeSize size_t1, Pointer voidPtr2);
	/**
	 * clLogMessagesToStderr sends all log messages to the file descriptor stderr<br>
	 * errstr<br>
	 * Original signature : <code>void clLogMessagesToStderrAPPLE(const char*, const void*, size_t, void*)</code><br>
	 * @deprecated use the safer methods {@link #clLogMessagesToStderrAPPLE(java.lang.String, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer)} and {@link #clLogMessagesToStderrAPPLE(com.sun.jna.Pointer, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated 
	void clLogMessagesToStderrAPPLE(Pointer charPtr1, Pointer voidPtr1, NativeSize size_t1, Pointer voidPtr2);
	/**
	 * clLogMessagesToStderr sends all log messages to the file descriptor stderr<br>
	 * errstr<br>
	 * Original signature : <code>void clLogMessagesToStderrAPPLE(const char*, const void*, size_t, void*)</code>
	 */
	void clLogMessagesToStderrAPPLE(java.lang.String charPtr1, Pointer voidPtr1, NativeSize size_t1, Pointer voidPtr2);
	/**
	 * Original signature : <code>cl_int clIcdGetPlatformIDsKHR(cl_uint, cl_platform_id*, cl_uint*)</code><br>
	 * @deprecated use the safer methods {@link #clIcdGetPlatformIDsKHR(int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_platform_id[], java.nio.IntBuffer)} and {@link #clIcdGetPlatformIDsKHR(int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_platform_id[], com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated 
	int clIcdGetPlatformIDsKHR(int cl_uint1, PointerByReference cl_platform_idPtr1, IntByReference cl_uintPtr1);
	/// Original signature : <code>cl_int clIcdGetPlatformIDsKHR(cl_uint, cl_platform_id*, cl_uint*)</code>
	int clIcdGetPlatformIDsKHR(int cl_uint1, OpenCLLibrary.cl_platform_id cl_platform_idPtr1[], IntBuffer cl_uintPtr1);
	/// Original signature : <code>cl_int clIcdGetPlatformIDsKHR(cl_uint, cl_platform_id*, cl_uint*)</code>
	int clIcdGetPlatformIDsKHR(int cl_uint1, OpenCLLibrary.cl_platform_id cl_platform_idPtr1[], IntByReference cl_uintPtr1);
	/// Original signature : <code>cl_int clReleaseDeviceEXT(cl_device_id)</code>
	int clReleaseDeviceEXT(OpenCLLibrary.cl_device_id cl_device_id1);
	/// Original signature : <code>cl_int clRetainDeviceEXT(cl_device_id)</code>
	int clRetainDeviceEXT(OpenCLLibrary.cl_device_id cl_device_id1);
	/**
	 * Original signature : <code>cl_int clCreateSubDevicesEXT(cl_device_id, const cl_device_partition_property_ext*, cl_uint, cl_device_id*, cl_uint*)</code><br>
	 * @deprecated use the safer methods {@link #clCreateSubDevicesEXT(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_device_id, java.nio.LongBuffer, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_device_id[], java.nio.IntBuffer)} and {@link #clCreateSubDevicesEXT(com.nativelibs4java.opencl.library.OpenCLLibrary.cl_device_id, com.sun.jna.ptr.LongByReference, int, com.nativelibs4java.opencl.library.OpenCLLibrary.cl_device_id[], com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated 
	int clCreateSubDevicesEXT(OpenCLLibrary.cl_device_id cl_device_id1, LongByReference cl_device_partition_property_extPtr1, int cl_uint1, PointerByReference cl_device_idPtr1, IntByReference cl_uintPtr1);
	/// Original signature : <code>cl_int clCreateSubDevicesEXT(cl_device_id, const cl_device_partition_property_ext*, cl_uint, cl_device_id*, cl_uint*)</code>
	int clCreateSubDevicesEXT(OpenCLLibrary.cl_device_id cl_device_id1, LongBuffer cl_device_partition_property_extPtr1, int cl_uint1, OpenCLLibrary.cl_device_id cl_device_idPtr1[], IntBuffer cl_uintPtr1);
	/// Original signature : <code>cl_int clCreateSubDevicesEXT(cl_device_id, const cl_device_partition_property_ext*, cl_uint, cl_device_id*, cl_uint*)</code>
	int clCreateSubDevicesEXT(OpenCLLibrary.cl_device_id cl_device_id1, LongByReference cl_device_partition_property_extPtr1, int cl_uint1, OpenCLLibrary.cl_device_id cl_device_idPtr1[], IntByReference cl_uintPtr1);
	//public static final GlobalCallback<clCreateSubDevicesEXT_fn_callback > clCreateSubDevicesEXT_fn = new GlobalCallback<clCreateSubDevicesEXT_fn_callback >(com.nativelibs4java.opencl.library.OpenCLLibrary.JNA_NATIVE_LIB, clCreateSubDevicesEXT_fn_callback.class, "clCreateSubDevicesEXT_fn");
	/// Pointer to unknown (opaque) type
	public static class __GLsync extends PointerType {
		public __GLsync(Pointer address) {
			super(address);
		}
		public __GLsync() {
			super();
		}
	};
	/// Pointer to unknown (opaque) type
	public static class cl_device_id extends PointerType {
		public cl_device_id(Pointer address) {
			super(address);
		}
		public cl_device_id() {
			super();
		}
	};
	/// Pointer to unknown (opaque) type
	public static class cl_mem extends PointerType {
		public cl_mem(Pointer address) {
			super(address);
		}
		public cl_mem() {
			super();
		}
	};
	/// Pointer to unknown (opaque) type
	public static class cl_platform_id extends PointerType {
		public cl_platform_id(Pointer address) {
			super(address);
		}
		public cl_platform_id() {
			super();
		}
	};
	/// Pointer to unknown (opaque) type
	public static class cl_event extends PointerType {
		public cl_event(Pointer address) {
			super(address);
		}
		public cl_event() {
			super();
		}
	};
	/// Pointer to unknown (opaque) type
	public static class cl_command_queue extends PointerType {
		public cl_command_queue(Pointer address) {
			super(address);
		}
		public cl_command_queue() {
			super();
		}
	};
	/// Pointer to unknown (opaque) type
	public static class cl_context extends PointerType {
		public cl_context(Pointer address) {
			super(address);
		}
		public cl_context() {
			super();
		}
	};
	/// Pointer to unknown (opaque) type
	public static class cl_sampler extends PointerType {
		public cl_sampler(Pointer address) {
			super(address);
		}
		public cl_sampler() {
			super();
		}
	};
	/// Pointer to unknown (opaque) type
	public static class cl_program extends PointerType {
		public cl_program(Pointer address) {
			super(address);
		}
		public cl_program() {
			super();
		}
	};
	/// Pointer to unknown (opaque) type
	public static class cl_kernel extends PointerType {
		public cl_kernel(Pointer address) {
			super(address);
		}
		public cl_kernel() {
			super();
		}
	};
}
