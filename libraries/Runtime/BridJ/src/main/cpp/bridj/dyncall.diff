Index: dyncall/dyncallback/dyncall_callback_arch_x86.S
===================================================================
--- dyncall/dyncallback/dyncall_callback_arch_x86.S	
+++ dyncall/dyncallback/dyncall_callback_arch_x86.S	
@@ -81,13 +81,13 @@
 	MOVL(DWORD(EBP,0), EBP)			/* EBP = parent frame */
 	/* handle return value */
 	/* cmpb 	$118, %al */
-	CMP($'v',AL)
+	CMP(ASCII_v,AL)
 	JE(.return_void)
-	CMP($'d',AL)
+	CMP(ASCII_d,AL)
 	JE(.return_f64)
-	CMP($'f',AL)
+	CMP(ASCII_f,AL)
 	JE(.return_f32)
-	CMP($'l',AL)
+	CMP(ASCII_l,AL)
 	JE(.return_i64)
 	
 	/* All int cases <= 32 bits (+ pointer & string cases) fall in the 32 bits int case*/
Index: dyncall/dynload/dynload_windows.c
===================================================================
--- dyncall/dynload/dynload_windows.c	
+++ dyncall/dynload/dynload_windows.c	
@@ -33,8 +33,7 @@
 DLLib* dlLoadLibrary(const char* libPath)
 {
   if (libPath != NULL) {
-    return (DLLib*) LoadLibraryA(libPath);
-    /*return (DLLib*) LoadLibraryA(libPath, NULL, LOAD_WITH_ALTERED_SEARCH_PATH);*/
+    return (DLLib*) LoadLibraryExA(libPath, NULL, LOAD_WITH_ALTERED_SEARCH_PATH);
   } else {
     return (DLLib*) GetModuleHandle(NULL);
   }
Index: dyncall/buildsys/lua/bootstrap.sh
===================================================================
--- dyncall/buildsys/lua/bootstrap.sh	
+++ dyncall/buildsys/lua/bootstrap.sh	
@@ -1,7 +1,7 @@
 #!/bin/sh
-DL=wget make Makefile lua-5.1.4
+make -f `dirname $0`/Makefile lua-5.1.4
 case `uname -s` in
-  darwin)
+  Darwin)
     LPLAF=macosx
     ;;
   *)
@@ -10,3 +10,4 @@
 esac
 (cd lua-5.1.4; make ${LPLAF})
 
+
