package com.nativelibs4java.mono.library;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>, <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class MonoCustomMod extends com.ochafik.lang.jnaerator.runtime.Structure<MonoCustomMod, MonoCustomMod.ByValue, MonoCustomMod.ByReference> {
	@com.ochafik.lang.jnaerator.runtime.Bits(1)
	public byte required;
	@com.ochafik.lang.jnaerator.runtime.Bits(31)
	public int token;
	public MonoCustomMod() {
		super();
	}
	public MonoCustomMod(byte required, int token) {
		super();
		this.required = required;
		this.token = token;
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected MonoCustomMod newInstance() { return new MonoCustomMod(); }
	public static MonoCustomMod[] newArray(int arrayLength) {
		return com.ochafik.lang.jnaerator.runtime.Structure.newArray(MonoCustomMod.class, arrayLength);
	}
	public static class ByReference extends MonoCustomMod implements com.sun.jna.Structure.ByReference {}
	public static class ByValue extends MonoCustomMod implements com.sun.jna.Structure.ByValue {}
}
