package com.nativelibs4java.mono.library;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>, <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class MonoDebugMethodInfo extends com.ochafik.lang.jnaerator.runtime.Structure<MonoDebugMethodInfo, MonoDebugMethodInfo.ByValue, MonoDebugMethodInfo.ByReference> {
	/// C type : MonoMethod*
	public com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method;
	/// C type : MonoDebugHandle*
	public com.nativelibs4java.mono.library.MonoDebugHandle.ByReference handle;
	public int index;
	public int data_offset;
	public int lnt_offset;
	public MonoDebugMethodInfo() {
		super();
	}
	/**
	 * @param method C type : MonoMethod*<br>
	 * @param handle C type : MonoDebugHandle*
	 */
	public MonoDebugMethodInfo(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, com.nativelibs4java.mono.library.MonoDebugHandle.ByReference handle, int index, int data_offset, int lnt_offset) {
		super();
		this.method = method;
		this.handle = handle;
		this.index = index;
		this.data_offset = data_offset;
		this.lnt_offset = lnt_offset;
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected MonoDebugMethodInfo newInstance() { return new MonoDebugMethodInfo(); }
	public static MonoDebugMethodInfo[] newArray(int arrayLength) {
		return com.ochafik.lang.jnaerator.runtime.Structure.newArray(MonoDebugMethodInfo.class, arrayLength);
	}
	public static class ByReference extends MonoDebugMethodInfo implements com.sun.jna.Structure.ByReference {}
	public static class ByValue extends MonoDebugMethodInfo implements com.sun.jna.Structure.ByValue {}
}
