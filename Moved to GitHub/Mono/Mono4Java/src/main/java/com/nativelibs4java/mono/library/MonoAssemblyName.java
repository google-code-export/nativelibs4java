package com.nativelibs4java.mono.library;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>, <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class MonoAssemblyName extends com.ochafik.lang.jnaerator.runtime.Structure<MonoAssemblyName, MonoAssemblyName.ByValue, MonoAssemblyName.ByReference> {
	/// C type : const char*
	public com.sun.jna.Pointer name;
	/// C type : const char*
	public com.sun.jna.Pointer culture;
	/// C type : const char*
	public com.sun.jna.Pointer hash_value;
	/// C type : const char*
	public com.sun.jna.Pointer public_key;
	/**
	 * string of 16 hex chars + 1 NULL<br>
	 * C type : guchar[17]
	 */
	public byte[] public_key_token = new byte[(17)];
	public int hash_alg;
	public int hash_len;
	public int flags;
	public short major;
	public short minor;
	public short build;
	public short revision;
	public MonoAssemblyName() {
		super();
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected MonoAssemblyName newInstance() { return new MonoAssemblyName(); }
	public static MonoAssemblyName[] newArray(int arrayLength) {
		return com.ochafik.lang.jnaerator.runtime.Structure.newArray(MonoAssemblyName.class, arrayLength);
	}
	public static class ByReference extends MonoAssemblyName implements com.sun.jna.Structure.ByReference {}
	public static class ByValue extends MonoAssemblyName implements com.sun.jna.Structure.ByValue {}
}
