package com.nativelibs4java.mono.library;
/**
 * JNA Wrapper for library <b>mono</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>, <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface MonoLibrary extends com.sun.jna.Library {
	public static final java.lang.String JNA_LIBRARY_NAME = com.ochafik.lang.jnaerator.runtime.LibraryExtractor.getLibraryPath("mono", true, com.nativelibs4java.mono.library.MonoLibrary.class);
	public static final com.sun.jna.NativeLibrary JNA_NATIVE_LIB = com.sun.jna.NativeLibrary.getInstance(com.nativelibs4java.mono.library.MonoLibrary.JNA_LIBRARY_NAME, com.ochafik.lang.jnaerator.runtime.MangledFunctionMapper.DEFAULT_OPTIONS);
	public static final com.nativelibs4java.mono.library.MonoLibrary INSTANCE = (com.nativelibs4java.mono.library.MonoLibrary)com.sun.jna.Native.loadLibrary(com.nativelibs4java.mono.library.MonoLibrary.JNA_LIBRARY_NAME, com.nativelibs4java.mono.library.MonoLibrary.class, com.ochafik.lang.jnaerator.runtime.MangledFunctionMapper.DEFAULT_OPTIONS);
	/// enum values
	public static interface MonoExceptionEnum {
		public static final int MONO_EXCEPTION_CLAUSE_NONE = 0;
		public static final int MONO_EXCEPTION_CLAUSE_FILTER = 1;
		public static final int MONO_EXCEPTION_CLAUSE_FINALLY = 2;
		public static final int MONO_EXCEPTION_CLAUSE_FAULT = 4;
	}
	/// enum values
	public static interface MonoCallConvention {
		public static final int MONO_CALL_DEFAULT = 0;
		public static final int MONO_CALL_C = 1;
		public static final int MONO_CALL_STDCALL = 2;
		public static final int MONO_CALL_THISCALL = 3;
		public static final int MONO_CALL_FASTCALL = 4;
		public static final int MONO_CALL_VARARG = 5;
	}
	/// enum values
	public static interface MonoMarshalNative {
		/// 4 bytes, 0 is false, != 0 is true
		public static final int MONO_NATIVE_BOOLEAN = 2;
		public static final int MONO_NATIVE_I1 = 3;
		public static final int MONO_NATIVE_U1 = 4;
		public static final int MONO_NATIVE_I2 = 5;
		public static final int MONO_NATIVE_U2 = 6;
		public static final int MONO_NATIVE_I4 = 7;
		public static final int MONO_NATIVE_U4 = 8;
		public static final int MONO_NATIVE_I8 = 9;
		public static final int MONO_NATIVE_U8 = 10;
		public static final int MONO_NATIVE_R4 = 11;
		public static final int MONO_NATIVE_R8 = 12;
		public static final int MONO_NATIVE_CURRENCY = 15;
		/// prefixed length, Unicode
		public static final int MONO_NATIVE_BSTR = 19;
		/// ANSI, null terminated
		public static final int MONO_NATIVE_LPSTR = 20;
		/// UNICODE, null terminated
		public static final int MONO_NATIVE_LPWSTR = 21;
		/// plattform dep., null terminated
		public static final int MONO_NATIVE_LPTSTR = 22;
		public static final int MONO_NATIVE_BYVALTSTR = 23;
		public static final int MONO_NATIVE_IUNKNOWN = 25;
		public static final int MONO_NATIVE_IDISPATCH = 26;
		public static final int MONO_NATIVE_STRUCT = 27;
		public static final int MONO_NATIVE_INTERFACE = 28;
		public static final int MONO_NATIVE_SAFEARRAY = 29;
		public static final int MONO_NATIVE_BYVALARRAY = 30;
		public static final int MONO_NATIVE_INT = 31;
		public static final int MONO_NATIVE_UINT = 32;
		public static final int MONO_NATIVE_VBBYREFSTR = 34;
		/// prefixed length, ANSI
		public static final int MONO_NATIVE_ANSIBSTR = 35;
		/// prefixed length, plattform dep.
		public static final int MONO_NATIVE_TBSTR = 36;
		public static final int MONO_NATIVE_VARIANTBOOL = 37;
		public static final int MONO_NATIVE_FUNC = 38;
		public static final int MONO_NATIVE_ASANY = 40;
		public static final int MONO_NATIVE_LPARRAY = 42;
		public static final int MONO_NATIVE_LPSTRUCT = 43;
		public static final int MONO_NATIVE_CUSTOM = 44;
		public static final int MONO_NATIVE_ERROR = 45;
		/// no info
		public static final int MONO_NATIVE_MAX = 80;
	}
	/// enum values
	public static interface MonoMarshalVariant {
		public static final int MONO_VARIANT_EMPTY = 0;
		public static final int MONO_VARIANT_NULL = 1;
		public static final int MONO_VARIANT_I2 = 2;
		public static final int MONO_VARIANT_I4 = 3;
		public static final int MONO_VARIANT_R4 = 4;
		public static final int MONO_VARIANT_R8 = 5;
		public static final int MONO_VARIANT_CY = 6;
		public static final int MONO_VARIANT_DATE = 7;
		public static final int MONO_VARIANT_BSTR = 8;
		public static final int MONO_VARIANT_DISPATCH = 9;
		public static final int MONO_VARIANT_ERROR = 10;
		public static final int MONO_VARIANT_BOOL = 11;
		public static final int MONO_VARIANT_VARIANT = 12;
		public static final int MONO_VARIANT_UNKNOWN = 13;
		public static final int MONO_VARIANT_DECIMAL = 14;
		public static final int MONO_VARIANT_I1 = 16;
		public static final int MONO_VARIANT_UI1 = 17;
		public static final int MONO_VARIANT_UI2 = 18;
		public static final int MONO_VARIANT_UI4 = 19;
		public static final int MONO_VARIANT_I8 = 20;
		public static final int MONO_VARIANT_UI8 = 21;
		public static final int MONO_VARIANT_INT = 22;
		public static final int MONO_VARIANT_UINT = 23;
		public static final int MONO_VARIANT_VOID = 24;
		public static final int MONO_VARIANT_HRESULT = 25;
		public static final int MONO_VARIANT_PTR = 26;
		public static final int MONO_VARIANT_SAFEARRAY = 27;
		public static final int MONO_VARIANT_CARRAY = 28;
		public static final int MONO_VARIANT_USERDEFINED = 29;
		public static final int MONO_VARIANT_LPSTR = 30;
		public static final int MONO_VARIANT_LPWSTR = 31;
		public static final int MONO_VARIANT_RECORD = 36;
		public static final int MONO_VARIANT_FILETIME = 64;
		public static final int MONO_VARIANT_BLOB = 65;
		public static final int MONO_VARIANT_STREAM = 66;
		public static final int MONO_VARIANT_STORAGE = 67;
		public static final int MONO_VARIANT_STREAMED_OBJECT = 68;
		public static final int MONO_VARIANT_STORED_OBJECT = 69;
		public static final int MONO_VARIANT_BLOB_OBJECT = 70;
		public static final int MONO_VARIANT_CF = 71;
		public static final int MONO_VARIANT_CLSID = 72;
		public static final int MONO_VARIANT_VECTOR = 4096;
		public static final int MONO_VARIANT_ARRAY = 8192;
		public static final int MONO_VARIANT_BYREF = 16384;
	}
	/// enum values
	public static interface MonoMarshalConv {
		public static final int MONO_MARSHAL_CONV_NONE = 0;
		public static final int MONO_MARSHAL_CONV_BOOL_VARIANTBOOL = 1;
		public static final int MONO_MARSHAL_CONV_BOOL_I4 = 2;
		public static final int MONO_MARSHAL_CONV_STR_BSTR = 3;
		public static final int MONO_MARSHAL_CONV_STR_LPSTR = 4;
		public static final int MONO_MARSHAL_CONV_LPSTR_STR = 5;
		public static final int MONO_MARSHAL_CONV_LPTSTR_STR = 6;
		public static final int MONO_MARSHAL_CONV_STR_LPWSTR = 7;
		public static final int MONO_MARSHAL_CONV_LPWSTR_STR = 8;
		public static final int MONO_MARSHAL_CONV_STR_LPTSTR = 9;
		public static final int MONO_MARSHAL_CONV_STR_ANSIBSTR = 10;
		public static final int MONO_MARSHAL_CONV_STR_TBSTR = 11;
		public static final int MONO_MARSHAL_CONV_STR_BYVALSTR = 12;
		public static final int MONO_MARSHAL_CONV_STR_BYVALWSTR = 13;
		public static final int MONO_MARSHAL_CONV_SB_LPSTR = 14;
		public static final int MONO_MARSHAL_CONV_SB_LPTSTR = 15;
		public static final int MONO_MARSHAL_CONV_SB_LPWSTR = 16;
		public static final int MONO_MARSHAL_CONV_LPSTR_SB = 17;
		public static final int MONO_MARSHAL_CONV_LPTSTR_SB = 18;
		public static final int MONO_MARSHAL_CONV_LPWSTR_SB = 19;
		public static final int MONO_MARSHAL_CONV_ARRAY_BYVALARRAY = 20;
		public static final int MONO_MARSHAL_CONV_ARRAY_BYVALCHARARRAY = 21;
		public static final int MONO_MARSHAL_CONV_ARRAY_SAVEARRAY = 22;
		public static final int MONO_MARSHAL_CONV_ARRAY_LPARRAY = 23;
		public static final int MONO_MARSHAL_CONV_OBJECT_INTERFACE = 24;
		public static final int MONO_MARSHAL_CONV_OBJECT_IDISPATCH = 25;
		public static final int MONO_MARSHAL_CONV_OBJECT_IUNKNOWN = 26;
		public static final int MONO_MARSHAL_CONV_OBJECT_STRUCT = 27;
		public static final int MONO_MARSHAL_CONV_DEL_FTN = 28;
		public static final int MONO_MARSHAL_CONV_FTN_DEL = 29;
		public static final int MONO_MARSHAL_FREE_ARRAY = 30;
		public static final int MONO_MARSHAL_CONV_BSTR_STR = 31;
		public static final int MONO_MARSHAL_CONV_SAFEHANDLE = 32;
		public static final int MONO_MARSHAL_CONV_HANDLEREF = 33;
	}
	/// enum values
	public static interface MonoParseTypeMode {
		public static final int MONO_PARSE_TYPE = 0;
		public static final int MONO_PARSE_MOD_TYPE = 1;
		public static final int MONO_PARSE_LOCAL = 2;
		public static final int MONO_PARSE_PARAM = 3;
		public static final int MONO_PARSE_RET = 4;
		public static final int MONO_PARSE_FIELD = 5;
	}
	public static final int MONO_ASSEMBLY_HASH_ALG = 0;
	public static final int MONO_ASSEMBLY_MAJOR_VERSION = 1;
	public static final int MONO_ASSEMBLY_MINOR_VERSION = 2;
	public static final int MONO_ASSEMBLY_BUILD_NUMBER = 3;
	public static final int MONO_ASSEMBLY_REV_NUMBER = 4;
	public static final int MONO_ASSEMBLY_FLAGS = 5;
	public static final int MONO_ASSEMBLY_PUBLIC_KEY = 6;
	public static final int MONO_ASSEMBLY_NAME = 7;
	public static final int MONO_ASSEMBLY_CULTURE = 8;
	public static final int MONO_ASSEMBLY_SIZE = 9;
	public static final int MONO_ASSEMBLYOS_PLATFORM = 0;
	public static final int MONO_ASSEMBLYOS_MAJOR_VERSION = 1;
	public static final int MONO_ASSEMBLYOS_MINOR_VERSION = 2;
	public static final int MONO_ASSEMBLYOS_SIZE = 3;
	public static final int MONO_ASSEMBLY_PROCESSOR = 0;
	public static final int MONO_ASSEMBLY_PROCESSOR_SIZE = 1;
	public static final int MONO_ASSEMBLYREF_MAJOR_VERSION = 0;
	public static final int MONO_ASSEMBLYREF_MINOR_VERSION = 1;
	public static final int MONO_ASSEMBLYREF_BUILD_NUMBER = 2;
	public static final int MONO_ASSEMBLYREF_REV_NUMBER = 3;
	public static final int MONO_ASSEMBLYREF_FLAGS = 4;
	public static final int MONO_ASSEMBLYREF_PUBLIC_KEY = 5;
	public static final int MONO_ASSEMBLYREF_NAME = 6;
	public static final int MONO_ASSEMBLYREF_CULTURE = 7;
	public static final int MONO_ASSEMBLYREF_HASH_VALUE = 8;
	public static final int MONO_ASSEMBLYREF_SIZE = 9;
	public static final int MONO_ASSEMBLYREFOS_PLATFORM = 0;
	public static final int MONO_ASSEMBLYREFOS_MAJOR_VERSION = 1;
	public static final int MONO_ASSEMBLYREFOS_MINOR_VERSION = 2;
	public static final int MONO_ASSEMBLYREFOS_ASSEMBLYREF = 3;
	public static final int MONO_ASSEMBLYREFOS_SIZE = 4;
	public static final int MONO_ASSEMBLYREFPROC_PROCESSOR = 0;
	public static final int MONO_ASSEMBLYREFPROC_ASSEMBLYREF = 1;
	public static final int MONO_ASSEMBLYREFPROC_SIZE = 2;
	public static final int MONO_CLASS_LAYOUT_PACKING_SIZE = 0;
	public static final int MONO_CLASS_LAYOUT_CLASS_SIZE = 1;
	public static final int MONO_CLASS_LAYOUT_PARENT = 2;
	public static final int MONO_CLASS_LAYOUT_SIZE = 3;
	public static final int MONO_CONSTANT_TYPE = 0;
	public static final int MONO_CONSTANT_PADDING = 1;
	public static final int MONO_CONSTANT_PARENT = 2;
	public static final int MONO_CONSTANT_VALUE = 3;
	public static final int MONO_CONSTANT_SIZE = 4;
	public static final int MONO_CUSTOM_ATTR_PARENT = 0;
	public static final int MONO_CUSTOM_ATTR_TYPE = 1;
	public static final int MONO_CUSTOM_ATTR_VALUE = 2;
	public static final int MONO_CUSTOM_ATTR_SIZE = 3;
	public static final int MONO_DECL_SECURITY_ACTION = 0;
	public static final int MONO_DECL_SECURITY_PARENT = 1;
	public static final int MONO_DECL_SECURITY_PERMISSIONSET = 2;
	public static final int MONO_DECL_SECURITY_SIZE = 3;
	public static final int MONO_EVENT_MAP_PARENT = 0;
	public static final int MONO_EVENT_MAP_EVENTLIST = 1;
	public static final int MONO_EVENT_MAP_SIZE = 2;
	public static final int MONO_EVENT_FLAGS = 0;
	public static final int MONO_EVENT_NAME = 1;
	public static final int MONO_EVENT_TYPE = 2;
	public static final int MONO_EVENT_SIZE = 3;
	public static final int MONO_EVENT_POINTER_EVENT = 0;
	public static final int MONO_EVENT_POINTER_SIZE = 1;
	public static final int MONO_EXP_TYPE_FLAGS = 0;
	public static final int MONO_EXP_TYPE_TYPEDEF = 1;
	public static final int MONO_EXP_TYPE_NAME = 2;
	public static final int MONO_EXP_TYPE_NAMESPACE = 3;
	public static final int MONO_EXP_TYPE_IMPLEMENTATION = 4;
	public static final int MONO_EXP_TYPE_SIZE = 5;
	public static final int MONO_FIELD_FLAGS = 0;
	public static final int MONO_FIELD_NAME = 1;
	public static final int MONO_FIELD_SIGNATURE = 2;
	public static final int MONO_FIELD_SIZE = 3;
	public static final int MONO_FIELD_LAYOUT_OFFSET = 0;
	public static final int MONO_FIELD_LAYOUT_FIELD = 1;
	public static final int MONO_FIELD_LAYOUT_SIZE = 2;
	public static final int MONO_FIELD_MARSHAL_PARENT = 0;
	public static final int MONO_FIELD_MARSHAL_NATIVE_TYPE = 1;
	public static final int MONO_FIELD_MARSHAL_SIZE = 2;
	public static final int MONO_FIELD_POINTER_FIELD = 0;
	public static final int MONO_FIELD_POINTER_SIZE = 1;
	public static final int MONO_FIELD_RVA_RVA = 0;
	public static final int MONO_FIELD_RVA_FIELD = 1;
	public static final int MONO_FIELD_RVA_SIZE = 2;
	public static final int MONO_FILE_FLAGS = 0;
	public static final int MONO_FILE_NAME = 1;
	public static final int MONO_FILE_HASH_VALUE = 2;
	public static final int MONO_FILE_SIZE = 3;
	public static final int MONO_IMPLMAP_FLAGS = 0;
	public static final int MONO_IMPLMAP_MEMBER = 1;
	public static final int MONO_IMPLMAP_NAME = 2;
	public static final int MONO_IMPLMAP_SCOPE = 3;
	public static final int MONO_IMPLMAP_SIZE = 4;
	public static final int MONO_INTERFACEIMPL_CLASS = 0;
	public static final int MONO_INTERFACEIMPL_INTERFACE = 1;
	public static final int MONO_INTERFACEIMPL_SIZE = 2;
	public static final int MONO_MANIFEST_OFFSET = 0;
	public static final int MONO_MANIFEST_FLAGS = 1;
	public static final int MONO_MANIFEST_NAME = 2;
	public static final int MONO_MANIFEST_IMPLEMENTATION = 3;
	public static final int MONO_MANIFEST_SIZE = 4;
	public static final int MONO_MEMBERREF_CLASS = 0;
	public static final int MONO_MEMBERREF_NAME = 1;
	public static final int MONO_MEMBERREF_SIGNATURE = 2;
	public static final int MONO_MEMBERREF_SIZE = 3;
	public static final int MONO_METHOD_RVA = 0;
	public static final int MONO_METHOD_IMPLFLAGS = 1;
	public static final int MONO_METHOD_FLAGS = 2;
	public static final int MONO_METHOD_NAME = 3;
	public static final int MONO_METHOD_SIGNATURE = 4;
	public static final int MONO_METHOD_PARAMLIST = 5;
	public static final int MONO_METHOD_SIZE = 6;
	public static final int MONO_METHODIMPL_CLASS = 0;
	public static final int MONO_METHODIMPL_BODY = 1;
	public static final int MONO_METHODIMPL_DECLARATION = 2;
	public static final int MONO_METHODIMPL_SIZE = 3;
	public static final int MONO_METHOD_POINTER_METHOD = 0;
	public static final int MONO_METHOD_POINTER_SIZE = 1;
	public static final int MONO_METHOD_SEMA_SEMANTICS = 0;
	public static final int MONO_METHOD_SEMA_METHOD = 1;
	public static final int MONO_METHOD_SEMA_ASSOCIATION = 2;
	public static final int MONO_METHOD_SEMA_SIZE = 3;
	public static final int MONO_MODULE_GENERATION = 0;
	public static final int MONO_MODULE_NAME = 1;
	public static final int MONO_MODULE_MVID = 2;
	public static final int MONO_MODULE_ENC = 3;
	public static final int MONO_MODULE_ENCBASE = 4;
	public static final int MONO_MODULE_SIZE = 5;
	public static final int MONO_MODULEREF_NAME = 0;
	public static final int MONO_MODULEREF_SIZE = 1;
	public static final int MONO_NESTED_CLASS_NESTED = 0;
	public static final int MONO_NESTED_CLASS_ENCLOSING = 1;
	public static final int MONO_NESTED_CLASS_SIZE = 2;
	public static final int MONO_PARAM_FLAGS = 0;
	public static final int MONO_PARAM_SEQUENCE = 1;
	public static final int MONO_PARAM_NAME = 2;
	public static final int MONO_PARAM_SIZE = 3;
	public static final int MONO_PARAM_POINTER_PARAM = 0;
	public static final int MONO_PARAM_POINTER_SIZE = 1;
	public static final int MONO_PROPERTY_FLAGS = 0;
	public static final int MONO_PROPERTY_NAME = 1;
	public static final int MONO_PROPERTY_TYPE = 2;
	public static final int MONO_PROPERTY_SIZE = 3;
	public static final int MONO_PROPERTY_POINTER_PROPERTY = 0;
	public static final int MONO_PROPERTY_POINTER_SIZE = 1;
	public static final int MONO_PROPERTY_MAP_PARENT = 0;
	public static final int MONO_PROPERTY_MAP_PROPERTY_LIST = 1;
	public static final int MONO_PROPERTY_MAP_SIZE = 2;
	public static final int MONO_STAND_ALONE_SIGNATURE = 0;
	public static final int MONO_STAND_ALONE_SIGNATURE_SIZE = 1;
	public static final int MONO_TYPEDEF_FLAGS = 0;
	public static final int MONO_TYPEDEF_NAME = 1;
	public static final int MONO_TYPEDEF_NAMESPACE = 2;
	public static final int MONO_TYPEDEF_EXTENDS = 3;
	public static final int MONO_TYPEDEF_FIELD_LIST = 4;
	public static final int MONO_TYPEDEF_METHOD_LIST = 5;
	public static final int MONO_TYPEDEF_SIZE = 6;
	public static final int MONO_TYPEREF_SCOPE = 0;
	public static final int MONO_TYPEREF_NAME = 1;
	public static final int MONO_TYPEREF_NAMESPACE = 2;
	public static final int MONO_TYPEREF_SIZE = 3;
	public static final int MONO_TYPESPEC_SIGNATURE = 0;
	public static final int MONO_TYPESPEC_SIZE = 1;
	public static final int MONO_GENERICPARAM_NUMBER = 0;
	public static final int MONO_GENERICPARAM_FLAGS = 1;
	public static final int MONO_GENERICPARAM_OWNER = 2;
	public static final int MONO_GENERICPARAM_NAME = 3;
	public static final int MONO_GENERICPARAM_SIZE = 4;
	public static final int MONO_METHODSPEC_METHOD = 0;
	public static final int MONO_METHODSPEC_SIGNATURE = 1;
	public static final int MONO_METHODSPEC_SIZE = 2;
	public static final int MONO_GENPARCONSTRAINT_GENERICPAR = 0;
	public static final int MONO_GENPARCONSTRAINT_CONSTRAINT = 1;
	public static final int MONO_GENPARCONSTRAINT_SIZE = 2;
	public static final int MONO_TYPEDEFORREF_TYPEDEF = 0;
	public static final int MONO_TYPEDEFORREF_TYPEREF = 1;
	public static final int MONO_TYPEDEFORREF_TYPESPEC = 2;
	public static final int MONO_TYPEDEFORREF_BITS = 2;
	public static final int MONO_TYPEDEFORREF_MASK = 3;
	public static final int MONO_HASCONSTANT_FIEDDEF = 0;
	public static final int MONO_HASCONSTANT_PARAM = 1;
	public static final int MONO_HASCONSTANT_PROPERTY = 2;
	public static final int MONO_HASCONSTANT_BITS = 2;
	public static final int MONO_HASCONSTANT_MASK = 3;
	public static final int MONO_CUSTOM_ATTR_METHODDEF = 0;
	public static final int MONO_CUSTOM_ATTR_FIELDDEF = 1;
	public static final int MONO_CUSTOM_ATTR_TYPEREF = 2;
	public static final int MONO_CUSTOM_ATTR_TYPEDEF = 3;
	public static final int MONO_CUSTOM_ATTR_PARAMDEF = 4;
	public static final int MONO_CUSTOM_ATTR_INTERFACE = 5;
	public static final int MONO_CUSTOM_ATTR_MEMBERREF = 6;
	public static final int MONO_CUSTOM_ATTR_MODULE = 7;
	public static final int MONO_CUSTOM_ATTR_PERMISSION = 8;
	public static final int MONO_CUSTOM_ATTR_PROPERTY = 9;
	public static final int MONO_CUSTOM_ATTR_EVENT = 10;
	public static final int MONO_CUSTOM_ATTR_SIGNATURE = 11;
	public static final int MONO_CUSTOM_ATTR_MODULEREF = 12;
	public static final int MONO_CUSTOM_ATTR_TYPESPEC = 13;
	public static final int MONO_CUSTOM_ATTR_ASSEMBLY = 14;
	public static final int MONO_CUSTOM_ATTR_ASSEMBLYREF = 15;
	public static final int MONO_CUSTOM_ATTR_FILE = 16;
	public static final int MONO_CUSTOM_ATTR_EXP_TYPE = 17;
	public static final int MONO_CUSTOM_ATTR_MANIFEST = 18;
	public static final int MONO_CUSTOM_ATTR_GENERICPAR = 19;
	public static final int MONO_CUSTOM_ATTR_BITS = 5;
	public static final int MONO_CUSTOM_ATTR_MASK = 31;
	public static final int MONO_HAS_FIELD_MARSHAL_FIELDSREF = 0;
	public static final int MONO_HAS_FIELD_MARSHAL_PARAMDEF = 1;
	public static final int MONO_HAS_FIELD_MARSHAL_BITS = 1;
	public static final int MONO_HAS_FIELD_MARSHAL_MASK = 1;
	public static final int MONO_HAS_DECL_SECURITY_TYPEDEF = 0;
	public static final int MONO_HAS_DECL_SECURITY_METHODDEF = 1;
	public static final int MONO_HAS_DECL_SECURITY_ASSEMBLY = 2;
	public static final int MONO_HAS_DECL_SECURITY_BITS = 2;
	public static final int MONO_HAS_DECL_SECURITY_MASK = 3;
	/// not used
	public static final int MONO_MEMBERREF_PARENT_TYPEDEF = 0;
	public static final int MONO_MEMBERREF_PARENT_TYPEREF = 1;
	public static final int MONO_MEMBERREF_PARENT_MODULEREF = 2;
	public static final int MONO_MEMBERREF_PARENT_METHODDEF = 3;
	public static final int MONO_MEMBERREF_PARENT_TYPESPEC = 4;
	public static final int MONO_MEMBERREF_PARENT_BITS = 3;
	public static final int MONO_MEMBERREF_PARENT_MASK = 7;
	public static final int MONO_HAS_SEMANTICS_EVENT = 0;
	public static final int MONO_HAS_SEMANTICS_PROPERTY = 1;
	public static final int MONO_HAS_SEMANTICS_BITS = 1;
	public static final int MONO_HAS_SEMANTICS_MASK = 1;
	public static final int MONO_METHODDEFORREF_METHODDEF = 0;
	public static final int MONO_METHODDEFORREF_METHODREF = 1;
	public static final int MONO_METHODDEFORREF_BITS = 1;
	public static final int MONO_METHODDEFORREF_MASK = 1;
	public static final int MONO_MEMBERFORWD_FIELDDEF = 0;
	public static final int MONO_MEMBERFORWD_METHODDEF = 1;
	public static final int MONO_MEMBERFORWD_BITS = 1;
	public static final int MONO_MEMBERFORWD_MASK = 1;
	public static final int MONO_IMPLEMENTATION_FILE = 0;
	public static final int MONO_IMPLEMENTATION_ASSEMBLYREF = 1;
	public static final int MONO_IMPLEMENTATION_EXP_TYPE = 2;
	public static final int MONO_IMPLEMENTATION_BITS = 2;
	public static final int MONO_IMPLEMENTATION_MASK = 3;
	/// not used
	public static final int MONO_CUSTOM_ATTR_TYPE_TYPEREF = 0;
	/// not used
	public static final int MONO_CUSTOM_ATTR_TYPE_TYPEDEF = 1;
	public static final int MONO_CUSTOM_ATTR_TYPE_METHODDEF = 2;
	public static final int MONO_CUSTOM_ATTR_TYPE_MEMBERREF = 3;
	/// not used
	public static final int MONO_CUSTOM_ATTR_TYPE_STRING = 4;
	public static final int MONO_CUSTOM_ATTR_TYPE_BITS = 3;
	public static final int MONO_CUSTOM_ATTR_TYPE_MASK = 7;
	public static final int MONO_RESOLTION_SCOPE_MODULE = 0;
	public static final int MONO_RESOLTION_SCOPE_MODULEREF = 1;
	public static final int MONO_RESOLTION_SCOPE_ASSEMBLYREF = 2;
	public static final int MONO_RESOLTION_SCOPE_TYPEREF = 3;
	public static final int MONO_RESOLTION_SCOPE_BITS = 2;
	public static final int MONO_RESOLTION_SCOPE_MASK = 3;
	public static final int MONO_TYPEORMETHOD_TYPE = 0;
	public static final int MONO_TYPEORMETHOD_METHOD = 1;
	public static final int MONO_TYPEORMETHOD_BITS = 1;
	public static final int MONO_TYPEORMETHOD_MASK = 1;
	/// enum values
	public static interface MonoDebugFormat {
		public static final int MONO_DEBUG_FORMAT_NONE = 0;
		public static final int MONO_DEBUG_FORMAT_MONO = 1;
		public static final int MONO_DEBUG_FORMAT_DEBUGGER = 2;
	}
	/// 23.1.1  Values for AssemblyHashAlgorithm
	public static final int MONO_ASSEMBLY_HASH_NONE = 0;
	/// 23.1.1  Values for AssemblyHashAlgorithm
	public static final int MONO_ASSEMBLY_HASH_MD5 = 32771;
	/// 23.1.1  Values for AssemblyHashAlgorithm
	public static final int MONO_ASSEMBLY_HASH_SHA1 = 32772;
	/// 23.1.2 AssemblyRefs
	public static final int MONO_ASSEMBLYREF_FULL_PUBLIC_KEY = 1;
	/// 23.1.2 AssemblyRefs
	public static final int MONO_ASSEMBLYREF_RETARGETABLE = 256;
	/// 23.1.2 AssemblyRefs
	public static final int MONO_ASSEMBLYREF_JIT_TRACKING = 32768;
	/// 23.1.2 AssemblyRefs
	public static final int MONO_ASSEMBLYREF_NO_JIT_OPT = 16384;
	/// 23.1.4 Flags for Event.EventAttributes
	public static final int MONO_EVENT_SPECIALNAME = 512;
	/// 23.1.4 Flags for Event.EventAttributes
	public static final int MONO_EVENT_RTSPECIALNAME = 1024;
	/// Field Attributes (23.1.5).
	public static final int MONO_FIELD_ATTR_FIELD_ACCESS_MASK = 7;
	/// Field Attributes (23.1.5).
	public static final int MONO_FIELD_ATTR_COMPILER_CONTROLLED = 0;
	/// Field Attributes (23.1.5).
	public static final int MONO_FIELD_ATTR_PRIVATE = 1;
	/// Field Attributes (23.1.5).
	public static final int MONO_FIELD_ATTR_FAM_AND_ASSEM = 2;
	/// Field Attributes (23.1.5).
	public static final int MONO_FIELD_ATTR_ASSEMBLY = 3;
	/// Field Attributes (23.1.5).
	public static final int MONO_FIELD_ATTR_FAMILY = 4;
	/// Field Attributes (23.1.5).
	public static final int MONO_FIELD_ATTR_FAM_OR_ASSEM = 5;
	/// Field Attributes (23.1.5).
	public static final int MONO_FIELD_ATTR_PUBLIC = 6;
	/// Field Attributes (23.1.5).
	public static final int MONO_FIELD_ATTR_STATIC = 16;
	/// Field Attributes (23.1.5).
	public static final int MONO_FIELD_ATTR_INIT_ONLY = 32;
	/// Field Attributes (23.1.5).
	public static final int MONO_FIELD_ATTR_LITERAL = 64;
	/// Field Attributes (23.1.5).
	public static final int MONO_FIELD_ATTR_NOT_SERIALIZED = 128;
	/// Field Attributes (23.1.5).
	public static final int MONO_FIELD_ATTR_SPECIAL_NAME = 512;
	/// Field Attributes (23.1.5).
	public static final int MONO_FIELD_ATTR_PINVOKE_IMPL = 8192;
	/**
	 * Field Attributes (23.1.5).<br>
	 * For runtime use only
	 */
	public static final int MONO_FIELD_ATTR_RESERVED_MASK = 38144;
	/// Field Attributes (23.1.5).
	public static final int MONO_FIELD_ATTR_RT_SPECIAL_NAME = 1024;
	/// Field Attributes (23.1.5).
	public static final int MONO_FIELD_ATTR_HAS_MARSHAL = 4096;
	/// Field Attributes (23.1.5).
	public static final int MONO_FIELD_ATTR_HAS_DEFAULT = 32768;
	/// Field Attributes (23.1.5).
	public static final int MONO_FIELD_ATTR_HAS_RVA = 256;
	/// 23.1.6 Flags for FileAttributes
	public static final int MONO_FILE_HAS_METADATA = 0;
	/// 23.1.6 Flags for FileAttributes
	public static final int MONO_FILE_HAS_NO_METADATA = 1;
	/// 23.1.7 Flags for generic parameters
	public static final int MONO_GEN_PARAM_VARIANCE_MASK = 3;
	/// 23.1.7 Flags for generic parameters
	public static final int MONO_GEN_PARAM_NON_VARIANT = 0;
	/// 23.1.7 Flags for generic parameters
	public static final int MONO_GEN_PARAM_VARIANT = 1;
	/// 23.1.7 Flags for generic parameters
	public static final int MONO_GEN_PARAM_COVARIANT = 2;
	/// 23.1.7 Flags for generic parameters
	public static final int MONO_GEN_PARAM_CONSTRAINT_MASK = 28;
	/// 23.1.7 Flags for generic parameters
	public static final int MONO_GEN_PARAM_CONSTRAINT_CLASS = 4;
	/// 23.1.7 Flags for generic parameters
	public static final int MONO_GEN_PARAM_CONSTRAINT_VTYPE = 8;
	/// 23.1.7 Flags for generic parameters
	public static final int MONO_GEN_PARAM_CONSTRAINT_DCTOR = 16;
	/// 23.1.8 Flags for ImplMap [PInvokeAttributes]
	public static final int MONO_PINVOKE_NO_MANGLE = 1;
	/// 23.1.8 Flags for ImplMap [PInvokeAttributes]
	public static final int MONO_PINVOKE_CHAR_SET_MASK = 6;
	/// 23.1.8 Flags for ImplMap [PInvokeAttributes]
	public static final int MONO_PINVOKE_CHAR_SET_NOT_SPEC = 0;
	/// 23.1.8 Flags for ImplMap [PInvokeAttributes]
	public static final int MONO_PINVOKE_CHAR_SET_ANSI = 2;
	/// 23.1.8 Flags for ImplMap [PInvokeAttributes]
	public static final int MONO_PINVOKE_CHAR_SET_UNICODE = 4;
	/// 23.1.8 Flags for ImplMap [PInvokeAttributes]
	public static final int MONO_PINVOKE_CHAR_SET_AUTO = 6;
	/// 23.1.8 Flags for ImplMap [PInvokeAttributes]
	public static final int MONO_PINVOKE_BEST_FIT_ENABLED = 16;
	/// 23.1.8 Flags for ImplMap [PInvokeAttributes]
	public static final int MONO_PINVOKE_BEST_FIT_DISABLED = 32;
	/// 23.1.8 Flags for ImplMap [PInvokeAttributes]
	public static final int MONO_PINVOKE_BEST_FIT_MASK = 48;
	/// 23.1.8 Flags for ImplMap [PInvokeAttributes]
	public static final int MONO_PINVOKE_SUPPORTS_LAST_ERROR = 64;
	/// 23.1.8 Flags for ImplMap [PInvokeAttributes]
	public static final int MONO_PINVOKE_CALL_CONV_MASK = 1792;
	/// 23.1.8 Flags for ImplMap [PInvokeAttributes]
	public static final int MONO_PINVOKE_CALL_CONV_WINAPI = 256;
	/// 23.1.8 Flags for ImplMap [PInvokeAttributes]
	public static final int MONO_PINVOKE_CALL_CONV_CDECL = 512;
	/// 23.1.8 Flags for ImplMap [PInvokeAttributes]
	public static final int MONO_PINVOKE_CALL_CONV_STDCALL = 768;
	/// 23.1.8 Flags for ImplMap [PInvokeAttributes]
	public static final int MONO_PINVOKE_CALL_CONV_THISCALL = 1024;
	/// 23.1.8 Flags for ImplMap [PInvokeAttributes]
	public static final int MONO_PINVOKE_CALL_CONV_FASTCALL = 1280;
	/// 23.1.8 Flags for ImplMap [PInvokeAttributes]
	public static final int MONO_PINVOKE_THROW_ON_UNMAPPABLE_ENABLED = 4096;
	/// 23.1.8 Flags for ImplMap [PInvokeAttributes]
	public static final int MONO_PINVOKE_THROW_ON_UNMAPPABLE_DISABLED = 8192;
	/// 23.1.8 Flags for ImplMap [PInvokeAttributes]
	public static final int MONO_PINVOKE_THROW_ON_UNMAPPABLE_MASK = 12288;
	/// 23.1.8 Flags for ImplMap [PInvokeAttributes]
	public static final int MONO_PINVOKE_CALL_CONV_GENERIC = 16;
	/// 23.1.8 Flags for ImplMap [PInvokeAttributes]
	public static final int MONO_PINVOKE_CALL_CONV_GENERICINST = 10;
	/// 23.1.9 Flags for ManifestResource
	public static final int MONO_MANIFEST_RESOURCE_VISIBILITY_MASK = 7;
	/// 23.1.9 Flags for ManifestResource
	public static final int MONO_MANIFEST_RESOURCE_PUBLIC = 1;
	/// 23.1.9 Flags for ManifestResource
	public static final int MONO_MANIFEST_RESOURCE_PRIVATE = 2;
	/// Method Attributes (23.1.10)
	public static final int MONO_METHOD_ATTR_ACCESS_MASK = 7;
	/// Method Attributes (23.1.10)
	public static final int MONO_METHOD_ATTR_COMPILER_CONTROLLED = 0;
	/// Method Attributes (23.1.10)
	public static final int MONO_METHOD_ATTR_PRIVATE = 1;
	/// Method Attributes (23.1.10)
	public static final int MONO_METHOD_ATTR_FAM_AND_ASSEM = 2;
	/// Method Attributes (23.1.10)
	public static final int MONO_METHOD_ATTR_ASSEM = 3;
	/// Method Attributes (23.1.10)
	public static final int MONO_METHOD_ATTR_FAMILY = 4;
	/// Method Attributes (23.1.10)
	public static final int MONO_METHOD_ATTR_FAM_OR_ASSEM = 5;
	/// Method Attributes (23.1.10)
	public static final int MONO_METHOD_ATTR_PUBLIC = 6;
	/// Method Attributes (23.1.10)
	public static final int MONO_METHOD_ATTR_STATIC = 16;
	/// Method Attributes (23.1.10)
	public static final int MONO_METHOD_ATTR_FINAL = 32;
	/// Method Attributes (23.1.10)
	public static final int MONO_METHOD_ATTR_VIRTUAL = 64;
	/// Method Attributes (23.1.10)
	public static final int MONO_METHOD_ATTR_HIDE_BY_SIG = 128;
	/// Method Attributes (23.1.10)
	public static final int MONO_METHOD_ATTR_VTABLE_LAYOUT_MASK = 256;
	/// Method Attributes (23.1.10)
	public static final int MONO_METHOD_ATTR_REUSE_SLOT = 0;
	/// Method Attributes (23.1.10)
	public static final int MONO_METHOD_ATTR_NEW_SLOT = 256;
	/// Method Attributes (23.1.10)
	public static final int MONO_METHOD_ATTR_STRICT = 512;
	/// Method Attributes (23.1.10)
	public static final int MONO_METHOD_ATTR_ABSTRACT = 1024;
	/// Method Attributes (23.1.10)
	public static final int MONO_METHOD_ATTR_SPECIAL_NAME = 2048;
	/// Method Attributes (23.1.10)
	public static final int MONO_METHOD_ATTR_PINVOKE_IMPL = 8192;
	/// Method Attributes (23.1.10)
	public static final int MONO_METHOD_ATTR_UNMANAGED_EXPORT = 8;
	/**
	 * Method Attributes (23.1.10)<br>
	 * For runtime use only
	 */
	public static final int MONO_METHOD_ATTR_RESERVED_MASK = 53248;
	/// Method Attributes (23.1.10)
	public static final int MONO_METHOD_ATTR_RT_SPECIAL_NAME = 4096;
	/// Method Attributes (23.1.10)
	public static final int MONO_METHOD_ATTR_HAS_SECURITY = 16384;
	/// Method Attributes (23.1.10)
	public static final int MONO_METHOD_ATTR_REQUIRE_SEC_OBJECT = 32768;
	/// Method Impl Attributes (23.1.11)
	public static final int MONO_METHOD_IMPL_ATTR_CODE_TYPE_MASK = 3;
	/// Method Impl Attributes (23.1.11)
	public static final int MONO_METHOD_IMPL_ATTR_IL = 0;
	/// Method Impl Attributes (23.1.11)
	public static final int MONO_METHOD_IMPL_ATTR_NATIVE = 1;
	/// Method Impl Attributes (23.1.11)
	public static final int MONO_METHOD_IMPL_ATTR_OPTIL = 2;
	/// Method Impl Attributes (23.1.11)
	public static final int MONO_METHOD_IMPL_ATTR_RUNTIME = 3;
	/// Method Impl Attributes (23.1.11)
	public static final int MONO_METHOD_IMPL_ATTR_MANAGED_MASK = 4;
	/// Method Impl Attributes (23.1.11)
	public static final int MONO_METHOD_IMPL_ATTR_UNMANAGED = 4;
	/// Method Impl Attributes (23.1.11)
	public static final int MONO_METHOD_IMPL_ATTR_MANAGED = 0;
	/// Method Impl Attributes (23.1.11)
	public static final int MONO_METHOD_IMPL_ATTR_FORWARD_REF = 16;
	/// Method Impl Attributes (23.1.11)
	public static final int MONO_METHOD_IMPL_ATTR_PRESERVE_SIG = 128;
	/// Method Impl Attributes (23.1.11)
	public static final int MONO_METHOD_IMPL_ATTR_INTERNAL_CALL = 4096;
	/// Method Impl Attributes (23.1.11)
	public static final int MONO_METHOD_IMPL_ATTR_SYNCHRONIZED = 32;
	/// Method Impl Attributes (23.1.11)
	public static final int MONO_METHOD_IMPL_ATTR_NOINLINING = 8;
	/// Method Impl Attributes (23.1.11)
	public static final int MONO_METHOD_IMPL_ATTR_MAX_METHOD_IMPL_VAL = 65535;
	/// Method Semantics ([MethodSemanticAttributes]) 23.1.12,
	public static final int MONO_METHOD_SEMANTIC_SETTER = 1;
	/// Method Semantics ([MethodSemanticAttributes]) 23.1.12,
	public static final int MONO_METHOD_SEMANTIC_GETTER = 2;
	/// Method Semantics ([MethodSemanticAttributes]) 23.1.12,
	public static final int MONO_METHOD_SEMANTIC_OTHER = 4;
	/// Method Semantics ([MethodSemanticAttributes]) 23.1.12,
	public static final int MONO_METHOD_SEMANTIC_ADD_ON = 8;
	/// Method Semantics ([MethodSemanticAttributes]) 23.1.12,
	public static final int MONO_METHOD_SEMANTIC_REMOVE_ON = 16;
	/// Method Semantics ([MethodSemanticAttributes]) 23.1.12,
	public static final int MONO_METHOD_SEMANTIC_FIRE = 32;
	/// Flags for Params (23.1.13)
	public static final int MONO_PARAM_ATTR_IN = 1;
	/// Flags for Params (23.1.13)
	public static final int MONO_PARAM_ATTR_OUT = 2;
	/// Flags for Params (23.1.13)
	public static final int MONO_PARAM_ATTR_OPTIONAL = 16;
	/// Flags for Params (23.1.13)
	public static final int MONO_PARAM_ATTR_RESERVED_MASK = 61440;
	/// Flags for Params (23.1.13)
	public static final int MONO_PARAM_ATTR_HAS_DEFAULT = 4096;
	/// Flags for Params (23.1.13)
	public static final int MONO_PARAM_ATTR_HAS_MARSHAL = 8192;
	/// Flags for Params (23.1.13)
	public static final int MONO_PARAM_ATTR_UNUSED = 53216;
	/// 23.1.14 PropertyAttributes
	public static final int MONO_PROPERTY_ATTR_SPECIAL_NAME = 512;
	/// 23.1.14 PropertyAttributes
	public static final int MONO_PROPERTY_ATTR_RESERVED_MASK = 62464;
	/// 23.1.14 PropertyAttributes
	public static final int MONO_PROPERTY_ATTR_RT_SPECIAL_NAME = 1024;
	/// 23.1.14 PropertyAttributes
	public static final int MONO_PROPERTY_ATTR_HAS_DEFAULT = 4096;
	/// 23.1.14 PropertyAttributes
	public static final int MONO_PROPERTY_ATTR_UNUSED = 59903;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_VISIBILITY_MASK = 7;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_NOT_PUBLIC = 0;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_PUBLIC = 1;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_NESTED_PUBLIC = 2;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_NESTED_PRIVATE = 3;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_NESTED_FAMILY = 4;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_NESTED_ASSEMBLY = 5;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_NESTED_FAM_AND_ASSEM = 6;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_NESTED_FAM_OR_ASSEM = 7;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_LAYOUT_MASK = 24;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_AUTO_LAYOUT = 0;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_SEQUENTIAL_LAYOUT = 8;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_EXPLICIT_LAYOUT = 16;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_CLASS_SEMANTIC_MASK = 32;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_CLASS = 0;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_INTERFACE = 32;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_ABSTRACT = 128;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_SEALED = 256;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_SPECIAL_NAME = 1024;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_IMPORT = 4096;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_SERIALIZABLE = 8192;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_STRING_FORMAT_MASK = 196608;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_ANSI_CLASS = 0;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_UNICODE_CLASS = 65536;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_AUTO_CLASS = 131072;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_CUSTOM_CLASS = 196608;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_CUSTOM_MASK = 12582912;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_BEFORE_FIELD_INIT = 1048576;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_FORWARDER = 2097152;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_RESERVED_MASK = 264192;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_RT_SPECIAL_NAME = 2048;
	/// Type Attributes (23.1.15).
	public static final int MONO_TYPE_ATTR_HAS_SECURITY = 262144;
	/// enum values
	public static interface MonoTypeEnum {
		/// End of List
		public static final int MONO_TYPE_END = 0;
		public static final int MONO_TYPE_VOID = 1;
		public static final int MONO_TYPE_BOOLEAN = 2;
		public static final int MONO_TYPE_CHAR = 3;
		public static final int MONO_TYPE_I1 = 4;
		public static final int MONO_TYPE_U1 = 5;
		public static final int MONO_TYPE_I2 = 6;
		public static final int MONO_TYPE_U2 = 7;
		public static final int MONO_TYPE_I4 = 8;
		public static final int MONO_TYPE_U4 = 9;
		public static final int MONO_TYPE_I8 = 10;
		public static final int MONO_TYPE_U8 = 11;
		public static final int MONO_TYPE_R4 = 12;
		public static final int MONO_TYPE_R8 = 13;
		public static final int MONO_TYPE_STRING = 14;
		/// arg: <type> token
		public static final int MONO_TYPE_PTR = 15;
		/// arg: <type> token
		public static final int MONO_TYPE_BYREF = 16;
		/// arg: <type> token
		public static final int MONO_TYPE_VALUETYPE = 17;
		/// arg: <type> token
		public static final int MONO_TYPE_CLASS = 18;
		/// number
		public static final int MONO_TYPE_VAR = 19;
		/// type, rank, boundsCount, bound1, loCount, lo1
		public static final int MONO_TYPE_ARRAY = 20;
		/// <type> <type-arg-count> <type-1> \x{2026} <type-n>
		public static final int MONO_TYPE_GENERICINST = 21;
		public static final int MONO_TYPE_TYPEDBYREF = 22;
		public static final int MONO_TYPE_I = 24;
		public static final int MONO_TYPE_U = 25;
		/// arg: full method signature
		public static final int MONO_TYPE_FNPTR = 27;
		public static final int MONO_TYPE_OBJECT = 28;
		/// 0-based one-dim-array
		public static final int MONO_TYPE_SZARRAY = 29;
		/// number
		public static final int MONO_TYPE_MVAR = 30;
		/// arg: typedef or typeref token
		public static final int MONO_TYPE_CMOD_REQD = 31;
		/// optional arg: typedef or typref token
		public static final int MONO_TYPE_CMOD_OPT = 32;
		/// CLR internal type
		public static final int MONO_TYPE_INTERNAL = 33;
		/// Or with the following types
		public static final int MONO_TYPE_MODIFIER = 64;
		/// Sentinel for varargs method signature
		public static final int MONO_TYPE_SENTINEL = 65;
		/// Local var that points to pinned object
		public static final int MONO_TYPE_PINNED = 69;
		/// an enumeration
		public static final int MONO_TYPE_ENUM = 85;
	}
	/// enum values
	public static interface MonoMetaTableEnum {
		public static final int MONO_TABLE_MODULE = 0;
		public static final int MONO_TABLE_TYPEREF = 1;
		public static final int MONO_TABLE_TYPEDEF = 2;
		public static final int MONO_TABLE_FIELD_POINTER = 3;
		public static final int MONO_TABLE_FIELD = 4;
		public static final int MONO_TABLE_METHOD_POINTER = 5;
		public static final int MONO_TABLE_METHOD = 6;
		public static final int MONO_TABLE_PARAM_POINTER = 7;
		public static final int MONO_TABLE_PARAM = 8;
		public static final int MONO_TABLE_INTERFACEIMPL = 9;
		/// 0xa
		public static final int MONO_TABLE_MEMBERREF = 10;
		public static final int MONO_TABLE_CONSTANT = 11;
		public static final int MONO_TABLE_CUSTOMATTRIBUTE = 12;
		public static final int MONO_TABLE_FIELDMARSHAL = 13;
		public static final int MONO_TABLE_DECLSECURITY = 14;
		public static final int MONO_TABLE_CLASSLAYOUT = 15;
		/// 0x10
		public static final int MONO_TABLE_FIELDLAYOUT = 16;
		public static final int MONO_TABLE_STANDALONESIG = 17;
		public static final int MONO_TABLE_EVENTMAP = 18;
		public static final int MONO_TABLE_EVENT_POINTER = 19;
		public static final int MONO_TABLE_EVENT = 20;
		public static final int MONO_TABLE_PROPERTYMAP = 21;
		public static final int MONO_TABLE_PROPERTY_POINTER = 22;
		public static final int MONO_TABLE_PROPERTY = 23;
		public static final int MONO_TABLE_METHODSEMANTICS = 24;
		public static final int MONO_TABLE_METHODIMPL = 25;
		/// 0x1a
		public static final int MONO_TABLE_MODULEREF = 26;
		public static final int MONO_TABLE_TYPESPEC = 27;
		public static final int MONO_TABLE_IMPLMAP = 28;
		public static final int MONO_TABLE_FIELDRVA = 29;
		public static final int MONO_TABLE_UNUSED6 = 30;
		public static final int MONO_TABLE_UNUSED7 = 31;
		/// 0x20
		public static final int MONO_TABLE_ASSEMBLY = 32;
		public static final int MONO_TABLE_ASSEMBLYPROCESSOR = 33;
		public static final int MONO_TABLE_ASSEMBLYOS = 34;
		public static final int MONO_TABLE_ASSEMBLYREF = 35;
		public static final int MONO_TABLE_ASSEMBLYREFPROCESSOR = 36;
		public static final int MONO_TABLE_ASSEMBLYREFOS = 37;
		public static final int MONO_TABLE_FILE = 38;
		public static final int MONO_TABLE_EXPORTEDTYPE = 39;
		public static final int MONO_TABLE_MANIFESTRESOURCE = 40;
		public static final int MONO_TABLE_NESTEDCLASS = 41;
		/// 0x2a
		public static final int MONO_TABLE_GENERICPARAM = 42;
		public static final int MONO_TABLE_METHODSPEC = 43;
		public static final int MONO_TABLE_GENERICPARAMCONSTRAINT = 44;
	}
	/// enum values
	public static interface MonoTokenType {
		public static final int MONO_TOKEN_MODULE = 0;
		public static final int MONO_TOKEN_TYPE_REF = 16777216;
		public static final int MONO_TOKEN_TYPE_DEF = 33554432;
		public static final int MONO_TOKEN_FIELD_DEF = 67108864;
		public static final int MONO_TOKEN_METHOD_DEF = 100663296;
		public static final int MONO_TOKEN_PARAM_DEF = 134217728;
		public static final int MONO_TOKEN_INTERFACE_IMPL = 150994944;
		public static final int MONO_TOKEN_MEMBER_REF = 167772160;
		public static final int MONO_TOKEN_CUSTOM_ATTRIBUTE = 201326592;
		public static final int MONO_TOKEN_PERMISSION = 234881024;
		public static final int MONO_TOKEN_SIGNATURE = 285212672;
		public static final int MONO_TOKEN_EVENT = 335544320;
		public static final int MONO_TOKEN_PROPERTY = 385875968;
		public static final int MONO_TOKEN_MODULE_REF = 436207616;
		public static final int MONO_TOKEN_TYPE_SPEC = 452984832;
		public static final int MONO_TOKEN_ASSEMBLY = 536870912;
		public static final int MONO_TOKEN_ASSEMBLY_REF = 587202560;
		public static final int MONO_TOKEN_FILE = 637534208;
		public static final int MONO_TOKEN_EXPORTED_TYPE = 654311424;
		public static final int MONO_TOKEN_MANIFEST_RESOURCE = 671088640;
		public static final int MONO_TOKEN_GENERIC_PARAM = 704643072;
		public static final int MONO_TOKEN_METHOD_SPEC = 721420288;
		/// These do not match metadata tables directly
		public static final int MONO_TOKEN_STRING = 1879048192;
		public static final int MONO_TOKEN_NAME = 1895825408;
		public static final int MONO_TOKEN_BASE_TYPE = 1912602624;
	}
	/// enum values
	public static interface MonoProfileFlags {
		public static final int MONO_PROFILE_NONE = 0;
		public static final int MONO_PROFILE_APPDOMAIN_EVENTS = 1 << 0;
		public static final int MONO_PROFILE_ASSEMBLY_EVENTS = 1 << 1;
		public static final int MONO_PROFILE_MODULE_EVENTS = 1 << 2;
		public static final int MONO_PROFILE_CLASS_EVENTS = 1 << 3;
		public static final int MONO_PROFILE_JIT_COMPILATION = 1 << 4;
		public static final int MONO_PROFILE_INLINING = 1 << 5;
		public static final int MONO_PROFILE_EXCEPTIONS = 1 << 6;
		public static final int MONO_PROFILE_ALLOCATIONS = 1 << 7;
		public static final int MONO_PROFILE_GC = 1 << 8;
		public static final int MONO_PROFILE_THREADS = 1 << 9;
		public static final int MONO_PROFILE_REMOTING = 1 << 10;
		public static final int MONO_PROFILE_TRANSITIONS = 1 << 11;
		public static final int MONO_PROFILE_ENTER_LEAVE = 1 << 12;
		public static final int MONO_PROFILE_COVERAGE = 1 << 13;
		public static final int MONO_PROFILE_INS_COVERAGE = 1 << 14;
		public static final int MONO_PROFILE_STATISTICAL = 1 << 15;
		public static final int MONO_PROFILE_METHOD_EVENTS = 1 << 16;
	}
	/// enum values
	public static interface MonoProfileResult {
		public static final int MONO_PROFILE_OK = 0;
		public static final int MONO_PROFILE_FAILED = 1;
	}
	/// enum values
	public static interface MonoGCEvent {
		public static final int MONO_GC_EVENT_START = 0;
		public static final int MONO_GC_EVENT_MARK_START = 1;
		public static final int MONO_GC_EVENT_MARK_END = 2;
		public static final int MONO_GC_EVENT_RECLAIM_START = 3;
		public static final int MONO_GC_EVENT_RECLAIM_END = 4;
		public static final int MONO_GC_EVENT_END = 5;
		public static final int MONO_GC_EVENT_PRE_STOP_WORLD = 6;
		public static final int MONO_GC_EVENT_POST_STOP_WORLD = 7;
		public static final int MONO_GC_EVENT_PRE_START_WORLD = 8;
		public static final int MONO_GC_EVENT_POST_START_WORLD = 9;
	}
	public static final int MONO_FLOW_NEXT = 0;
	public static final int MONO_FLOW_BRANCH = 1;
	public static final int MONO_FLOW_COND_BRANCH = 2;
	public static final int MONO_FLOW_ERROR = 3;
	public static final int MONO_FLOW_CALL = 4;
	public static final int MONO_FLOW_RETURN = 5;
	public static final int MONO_FLOW_META = 6;
	public static final int MonoInlineNone = 0;
	public static final int MonoInlineType = 1;
	public static final int MonoInlineField = 2;
	public static final int MonoInlineMethod = 3;
	public static final int MonoInlineTok = 4;
	public static final int MonoInlineString = 5;
	public static final int MonoInlineSig = 6;
	public static final int MonoInlineVar = 7;
	public static final int MonoShortInlineVar = 8;
	public static final int MonoInlineBrTarget = 9;
	public static final int MonoShortInlineBrTarget = 10;
	public static final int MonoInlineSwitch = 11;
	public static final int MonoInlineR = 12;
	public static final int MonoShortInlineR = 13;
	public static final int MonoInlineI = 14;
	public static final int MonoShortInlineI = 15;
	public static final int MonoInlineI8 = 16;
	/// enum values
	public static interface MonoImageOpenStatus {
		public static final int MONO_IMAGE_OK = 0;
		public static final int MONO_IMAGE_ERROR_ERRNO = 1;
		public static final int MONO_IMAGE_MISSING_ASSEMBLYREF = 2;
		public static final int MONO_IMAGE_IMAGE_INVALID = 3;
	}
	/// enum values
	public static interface MonoResolveTokenError {
		public static final int ResolveTokenError_OutOfRange = 0;
		public static final int ResolveTokenError_BadTable = 1;
		public static final int ResolveTokenError_Other = 2;
	}
	public static final int MONO_DECLSEC_FLAG_REQUEST = 1;
	public static final int MONO_DECLSEC_FLAG_DEMAND = 2;
	public static final int MONO_DECLSEC_FLAG_ASSERT = 4;
	public static final int MONO_DECLSEC_FLAG_DENY = 8;
	public static final int MONO_DECLSEC_FLAG_PERMITONLY = 16;
	public static final int MONO_DECLSEC_FLAG_LINKDEMAND = 32;
	public static final int MONO_DECLSEC_FLAG_INHERITANCEDEMAND = 64;
	public static final int MONO_DECLSEC_FLAG_REQUEST_MINIMUM = 128;
	public static final int MONO_DECLSEC_FLAG_REQUEST_OPTIONAL = 256;
	public static final int MONO_DECLSEC_FLAG_REQUEST_REFUSE = 512;
	public static final int MONO_DECLSEC_FLAG_PREJIT_GRANT = 1024;
	public static final int MONO_DECLSEC_FLAG_PREJIT_DENY = 2048;
	public static final int MONO_DECLSEC_FLAG_NONCAS_DEMAND = 4096;
	public static final int MONO_DECLSEC_FLAG_NONCAS_LINKDEMAND = 8192;
	public static final int MONO_DECLSEC_FLAG_NONCAS_INHERITANCEDEMAND = 16384;
	public static final int MONO_DECLSEC_FLAG_LINKDEMAND_CHOICE = 32768;
	public static final int MONO_DECLSEC_FLAG_INHERITANCEDEMAND_CHOICE = 65536;
	public static final int MONO_DECLSEC_FLAG_DEMAND_CHOICE = 131072;
	/// enum values
	public static interface MonoVerifyStatus {
		public static final int MONO_VERIFY_OK = 0;
		public static final int MONO_VERIFY_ERROR = 1;
		public static final int MONO_VERIFY_WARNING = 2;
		public static final int MONO_VERIFY_CLS = 4;
		public static final int MONO_VERIFY_ALL = 7;
		/// Status signaling code that is not verifiable.
		public static final int MONO_VERIFY_NOT_VERIFIABLE = 8;
		/**
		 * Abort the verification if the code is not verifiable.<br>
		 * The standard behavior is to abort if the code is not valid.
		 */
		public static final int MONO_VERIFY_FAIL_FAST = 16;
		/**
		 * Perform less verification of the code. This flag should be used<br>
		 * if one wants the verifier to be more compatible to the MS runtime.<br>
		 * Mind that this is not to be more compatible with MS peverify, but<br>
		 * with the runtime itself, that has a less strict verifier.
		 */
		public static final int MONO_VERIFY_NON_STRICT = 32;
		/// Skip all visibility related checks
		public static final int MONO_VERIFY_SKIP_VISIBILITY = 64;
		/// Skip all visibility related checks
		public static final int MONO_VERIFY_REPORT_ALL_ERRORS = 128;
	}
	public static final int MONO_ZERO_LEN_ARRAY = 1;
	public static final int _MONO_METADATA_LOADER_H_ = 1;
	public static final int MONO_DEBUG_VAR_ADDRESS_MODE_FLAGS = -268435456;
	public static final int MONO_DEBUG_VAR_ADDRESS_MODE_REGISTER = 0;
	public static final int MONO_DEBUG_VAR_ADDRESS_MODE_REGOFFSET = 268435456;
	public static final int MONO_DEBUG_VAR_ADDRESS_MODE_TWO_REGISTERS = 536870912;
	public static final int MONO_DEBUG_VAR_ADDRESS_MODE_DEAD = 805306368;
	public static final int MONO_DEBUGGER_MAJOR_VERSION = 80;
	public static final int MONO_DEBUGGER_MINOR_VERSION = 1;
	public static final long MONO_DEBUGGER_MAGIC = 8862914395094897703L;
	public static final int MONO_CUSTOM_PREFIX = 240;
	public static final int MONO_PUBLIC_KEY_TOKEN_LENGTH = 17;
	public static final int MONO_DECLSEC_ACTION_MIN = 1;
	public static final int MONO_DECLSEC_ACTION_MAX = 18;
	public static final int MONO_SYMBOL_FILE_MAJOR_VERSION = 50;
	public static final int MONO_SYMBOL_FILE_MINOR_VERSION = 0;
	public static final long MONO_SYMBOL_FILE_MAGIC = 5037318119232611860L;
	public interface MonoThreadStartCB extends com.sun.jna.Callback {
		void invoke(com.ochafik.lang.jnaerator.runtime.NativeSize tid, com.sun.jna.Pointer stack_start, com.sun.jna.Pointer func);
	}
	public interface MonoThreadAttachCB extends com.sun.jna.Callback {
		void invoke(com.ochafik.lang.jnaerator.runtime.NativeSize tid, com.sun.jna.Pointer stack_start);
	}
	public interface MonoDomainFunc extends com.sun.jna.Callback {
		void invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.sun.jna.Pointer user_data);
	}
	/// Installs a function which is called each time a new assembly is loaded.
	public interface MonoAssemblyLoadFunc extends com.sun.jna.Callback {
		void invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly assembly, com.sun.jna.Pointer user_data);
	}
	/**
	 * Installs a new function which is used to search the list of loaded <br>
	 * assemblies for a given assembly name.
	 */
	public interface MonoAssemblySearchFunc extends com.sun.jna.Callback {
		com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly invoke(com.nativelibs4java.mono.library.MonoAssemblyName aname, com.sun.jna.Pointer user_data);
	}
	/**
	 * Installs a function which is called before a new assembly is loaded<br>
	 * The hook are invoked from last hooked to first. If any of them returns<br>
	 * a non-null value, that will be the value returned in mono_assembly_load
	 */
	public interface MonoAssemblyPreLoadFunc extends com.sun.jna.Callback {
		com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly invoke(com.nativelibs4java.mono.library.MonoAssemblyName aname, com.sun.jna.ptr.PointerByReference assemblies_path, com.sun.jna.Pointer user_data);
	}
	public interface MonoInvokeFunc extends com.sun.jna.Callback {
		com.nativelibs4java.mono.library.MonoObject invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, com.sun.jna.Pointer obj, com.sun.jna.ptr.PointerByReference params, com.sun.jna.ptr.PointerByReference exc);
	}
	public interface MonoCompileFunc extends com.sun.jna.Callback {
		com.sun.jna.Pointer invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method);
	}
	public interface MonoMainThreadFunc extends com.sun.jna.Callback {
		void invoke(com.sun.jna.Pointer user_data);
	}
	public interface MonoStackWalk extends com.sun.jna.Callback {
		boolean invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, int native_offset, int il_offset, boolean managed, com.sun.jna.Pointer data);
	}
	public interface MonoThreadCleanupFunc extends com.sun.jna.Callback {
		void invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoThread thread);
	}
	/// This callback should return TRUE if the runtime must wait for the thread, FALSE otherwise
	public interface MonoThreadManageCallback extends com.sun.jna.Callback {
		boolean invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoThread thread);
	}
	public interface MonoDisIndenter extends com.sun.jna.Callback {
		com.sun.jna.Pointer invoke(com.nativelibs4java.mono.library.MonoDisHelper dh, com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, int ip_offset);
	}
	public interface MonoDisTokener extends com.sun.jna.Callback {
		com.sun.jna.Pointer invoke(com.nativelibs4java.mono.library.MonoDisHelper dh, com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, int token);
	}
	public interface MonoProfileFunc extends com.sun.jna.Callback {
		void invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoProfiler prof);
	}
	public interface MonoProfileAppDomainFunc extends com.sun.jna.Callback {
		void invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoProfiler prof, com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain);
	}
	public interface MonoProfileMethodFunc extends com.sun.jna.Callback {
		void invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoProfiler prof, com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method);
	}
	public interface MonoProfileClassFunc extends com.sun.jna.Callback {
		void invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoProfiler prof, com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	}
	public interface MonoProfileModuleFunc extends com.sun.jna.Callback {
		void invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoProfiler prof, com.nativelibs4java.mono.library.MonoLibrary.MonoImage module);
	}
	public interface MonoProfileAssemblyFunc extends com.sun.jna.Callback {
		void invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoProfiler prof, com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly assembly);
	}
	public interface MonoProfileExceptionFunc extends com.sun.jna.Callback {
		void invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoProfiler prof, com.nativelibs4java.mono.library.MonoObject object);
	}
	public interface MonoProfileExceptionClauseFunc extends com.sun.jna.Callback {
		void invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoProfiler prof, com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, int clause_type, int clause_num);
	}
	public interface MonoProfileAppDomainResult extends com.sun.jna.Callback {
		void invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoProfiler prof, com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, int result);
	}
	public interface MonoProfileMethodResult extends com.sun.jna.Callback {
		void invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoProfiler prof, com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, int result);
	}
	public interface MonoProfileJitResult extends com.sun.jna.Callback {
		void invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoProfiler prof, com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, com.nativelibs4java.mono.library.MonoLibrary.MonoJitInfo jinfo, int result);
	}
	public interface MonoProfileClassResult extends com.sun.jna.Callback {
		void invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoProfiler prof, com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, int result);
	}
	public interface MonoProfileModuleResult extends com.sun.jna.Callback {
		void invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoProfiler prof, com.nativelibs4java.mono.library.MonoLibrary.MonoImage module, int result);
	}
	public interface MonoProfileAssemblyResult extends com.sun.jna.Callback {
		void invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoProfiler prof, com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly assembly, int result);
	}
	public interface MonoProfileMethodInline extends com.sun.jna.Callback {
		void invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoProfiler prof, com.nativelibs4java.mono.library.MonoLibrary.MonoMethod parent, com.nativelibs4java.mono.library.MonoLibrary.MonoMethod child, com.sun.jna.ptr.IntByReference ok);
	}
	public interface MonoProfileThreadFunc extends com.sun.jna.Callback {
		void invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoProfiler prof, com.ochafik.lang.jnaerator.runtime.NativeSize tid);
	}
	public interface MonoProfileAllocFunc extends com.sun.jna.Callback {
		void invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoProfiler prof, com.nativelibs4java.mono.library.MonoObject obj, com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	}
	public interface MonoProfileStatFunc extends com.sun.jna.Callback {
		void invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoProfiler prof, com.sun.jna.Pointer ip, com.sun.jna.Pointer context);
	}
	public interface MonoProfileStatCallChainFunc extends com.sun.jna.Callback {
		void invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoProfiler prof, int call_chain_depth, com.sun.jna.ptr.PointerByReference ip, com.sun.jna.Pointer context);
	}
	public interface MonoProfileGCFunc extends com.sun.jna.Callback {
		/// @param event @see MonoGCEvent
		void invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoProfiler prof, int event, int generation);
	}
	public interface MonoProfileGCResizeFunc extends com.sun.jna.Callback {
		void invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoProfiler prof, long new_size);
	}
	public interface MonoProfileCoverageFilterFunc extends com.sun.jna.Callback {
		boolean invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoProfiler prof, com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method);
	}
	public interface MonoProfileCoverageFunc extends com.sun.jna.Callback {
		void invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoProfiler prof, com.nativelibs4java.mono.library.MonoProfileCoverageEntry entry);
	}
	/// Original signature : <code>void mono_metadata_init()</code>
	void mono_metadata_init();
	/**
	 * Original signature : <code>void mono_metadata_decode_row(const MonoTableInfo*, int, int*, int)</code><br>
	 * @deprecated use the safer methods {@link #mono_metadata_decode_row(com.nativelibs4java.mono.library.MonoLibrary.MonoTableInfo, int, java.nio.IntBuffer, int)} and {@link #mono_metadata_decode_row(com.nativelibs4java.mono.library.MonoLibrary.MonoTableInfo, int, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@java.lang.Deprecated
	void mono_metadata_decode_row(com.nativelibs4java.mono.library.MonoLibrary.MonoTableInfo t, int idx, com.sun.jna.ptr.IntByReference res, int res_size);
	/// Original signature : <code>void mono_metadata_decode_row(const MonoTableInfo*, int, int*, int)</code>
	void mono_metadata_decode_row(com.nativelibs4java.mono.library.MonoLibrary.MonoTableInfo t, int idx, java.nio.IntBuffer res, int res_size);
	/// Original signature : <code>int mono_metadata_decode_row_col(const MonoTableInfo*, int, guint)</code>
	int mono_metadata_decode_row_col(com.nativelibs4java.mono.library.MonoLibrary.MonoTableInfo t, int idx, int col);
	/**
	 * Original signature : <code>int mono_metadata_compute_size(MonoImage*, int, int*)</code><br>
	 * @deprecated use the safer methods {@link #mono_metadata_compute_size(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, int, java.nio.IntBuffer)} and {@link #mono_metadata_compute_size(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated
	int mono_metadata_compute_size(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int tableindex, com.sun.jna.ptr.IntByReference result_bitfield);
	/// Original signature : <code>int mono_metadata_compute_size(MonoImage*, int, int*)</code>
	int mono_metadata_compute_size(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int tableindex, java.nio.IntBuffer result_bitfield);
	/// Original signature : <code>char* mono_metadata_locate(MonoImage*, int, int)</code>
	java.lang.String mono_metadata_locate(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int table, int idx);
	/// Original signature : <code>char* mono_metadata_locate_token(MonoImage*, int)</code>
	java.lang.String mono_metadata_locate_token(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int token);
	/// Original signature : <code>char* mono_metadata_string_heap(MonoImage*, int)</code>
	java.lang.String mono_metadata_string_heap(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int table_index);
	/// Original signature : <code>char* mono_metadata_blob_heap(MonoImage*, int)</code>
	java.lang.String mono_metadata_blob_heap(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int table_index);
	/// Original signature : <code>char* mono_metadata_user_string(MonoImage*, int)</code>
	java.lang.String mono_metadata_user_string(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int table_index);
	/// Original signature : <code>char* mono_metadata_guid_heap(MonoImage*, int)</code>
	java.lang.String mono_metadata_guid_heap(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int table_index);
	/// Original signature : <code>int mono_metadata_typedef_from_field(MonoImage*, int)</code>
	int mono_metadata_typedef_from_field(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int table_index);
	/// Original signature : <code>int mono_metadata_typedef_from_method(MonoImage*, int)</code>
	int mono_metadata_typedef_from_method(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int table_index);
	/// Original signature : <code>int mono_metadata_nested_in_typedef(MonoImage*, int)</code>
	int mono_metadata_nested_in_typedef(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int table_index);
	/// Original signature : <code>int mono_metadata_nesting_typedef(MonoImage*, int, int)</code>
	int mono_metadata_nesting_typedef(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int table_index, int start_index);
	/**
	 * Original signature : <code>MonoClass** mono_metadata_interfaces_from_typedef(MonoImage*, int, guint*)</code><br>
	 * @deprecated use the safer methods {@link #mono_metadata_interfaces_from_typedef(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, int, java.nio.IntBuffer)} and {@link #mono_metadata_interfaces_from_typedef(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass[] mono_metadata_interfaces_from_typedef(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int table_index, com.sun.jna.ptr.IntByReference count);
	/// Original signature : <code>MonoClass** mono_metadata_interfaces_from_typedef(MonoImage*, int, guint*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass[] mono_metadata_interfaces_from_typedef(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int table_index, java.nio.IntBuffer count);
	/**
	 * Original signature : <code>int mono_metadata_events_from_typedef(MonoImage*, int, guint*)</code><br>
	 * @deprecated use the safer methods {@link #mono_metadata_events_from_typedef(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, int, java.nio.IntBuffer)} and {@link #mono_metadata_events_from_typedef(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated
	int mono_metadata_events_from_typedef(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int table_index, com.sun.jna.ptr.IntByReference end_idx);
	/// Original signature : <code>int mono_metadata_events_from_typedef(MonoImage*, int, guint*)</code>
	int mono_metadata_events_from_typedef(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int table_index, java.nio.IntBuffer end_idx);
	/**
	 * Original signature : <code>int mono_metadata_methods_from_event(MonoImage*, int, guint*)</code><br>
	 * @deprecated use the safer methods {@link #mono_metadata_methods_from_event(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, int, java.nio.IntBuffer)} and {@link #mono_metadata_methods_from_event(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated
	int mono_metadata_methods_from_event(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int table_index, com.sun.jna.ptr.IntByReference end);
	/// Original signature : <code>int mono_metadata_methods_from_event(MonoImage*, int, guint*)</code>
	int mono_metadata_methods_from_event(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int table_index, java.nio.IntBuffer end);
	/**
	 * Original signature : <code>int mono_metadata_properties_from_typedef(MonoImage*, int, guint*)</code><br>
	 * @deprecated use the safer methods {@link #mono_metadata_properties_from_typedef(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, int, java.nio.IntBuffer)} and {@link #mono_metadata_properties_from_typedef(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated
	int mono_metadata_properties_from_typedef(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int table_index, com.sun.jna.ptr.IntByReference end);
	/// Original signature : <code>int mono_metadata_properties_from_typedef(MonoImage*, int, guint*)</code>
	int mono_metadata_properties_from_typedef(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int table_index, java.nio.IntBuffer end);
	/**
	 * Original signature : <code>int mono_metadata_methods_from_property(MonoImage*, int, guint*)</code><br>
	 * @deprecated use the safer methods {@link #mono_metadata_methods_from_property(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, int, java.nio.IntBuffer)} and {@link #mono_metadata_methods_from_property(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated
	int mono_metadata_methods_from_property(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int table_index, com.sun.jna.ptr.IntByReference end);
	/// Original signature : <code>int mono_metadata_methods_from_property(MonoImage*, int, guint*)</code>
	int mono_metadata_methods_from_property(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int table_index, java.nio.IntBuffer end);
	/**
	 * Original signature : <code>int mono_metadata_packing_from_typedef(MonoImage*, int, int*, int*)</code><br>
	 * @deprecated use the safer methods {@link #mono_metadata_packing_from_typedef(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, int, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #mono_metadata_packing_from_typedef(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated
	int mono_metadata_packing_from_typedef(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int table_index, com.sun.jna.ptr.IntByReference packing, com.sun.jna.ptr.IntByReference size);
	/// Original signature : <code>int mono_metadata_packing_from_typedef(MonoImage*, int, int*, int*)</code>
	int mono_metadata_packing_from_typedef(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int table_index, java.nio.IntBuffer packing, java.nio.IntBuffer size);
	/// Original signature : <code>char* mono_metadata_get_marshal_info(MonoImage*, int, bool)</code>
	java.lang.String mono_metadata_get_marshal_info(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int idx, boolean is_field);
	/// Original signature : <code>int mono_metadata_custom_attrs_from_index(MonoImage*, int)</code>
	int mono_metadata_custom_attrs_from_index(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int cattr_index);
	/**
	 * Original signature : <code>MonoMarshalSpec* mono_metadata_parse_marshal_spec(MonoImage*, const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_metadata_parse_marshal_spec(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, java.lang.String)} and {@link #mono_metadata_parse_marshal_spec(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoMarshalSpec mono_metadata_parse_marshal_spec(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, com.sun.jna.Pointer ptr);
	/// Original signature : <code>MonoMarshalSpec* mono_metadata_parse_marshal_spec(MonoImage*, const char*)</code>
	com.nativelibs4java.mono.library.MonoMarshalSpec mono_metadata_parse_marshal_spec(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, java.lang.String ptr);
	/// Original signature : <code>void mono_metadata_free_marshal_spec(MonoMarshalSpec*)</code>
	void mono_metadata_free_marshal_spec(com.nativelibs4java.mono.library.MonoMarshalSpec spec);
	/// Original signature : <code>int mono_metadata_implmap_from_method(MonoImage*, int)</code>
	int mono_metadata_implmap_from_method(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int method_idx);
	/**
	 * Original signature : <code>void mono_metadata_field_info(MonoImage*, int, int*, int*, MonoMarshalSpec**)</code><br>
	 * @deprecated use the safer methods {@link #mono_metadata_field_info(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, int, java.nio.IntBuffer, java.nio.IntBuffer, com.nativelibs4java.mono.library.MonoMarshalSpec.ByReference[])} and {@link #mono_metadata_field_info(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.nativelibs4java.mono.library.MonoMarshalSpec.ByReference[])} instead
	 */
	@java.lang.Deprecated
	void mono_metadata_field_info(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int table_index, com.sun.jna.ptr.IntByReference offset, com.sun.jna.ptr.IntByReference rva, com.sun.jna.ptr.PointerByReference marshal_spec);
	/// Original signature : <code>void mono_metadata_field_info(MonoImage*, int, int*, int*, MonoMarshalSpec**)</code>
	void mono_metadata_field_info(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int table_index, java.nio.IntBuffer offset, java.nio.IntBuffer rva, com.nativelibs4java.mono.library.MonoMarshalSpec.ByReference marshal_spec[]);
	/// Original signature : <code>void mono_metadata_field_info(MonoImage*, int, int*, int*, MonoMarshalSpec**)</code>
	void mono_metadata_field_info(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int table_index, com.sun.jna.ptr.IntByReference offset, com.sun.jna.ptr.IntByReference rva, com.nativelibs4java.mono.library.MonoMarshalSpec.ByReference marshal_spec[]);
	/// Original signature : <code>int mono_metadata_get_constant_index(MonoImage*, int, int)</code>
	int mono_metadata_get_constant_index(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int token, int hint);
	/**
	 * Functions to extract information from the Blobs<br>
	 * Original signature : <code>int mono_metadata_decode_value(const char*, const char**)</code><br>
	 * @deprecated use the safer methods {@link #mono_metadata_decode_value(java.lang.String, java.lang.String[])} and {@link #mono_metadata_decode_value(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@java.lang.Deprecated
	int mono_metadata_decode_value(com.sun.jna.Pointer ptr, com.sun.jna.ptr.PointerByReference rptr);
	/**
	 * Functions to extract information from the Blobs<br>
	 * Original signature : <code>int mono_metadata_decode_value(const char*, const char**)</code>
	 */
	int mono_metadata_decode_value(java.lang.String ptr, java.lang.String rptr[]);
	/**
	 * Original signature : <code>int mono_metadata_decode_signed_value(const char*, const char**)</code><br>
	 * @deprecated use the safer methods {@link #mono_metadata_decode_signed_value(java.lang.String, java.lang.String[])} and {@link #mono_metadata_decode_signed_value(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@java.lang.Deprecated
	int mono_metadata_decode_signed_value(com.sun.jna.Pointer ptr, com.sun.jna.ptr.PointerByReference rptr);
	/// Original signature : <code>int mono_metadata_decode_signed_value(const char*, const char**)</code>
	int mono_metadata_decode_signed_value(java.lang.String ptr, java.lang.String rptr[]);
	/**
	 * Original signature : <code>int mono_metadata_decode_blob_size(const char*, const char**)</code><br>
	 * @deprecated use the safer methods {@link #mono_metadata_decode_blob_size(java.lang.String, java.lang.String[])} and {@link #mono_metadata_decode_blob_size(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@java.lang.Deprecated
	int mono_metadata_decode_blob_size(com.sun.jna.Pointer ptr, com.sun.jna.ptr.PointerByReference rptr);
	/// Original signature : <code>int mono_metadata_decode_blob_size(const char*, const char**)</code>
	int mono_metadata_decode_blob_size(java.lang.String ptr, java.lang.String rptr[]);
	/**
	 * Original signature : <code>void mono_metadata_encode_value(int, char*, char**)</code><br>
	 * @deprecated use the safer methods {@link #mono_metadata_encode_value(int, java.nio.ByteBuffer, java.lang.String[])} and {@link #mono_metadata_encode_value(int, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@java.lang.Deprecated
	void mono_metadata_encode_value(int value, com.sun.jna.Pointer bug, com.sun.jna.ptr.PointerByReference endbuf);
	/// Original signature : <code>void mono_metadata_encode_value(int, char*, char**)</code>
	void mono_metadata_encode_value(int value, java.nio.ByteBuffer bug, java.lang.String endbuf[]);
	/// Original signature : <code>bool mono_type_is_byref(MonoType*)</code>
	boolean mono_type_is_byref(com.nativelibs4java.mono.library.MonoType type);
	/// Original signature : <code>int mono_type_get_type(MonoType*)</code>
	int mono_type_get_type(com.nativelibs4java.mono.library.MonoType type);
	/**
	 * For MONO_TYPE_FNPTR<br>
	 * Original signature : <code>MonoMethodSignature* mono_type_get_signature(MonoType*)</code>
	 */
	com.nativelibs4java.mono.library.MonoMethodSignature mono_type_get_signature(com.nativelibs4java.mono.library.MonoType type);
	/**
	 * For MONO_TYPE_CLASS, VALUETYPE<br>
	 * Original signature : <code>MonoClass* mono_type_get_class(MonoType*)</code>
	 */
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_type_get_class(com.nativelibs4java.mono.library.MonoType type);
	/// Original signature : <code>MonoArrayType* mono_type_get_array_type(MonoType*)</code>
	com.nativelibs4java.mono.library.MonoArrayType mono_type_get_array_type(com.nativelibs4java.mono.library.MonoType type);
	/**
	 * For MONO_TYPE_PTR<br>
	 * Original signature : <code>MonoType* mono_type_get_ptr_type(MonoType*)</code>
	 */
	com.nativelibs4java.mono.library.MonoType mono_type_get_ptr_type(com.nativelibs4java.mono.library.MonoType type);
	/// Original signature : <code>MonoClass* mono_type_get_modifiers(MonoType*, bool*, void**)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_type_get_modifiers(com.nativelibs4java.mono.library.MonoType type, boolean is_required, com.sun.jna.ptr.PointerByReference iter);
	/// Original signature : <code>MonoType* mono_signature_get_return_type(MonoMethodSignature*)</code>
	com.nativelibs4java.mono.library.MonoType mono_signature_get_return_type(com.nativelibs4java.mono.library.MonoMethodSignature sig);
	/// Original signature : <code>MonoType* mono_signature_get_params(MonoMethodSignature*, void**)</code>
	com.nativelibs4java.mono.library.MonoType mono_signature_get_params(com.nativelibs4java.mono.library.MonoMethodSignature sig, com.sun.jna.ptr.PointerByReference iter);
	/// Original signature : <code>int mono_signature_get_param_count(MonoMethodSignature*)</code>
	int mono_signature_get_param_count(com.nativelibs4java.mono.library.MonoMethodSignature sig);
	/// Original signature : <code>int mono_signature_get_call_conv(MonoMethodSignature*)</code>
	int mono_signature_get_call_conv(com.nativelibs4java.mono.library.MonoMethodSignature sig);
	/// Original signature : <code>int mono_signature_vararg_start(MonoMethodSignature*)</code>
	int mono_signature_vararg_start(com.nativelibs4java.mono.library.MonoMethodSignature sig);
	/// Original signature : <code>bool mono_signature_is_instance(MonoMethodSignature*)</code>
	boolean mono_signature_is_instance(com.nativelibs4java.mono.library.MonoMethodSignature sig);
	/// Original signature : <code>bool mono_signature_explicit_this(MonoMethodSignature*)</code>
	boolean mono_signature_explicit_this(com.nativelibs4java.mono.library.MonoMethodSignature sig);
	/**
	 * Original signature : <code>int mono_metadata_parse_typedef_or_ref(MonoImage*, const char*, const char**)</code><br>
	 * @deprecated use the safer methods {@link #mono_metadata_parse_typedef_or_ref(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, java.lang.String, java.lang.String[])} and {@link #mono_metadata_parse_typedef_or_ref(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@java.lang.Deprecated
	int mono_metadata_parse_typedef_or_ref(com.nativelibs4java.mono.library.MonoLibrary.MonoImage m, com.sun.jna.Pointer ptr, com.sun.jna.ptr.PointerByReference rptr);
	/// Original signature : <code>int mono_metadata_parse_typedef_or_ref(MonoImage*, const char*, const char**)</code>
	int mono_metadata_parse_typedef_or_ref(com.nativelibs4java.mono.library.MonoLibrary.MonoImage m, java.lang.String ptr, java.lang.String rptr[]);
	/**
	 * Original signature : <code>int mono_metadata_parse_custom_mod(MonoImage*, MonoCustomMod*, const char*, const char**)</code><br>
	 * @deprecated use the safer methods {@link #mono_metadata_parse_custom_mod(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, com.nativelibs4java.mono.library.MonoCustomMod, java.lang.String, java.lang.String[])} and {@link #mono_metadata_parse_custom_mod(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, com.nativelibs4java.mono.library.MonoCustomMod, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@java.lang.Deprecated
	int mono_metadata_parse_custom_mod(com.nativelibs4java.mono.library.MonoLibrary.MonoImage m, com.nativelibs4java.mono.library.MonoCustomMod dest, com.sun.jna.Pointer ptr, com.sun.jna.ptr.PointerByReference rptr);
	/// Original signature : <code>int mono_metadata_parse_custom_mod(MonoImage*, MonoCustomMod*, const char*, const char**)</code>
	int mono_metadata_parse_custom_mod(com.nativelibs4java.mono.library.MonoLibrary.MonoImage m, com.nativelibs4java.mono.library.MonoCustomMod dest, java.lang.String ptr, java.lang.String rptr[]);
	/**
	 * Original signature : <code>MonoArrayType* mono_metadata_parse_array(MonoImage*, const char*, const char**)</code><br>
	 * @deprecated use the safer methods {@link #mono_metadata_parse_array(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, java.lang.String, java.lang.String[])} and {@link #mono_metadata_parse_array(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoArrayType mono_metadata_parse_array(com.nativelibs4java.mono.library.MonoLibrary.MonoImage m, com.sun.jna.Pointer ptr, com.sun.jna.ptr.PointerByReference rptr);
	/// Original signature : <code>MonoArrayType* mono_metadata_parse_array(MonoImage*, const char*, const char**)</code>
	com.nativelibs4java.mono.library.MonoArrayType mono_metadata_parse_array(com.nativelibs4java.mono.library.MonoLibrary.MonoImage m, java.lang.String ptr, java.lang.String rptr[]);
	/// Original signature : <code>void mono_metadata_free_array(MonoArrayType*)</code>
	void mono_metadata_free_array(com.nativelibs4java.mono.library.MonoArrayType array);
	/**
	 * Original signature : <code>MonoType* mono_metadata_parse_type(MonoImage*, MonoParseTypeMode, short, const char*, const char**)</code><br>
	 * @deprecated use the safer methods {@link #mono_metadata_parse_type(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, int, short, java.lang.String, java.lang.String[])} and {@link #mono_metadata_parse_type(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, int, short, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead<br>
	 * @param mode @see MonoParseTypeMode
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoType mono_metadata_parse_type(com.nativelibs4java.mono.library.MonoLibrary.MonoImage m, int mode, short opt_attrs, com.sun.jna.Pointer ptr, com.sun.jna.ptr.PointerByReference rptr);
	/**
	 * Original signature : <code>MonoType* mono_metadata_parse_type(MonoImage*, MonoParseTypeMode, short, const char*, const char**)</code><br>
	 * @param mode @see MonoParseTypeMode
	 */
	com.nativelibs4java.mono.library.MonoType mono_metadata_parse_type(com.nativelibs4java.mono.library.MonoLibrary.MonoImage m, int mode, short opt_attrs, java.lang.String ptr, java.lang.String rptr[]);
	/**
	 * Original signature : <code>MonoType* mono_metadata_parse_param(MonoImage*, const char*, const char**)</code><br>
	 * @deprecated use the safer methods {@link #mono_metadata_parse_param(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, java.lang.String, java.lang.String[])} and {@link #mono_metadata_parse_param(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoType mono_metadata_parse_param(com.nativelibs4java.mono.library.MonoLibrary.MonoImage m, com.sun.jna.Pointer ptr, com.sun.jna.ptr.PointerByReference rptr);
	/// Original signature : <code>MonoType* mono_metadata_parse_param(MonoImage*, const char*, const char**)</code>
	com.nativelibs4java.mono.library.MonoType mono_metadata_parse_param(com.nativelibs4java.mono.library.MonoLibrary.MonoImage m, java.lang.String ptr, java.lang.String rptr[]);
	/**
	 * Original signature : <code>MonoType* mono_metadata_parse_ret_type(MonoImage*, const char*, const char**)</code><br>
	 * @deprecated use the safer methods {@link #mono_metadata_parse_ret_type(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, java.lang.String, java.lang.String[])} and {@link #mono_metadata_parse_ret_type(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoType mono_metadata_parse_ret_type(com.nativelibs4java.mono.library.MonoLibrary.MonoImage m, com.sun.jna.Pointer ptr, com.sun.jna.ptr.PointerByReference rptr);
	/// Original signature : <code>MonoType* mono_metadata_parse_ret_type(MonoImage*, const char*, const char**)</code>
	com.nativelibs4java.mono.library.MonoType mono_metadata_parse_ret_type(com.nativelibs4java.mono.library.MonoLibrary.MonoImage m, java.lang.String ptr, java.lang.String rptr[]);
	/**
	 * Original signature : <code>MonoType* mono_metadata_parse_field_type(MonoImage*, short, const char*, const char**)</code><br>
	 * @deprecated use the safer methods {@link #mono_metadata_parse_field_type(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, short, java.lang.String, java.lang.String[])} and {@link #mono_metadata_parse_field_type(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, short, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoType mono_metadata_parse_field_type(com.nativelibs4java.mono.library.MonoLibrary.MonoImage m, short field_flags, com.sun.jna.Pointer ptr, com.sun.jna.ptr.PointerByReference rptr);
	/// Original signature : <code>MonoType* mono_metadata_parse_field_type(MonoImage*, short, const char*, const char**)</code>
	com.nativelibs4java.mono.library.MonoType mono_metadata_parse_field_type(com.nativelibs4java.mono.library.MonoLibrary.MonoImage m, short field_flags, java.lang.String ptr, java.lang.String rptr[]);
	/// Original signature : <code>MonoType* mono_type_create_from_typespec(MonoImage*, int)</code>
	com.nativelibs4java.mono.library.MonoType mono_type_create_from_typespec(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int type_spec);
	/// Original signature : <code>void mono_metadata_free_type(MonoType*)</code>
	void mono_metadata_free_type(com.nativelibs4java.mono.library.MonoType type);
	/**
	 * Original signature : <code>int mono_type_size(MonoType*, int*)</code><br>
	 * @deprecated use the safer methods {@link #mono_type_size(com.nativelibs4java.mono.library.MonoType, java.nio.IntBuffer)} and {@link #mono_type_size(com.nativelibs4java.mono.library.MonoType, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated
	int mono_type_size(com.nativelibs4java.mono.library.MonoType type, com.sun.jna.ptr.IntByReference alignment);
	/// Original signature : <code>int mono_type_size(MonoType*, int*)</code>
	int mono_type_size(com.nativelibs4java.mono.library.MonoType type, java.nio.IntBuffer alignment);
	/**
	 * Original signature : <code>int mono_type_stack_size(MonoType*, int*)</code><br>
	 * @deprecated use the safer methods {@link #mono_type_stack_size(com.nativelibs4java.mono.library.MonoType, java.nio.IntBuffer)} and {@link #mono_type_stack_size(com.nativelibs4java.mono.library.MonoType, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated
	int mono_type_stack_size(com.nativelibs4java.mono.library.MonoType type, com.sun.jna.ptr.IntByReference alignment);
	/// Original signature : <code>int mono_type_stack_size(MonoType*, int*)</code>
	int mono_type_stack_size(com.nativelibs4java.mono.library.MonoType type, java.nio.IntBuffer alignment);
	/// Original signature : <code>bool mono_type_generic_inst_is_valuetype(MonoType*)</code>
	boolean mono_type_generic_inst_is_valuetype(com.nativelibs4java.mono.library.MonoType type);
	/// Original signature : <code>bool mono_metadata_generic_class_is_valuetype(MonoGenericClass*)</code>
	boolean mono_metadata_generic_class_is_valuetype(com.nativelibs4java.mono.library.MonoLibrary.MonoGenericClass gclass);
	/// Original signature : <code>guint mono_metadata_generic_class_hash(MonoGenericClass*)</code>
	int mono_metadata_generic_class_hash(com.nativelibs4java.mono.library.MonoLibrary.MonoGenericClass gclass);
	/// Original signature : <code>bool mono_metadata_generic_class_equal(MonoGenericClass*, MonoGenericClass*)</code>
	boolean mono_metadata_generic_class_equal(com.nativelibs4java.mono.library.MonoLibrary.MonoGenericClass g1, com.nativelibs4java.mono.library.MonoLibrary.MonoGenericClass g2);
	/// Original signature : <code>guint mono_metadata_type_hash(MonoType*)</code>
	int mono_metadata_type_hash(com.nativelibs4java.mono.library.MonoType t1);
	/// Original signature : <code>bool mono_metadata_type_equal(MonoType*, MonoType*)</code>
	boolean mono_metadata_type_equal(com.nativelibs4java.mono.library.MonoType t1, com.nativelibs4java.mono.library.MonoType t2);
	/// Original signature : <code>MonoMethodSignature* mono_metadata_signature_alloc(MonoImage*, int)</code>
	com.nativelibs4java.mono.library.MonoMethodSignature mono_metadata_signature_alloc(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int nparams);
	/// Original signature : <code>MonoMethodSignature* mono_metadata_signature_dup(MonoMethodSignature*)</code>
	com.nativelibs4java.mono.library.MonoMethodSignature mono_metadata_signature_dup(com.nativelibs4java.mono.library.MonoMethodSignature sig);
	/// Original signature : <code>MonoMethodSignature* mono_metadata_parse_signature(MonoImage*, int)</code>
	com.nativelibs4java.mono.library.MonoMethodSignature mono_metadata_parse_signature(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int token);
	/**
	 * Original signature : <code>MonoMethodSignature* mono_metadata_parse_method_signature(MonoImage*, int, const char*, const char**)</code><br>
	 * @deprecated use the safer methods {@link #mono_metadata_parse_method_signature(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, int, java.lang.String, java.lang.String[])} and {@link #mono_metadata_parse_method_signature(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, int, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoMethodSignature mono_metadata_parse_method_signature(com.nativelibs4java.mono.library.MonoLibrary.MonoImage m, int def, com.sun.jna.Pointer ptr, com.sun.jna.ptr.PointerByReference rptr);
	/// Original signature : <code>MonoMethodSignature* mono_metadata_parse_method_signature(MonoImage*, int, const char*, const char**)</code>
	com.nativelibs4java.mono.library.MonoMethodSignature mono_metadata_parse_method_signature(com.nativelibs4java.mono.library.MonoLibrary.MonoImage m, int def, java.lang.String ptr, java.lang.String rptr[]);
	/// Original signature : <code>void mono_metadata_free_method_signature(MonoMethodSignature*)</code>
	void mono_metadata_free_method_signature(com.nativelibs4java.mono.library.MonoMethodSignature method);
	/// Original signature : <code>bool mono_metadata_signature_equal(MonoMethodSignature*, MonoMethodSignature*)</code>
	boolean mono_metadata_signature_equal(com.nativelibs4java.mono.library.MonoMethodSignature sig1, com.nativelibs4java.mono.library.MonoMethodSignature sig2);
	/// Original signature : <code>guint mono_signature_hash(MonoMethodSignature*)</code>
	int mono_signature_hash(com.nativelibs4java.mono.library.MonoMethodSignature sig);
	/**
	 * Original signature : <code>MonoMethodHeader* mono_metadata_parse_mh(MonoImage*, const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_metadata_parse_mh(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, java.lang.String)} and {@link #mono_metadata_parse_mh(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoMethodHeader mono_metadata_parse_mh(com.nativelibs4java.mono.library.MonoLibrary.MonoImage m, com.sun.jna.Pointer ptr);
	/// Original signature : <code>MonoMethodHeader* mono_metadata_parse_mh(MonoImage*, const char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoMethodHeader mono_metadata_parse_mh(com.nativelibs4java.mono.library.MonoLibrary.MonoImage m, java.lang.String ptr);
	/// Original signature : <code>void mono_metadata_free_mh(MonoMethodHeader*)</code>
	void mono_metadata_free_mh(com.nativelibs4java.mono.library.MonoLibrary.MonoMethodHeader mh);
	/**
	 * MonoMethodHeader acccessors<br>
	 * Original signature : <code>char* mono_method_header_get_code(MonoMethodHeader*, int*, int*)</code><br>
	 * @deprecated use the safer methods {@link #mono_method_header_get_code(com.nativelibs4java.mono.library.MonoLibrary.MonoMethodHeader, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #mono_method_header_get_code(com.nativelibs4java.mono.library.MonoLibrary.MonoMethodHeader, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated
	com.sun.jna.Pointer mono_method_header_get_code(com.nativelibs4java.mono.library.MonoLibrary.MonoMethodHeader header, com.sun.jna.ptr.IntByReference code_size, com.sun.jna.ptr.IntByReference max_stack);
	/**
	 * MonoMethodHeader acccessors<br>
	 * Original signature : <code>char* mono_method_header_get_code(MonoMethodHeader*, int*, int*)</code>
	 */
	com.sun.jna.Pointer mono_method_header_get_code(com.nativelibs4java.mono.library.MonoLibrary.MonoMethodHeader header, java.nio.IntBuffer code_size, java.nio.IntBuffer max_stack);
	/**
	 * Original signature : <code>MonoType** mono_method_header_get_locals(MonoMethodHeader*, int*, bool*)</code><br>
	 * @deprecated use the safer methods {@link #mono_method_header_get_locals(com.nativelibs4java.mono.library.MonoLibrary.MonoMethodHeader, java.nio.IntBuffer, boolean)} and {@link #mono_method_header_get_locals(com.nativelibs4java.mono.library.MonoLibrary.MonoMethodHeader, com.sun.jna.ptr.IntByReference, boolean)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoType.ByReference[] mono_method_header_get_locals(com.nativelibs4java.mono.library.MonoLibrary.MonoMethodHeader header, com.sun.jna.ptr.IntByReference num_locals, boolean init_locals);
	/// Original signature : <code>MonoType** mono_method_header_get_locals(MonoMethodHeader*, int*, bool*)</code>
	com.nativelibs4java.mono.library.MonoType.ByReference[] mono_method_header_get_locals(com.nativelibs4java.mono.library.MonoLibrary.MonoMethodHeader header, java.nio.IntBuffer num_locals, boolean init_locals);
	/// Original signature : <code>int mono_method_header_get_num_clauses(MonoMethodHeader*)</code>
	int mono_method_header_get_num_clauses(com.nativelibs4java.mono.library.MonoLibrary.MonoMethodHeader header);
	/// Original signature : <code>int mono_method_header_get_clauses(MonoMethodHeader*, MonoMethod*, void**, MonoExceptionClause*)</code>
	int mono_method_header_get_clauses(com.nativelibs4java.mono.library.MonoLibrary.MonoMethodHeader header, com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, com.sun.jna.ptr.PointerByReference iter, com.nativelibs4java.mono.library.MonoExceptionClause clause);
	/**
	 * Original signature : <code>int mono_type_to_unmanaged(MonoType*, MonoMarshalSpec*, bool, bool, MonoMarshalConv*)</code><br>
	 * @deprecated use the safer methods {@link #mono_type_to_unmanaged(com.nativelibs4java.mono.library.MonoType, com.nativelibs4java.mono.library.MonoMarshalSpec, boolean, boolean, java.nio.IntBuffer)} and {@link #mono_type_to_unmanaged(com.nativelibs4java.mono.library.MonoType, com.nativelibs4java.mono.library.MonoMarshalSpec, boolean, boolean, com.sun.jna.ptr.IntByReference)} instead<br>
	 * @param conv @see MonoMarshalConv
	 */
	@java.lang.Deprecated
	int mono_type_to_unmanaged(com.nativelibs4java.mono.library.MonoType type, com.nativelibs4java.mono.library.MonoMarshalSpec mspec, boolean as_field, boolean unicode, com.sun.jna.ptr.IntByReference conv);
	/// Original signature : <code>int mono_type_to_unmanaged(MonoType*, MonoMarshalSpec*, bool, bool, MonoMarshalConv*)</code>
	int mono_type_to_unmanaged(com.nativelibs4java.mono.library.MonoType type, com.nativelibs4java.mono.library.MonoMarshalSpec mspec, boolean as_field, boolean unicode, java.nio.IntBuffer conv);
	/// Original signature : <code>int mono_metadata_token_from_dor(int)</code>
	int mono_metadata_token_from_dor(int dor_index);
	/**
	 * Original signature : <code>char* mono_guid_to_string(const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_guid_to_string(java.lang.String)} and {@link #mono_guid_to_string(com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.sun.jna.Pointer mono_guid_to_string(com.sun.jna.Pointer guid);
	/// Original signature : <code>char* mono_guid_to_string(const char*)</code>
	com.sun.jna.Pointer mono_guid_to_string(java.lang.String guid);
	/// Original signature : <code>int mono_metadata_declsec_from_index(MonoImage*, int)</code>
	int mono_metadata_declsec_from_index(com.nativelibs4java.mono.library.MonoLibrary.MonoImage meta, int idx);
	/// Original signature : <code>int mono_metadata_translate_token_index(MonoImage*, int, int)</code>
	int mono_metadata_translate_token_index(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int table, int idx);
	/**
	 * Original signature : <code>void mono_metadata_decode_table_row(MonoImage*, int, int, int*, int)</code><br>
	 * @deprecated use the safer methods {@link #mono_metadata_decode_table_row(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, int, int, java.nio.IntBuffer, int)} and {@link #mono_metadata_decode_table_row(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, int, int, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@java.lang.Deprecated
	void mono_metadata_decode_table_row(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int table, int idx, com.sun.jna.ptr.IntByReference res, int res_size);
	/// Original signature : <code>void mono_metadata_decode_table_row(MonoImage*, int, int, int*, int)</code>
	void mono_metadata_decode_table_row(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int table, int idx, java.nio.IntBuffer res, int res_size);
	/// Original signature : <code>int mono_metadata_decode_table_row_col(MonoImage*, int, int, guint)</code>
	int mono_metadata_decode_table_row_col(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int table, int idx, int col);
	/**
	 * Original signature : <code>MonoDomain* mono_init(const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_init(java.lang.String)} and {@link #mono_init(com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoDomain mono_init(com.sun.jna.Pointer filename);
	/// Original signature : <code>MonoDomain* mono_init(const char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoDomain mono_init(java.lang.String filename);
	/**
	 * Original signature : <code>MonoDomain* mono_init_from_assembly(const char*, const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_init_from_assembly(java.lang.String, java.lang.String)} and {@link #mono_init_from_assembly(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoDomain mono_init_from_assembly(com.sun.jna.Pointer domain_name, com.sun.jna.Pointer filename);
	/// Original signature : <code>MonoDomain* mono_init_from_assembly(const char*, const char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoDomain mono_init_from_assembly(java.lang.String domain_name, java.lang.String filename);
	/**
	 * Original signature : <code>MonoDomain* mono_init_version(const char*, const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_init_version(java.lang.String, java.lang.String)} and {@link #mono_init_version(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoDomain mono_init_version(com.sun.jna.Pointer domain_name, com.sun.jna.Pointer version);
	/// Original signature : <code>MonoDomain* mono_init_version(const char*, const char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoDomain mono_init_version(java.lang.String domain_name, java.lang.String version);
	/// Original signature : <code>MonoDomain* mono_get_root_domain()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoDomain mono_get_root_domain();
	/// Original signature : <code>void mono_runtime_init(MonoDomain*, MonoThreadStartCB, MonoThreadAttachCB)</code>
	void mono_runtime_init(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.nativelibs4java.mono.library.MonoLibrary.MonoThreadStartCB start_cb, com.nativelibs4java.mono.library.MonoLibrary.MonoThreadAttachCB attach_cb);
	/// Original signature : <code>void mono_runtime_cleanup(MonoDomain*)</code>
	void mono_runtime_cleanup(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain);
	/// Original signature : <code>void mono_install_runtime_cleanup(MonoDomainFunc)</code>
	void mono_install_runtime_cleanup(com.nativelibs4java.mono.library.MonoLibrary.MonoDomainFunc func);
	/// Original signature : <code>void mono_runtime_quit()</code>
	void mono_runtime_quit();
	/// Original signature : <code>void mono_runtime_set_shutting_down()</code>
	void mono_runtime_set_shutting_down();
	/// Original signature : <code>bool mono_runtime_is_shutting_down()</code>
	boolean mono_runtime_is_shutting_down();
	/// Original signature : <code>char* mono_check_corlib_version()</code>
	java.lang.String mono_check_corlib_version();
	/// Original signature : <code>MonoDomain* mono_domain_create()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoDomain mono_domain_create();
	/**
	 * Original signature : <code>MonoDomain* mono_domain_create_appdomain(char*, char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_domain_create_appdomain(java.nio.ByteBuffer, java.nio.ByteBuffer)} and {@link #mono_domain_create_appdomain(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoDomain mono_domain_create_appdomain(com.sun.jna.Pointer friendly_name, com.sun.jna.Pointer configuration_file);
	/// Original signature : <code>MonoDomain* mono_domain_create_appdomain(char*, char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoDomain mono_domain_create_appdomain(java.nio.ByteBuffer friendly_name, java.nio.ByteBuffer configuration_file);
	/// Original signature : <code>MonoDomain* mono_domain_get()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoDomain mono_domain_get();
	/// Original signature : <code>MonoDomain* mono_domain_get_by_id(int)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoDomain mono_domain_get_by_id(int domainid);
	/// Original signature : <code>int mono_domain_get_id(MonoDomain*)</code>
	int mono_domain_get_id(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain);
	/// Original signature : <code>bool mono_domain_set(MonoDomain*, bool)</code>
	boolean mono_domain_set(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, boolean force);
	/// Original signature : <code>void mono_domain_set_internal(MonoDomain*)</code>
	void mono_domain_set_internal(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain);
	/// Original signature : <code>void mono_domain_unload(MonoDomain*)</code>
	void mono_domain_unload(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain);
	/// Original signature : <code>bool mono_domain_is_unloading(MonoDomain*)</code>
	boolean mono_domain_is_unloading(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain);
	/// Original signature : <code>MonoDomain* mono_domain_from_appdomain(MonoAppDomain*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoDomain mono_domain_from_appdomain(com.nativelibs4java.mono.library.MonoLibrary.MonoAppDomain appdomain);
	/// Original signature : <code>void mono_domain_foreach(MonoDomainFunc, void*)</code>
	void mono_domain_foreach(com.nativelibs4java.mono.library.MonoLibrary.MonoDomainFunc func, com.sun.jna.Pointer user_data);
	/**
	 * Original signature : <code>MonoAssembly* mono_domain_assembly_open(MonoDomain*, const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_domain_assembly_open(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain, java.lang.String)} and {@link #mono_domain_assembly_open(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly mono_domain_assembly_open(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.sun.jna.Pointer name);
	/// Original signature : <code>MonoAssembly* mono_domain_assembly_open(MonoDomain*, const char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly mono_domain_assembly_open(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, java.lang.String name);
	/// Original signature : <code>bool mono_domain_finalize(MonoDomain*, int)</code>
	boolean mono_domain_finalize(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, int timeout);
	/// Original signature : <code>void mono_domain_free(MonoDomain*, bool)</code>
	void mono_domain_free(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, boolean force);
	/// Original signature : <code>bool mono_domain_has_type_resolve(MonoDomain*)</code>
	boolean mono_domain_has_type_resolve(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain);
	/**
	 * Original signature : <code>MonoReflectionAssembly* mono_domain_try_type_resolve(MonoDomain*, char*, MonoObject*)</code><br>
	 * @deprecated use the safer methods {@link #mono_domain_try_type_resolve(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain, java.nio.ByteBuffer, com.nativelibs4java.mono.library.MonoObject)} and {@link #mono_domain_try_type_resolve(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain, com.sun.jna.Pointer, com.nativelibs4java.mono.library.MonoObject)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoReflectionAssembly mono_domain_try_type_resolve(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.sun.jna.Pointer name, com.nativelibs4java.mono.library.MonoObject tb);
	/// Original signature : <code>MonoReflectionAssembly* mono_domain_try_type_resolve(MonoDomain*, char*, MonoObject*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoReflectionAssembly mono_domain_try_type_resolve(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, java.nio.ByteBuffer name, com.nativelibs4java.mono.library.MonoObject tb);
	/// Original signature : <code>bool mono_domain_owns_vtable_slot(MonoDomain*, void*)</code>
	boolean mono_domain_owns_vtable_slot(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.sun.jna.Pointer vtable_slot);
	/// Original signature : <code>void mono_context_init(MonoDomain*)</code>
	void mono_context_init(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain);
	/// Original signature : <code>void mono_context_set(MonoAppContext*)</code>
	void mono_context_set(com.nativelibs4java.mono.library.MonoLibrary.MonoAppContext new_context);
	/// Original signature : <code>MonoAppContext* mono_context_get()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoAppContext mono_context_get();
	/**
	 * Original signature : <code>MonoJitInfo* mono_jit_info_table_find(MonoDomain*, char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_jit_info_table_find(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain, java.nio.ByteBuffer)} and {@link #mono_jit_info_table_find(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoJitInfo mono_jit_info_table_find(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.sun.jna.Pointer addr);
	/// Original signature : <code>MonoJitInfo* mono_jit_info_table_find(MonoDomain*, char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoJitInfo mono_jit_info_table_find(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, java.nio.ByteBuffer addr);
	/// Original signature : <code>void* mono_jit_info_get_code_start(MonoJitInfo*)</code>
	com.sun.jna.Pointer mono_jit_info_get_code_start(com.nativelibs4java.mono.library.MonoLibrary.MonoJitInfo ji);
	/// Original signature : <code>int mono_jit_info_get_code_size(MonoJitInfo*)</code>
	int mono_jit_info_get_code_size(com.nativelibs4java.mono.library.MonoLibrary.MonoJitInfo ji);
	/// Original signature : <code>MonoMethod* mono_jit_info_get_method(MonoJitInfo*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoMethod mono_jit_info_get_method(com.nativelibs4java.mono.library.MonoLibrary.MonoJitInfo ji);
	/// Original signature : <code>MonoImage* mono_get_corlib()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoImage mono_get_corlib();
	/// Original signature : <code>MonoClass* mono_get_object_class()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_get_object_class();
	/// Original signature : <code>MonoClass* mono_get_byte_class()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_get_byte_class();
	/// Original signature : <code>MonoClass* mono_get_void_class()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_get_void_class();
	/// Original signature : <code>MonoClass* mono_get_boolean_class()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_get_boolean_class();
	/// Original signature : <code>MonoClass* mono_get_sbyte_class()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_get_sbyte_class();
	/// Original signature : <code>MonoClass* mono_get_int16_class()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_get_int16_class();
	/// Original signature : <code>MonoClass* mono_get_uint16_class()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_get_uint16_class();
	/// Original signature : <code>MonoClass* mono_get_int32_class()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_get_int32_class();
	/// Original signature : <code>MonoClass* mono_get_uint32_class()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_get_uint32_class();
	/// Original signature : <code>MonoClass* mono_get_intptr_class()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_get_intptr_class();
	/// Original signature : <code>MonoClass* mono_get_uintptr_class()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_get_uintptr_class();
	/// Original signature : <code>MonoClass* mono_get_int64_class()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_get_int64_class();
	/// Original signature : <code>MonoClass* mono_get_uint64_class()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_get_uint64_class();
	/// Original signature : <code>MonoClass* mono_get_single_class()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_get_single_class();
	/// Original signature : <code>MonoClass* mono_get_double_class()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_get_double_class();
	/// Original signature : <code>MonoClass* mono_get_char_class()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_get_char_class();
	/// Original signature : <code>MonoClass* mono_get_string_class()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_get_string_class();
	/// Original signature : <code>MonoClass* mono_get_enum_class()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_get_enum_class();
	/// Original signature : <code>MonoClass* mono_get_array_class()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_get_array_class();
	/// Original signature : <code>MonoClass* mono_get_thread_class()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_get_thread_class();
	/// Original signature : <code>MonoClass* mono_get_exception_class()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_get_exception_class();
	/// Original signature : <code>void mono_assemblies_init()</code>
	void mono_assemblies_init();
	/// Original signature : <code>void mono_assemblies_cleanup()</code>
	void mono_assemblies_cleanup();
	/**
	 * Original signature : <code>MonoAssembly* mono_assembly_open(const char*, MonoImageOpenStatus*)</code><br>
	 * @deprecated use the safer methods {@link #mono_assembly_open(java.lang.String, java.nio.IntBuffer)} and {@link #mono_assembly_open(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead<br>
	 * @param status @see MonoImageOpenStatus
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly mono_assembly_open(com.sun.jna.Pointer filename, com.sun.jna.ptr.IntByReference status);
	/// Original signature : <code>MonoAssembly* mono_assembly_open(const char*, MonoImageOpenStatus*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly mono_assembly_open(java.lang.String filename, java.nio.IntBuffer status);
	/**
	 * Original signature : <code>MonoAssembly* mono_assembly_open_full(const char*, MonoImageOpenStatus*, bool)</code><br>
	 * @deprecated use the safer methods {@link #mono_assembly_open_full(java.lang.String, java.nio.IntBuffer, boolean)} and {@link #mono_assembly_open_full(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, boolean)} instead<br>
	 * @param status @see MonoImageOpenStatus
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly mono_assembly_open_full(com.sun.jna.Pointer filename, com.sun.jna.ptr.IntByReference status, boolean refonly);
	/// Original signature : <code>MonoAssembly* mono_assembly_open_full(const char*, MonoImageOpenStatus*, bool)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly mono_assembly_open_full(java.lang.String filename, java.nio.IntBuffer status, boolean refonly);
	/**
	 * Original signature : <code>MonoAssembly* mono_assembly_load(MonoAssemblyName*, const char*, MonoImageOpenStatus*)</code><br>
	 * @deprecated use the safer methods {@link #mono_assembly_load(com.nativelibs4java.mono.library.MonoAssemblyName, java.lang.String, java.nio.IntBuffer)} and {@link #mono_assembly_load(com.nativelibs4java.mono.library.MonoAssemblyName, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead<br>
	 * @param status @see MonoImageOpenStatus
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly mono_assembly_load(com.nativelibs4java.mono.library.MonoAssemblyName aname, com.sun.jna.Pointer basedir, com.sun.jna.ptr.IntByReference status);
	/// Original signature : <code>MonoAssembly* mono_assembly_load(MonoAssemblyName*, const char*, MonoImageOpenStatus*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly mono_assembly_load(com.nativelibs4java.mono.library.MonoAssemblyName aname, java.lang.String basedir, java.nio.IntBuffer status);
	/**
	 * Original signature : <code>MonoAssembly* mono_assembly_load_full(MonoAssemblyName*, const char*, MonoImageOpenStatus*, bool)</code><br>
	 * @deprecated use the safer methods {@link #mono_assembly_load_full(com.nativelibs4java.mono.library.MonoAssemblyName, java.lang.String, java.nio.IntBuffer, boolean)} and {@link #mono_assembly_load_full(com.nativelibs4java.mono.library.MonoAssemblyName, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, boolean)} instead<br>
	 * @param status @see MonoImageOpenStatus
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly mono_assembly_load_full(com.nativelibs4java.mono.library.MonoAssemblyName aname, com.sun.jna.Pointer basedir, com.sun.jna.ptr.IntByReference status, boolean refonly);
	/// Original signature : <code>MonoAssembly* mono_assembly_load_full(MonoAssemblyName*, const char*, MonoImageOpenStatus*, bool)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly mono_assembly_load_full(com.nativelibs4java.mono.library.MonoAssemblyName aname, java.lang.String basedir, java.nio.IntBuffer status, boolean refonly);
	/**
	 * Original signature : <code>MonoAssembly* mono_assembly_load_from(MonoImage*, const char*, MonoImageOpenStatus*)</code><br>
	 * @deprecated use the safer methods {@link #mono_assembly_load_from(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, java.lang.String, java.nio.IntBuffer)} and {@link #mono_assembly_load_from(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead<br>
	 * @param status @see MonoImageOpenStatus
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly mono_assembly_load_from(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, com.sun.jna.Pointer fname, com.sun.jna.ptr.IntByReference status);
	/// Original signature : <code>MonoAssembly* mono_assembly_load_from(MonoImage*, const char*, MonoImageOpenStatus*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly mono_assembly_load_from(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, java.lang.String fname, java.nio.IntBuffer status);
	/**
	 * Original signature : <code>MonoAssembly* mono_assembly_load_from_full(MonoImage*, const char*, MonoImageOpenStatus*, bool)</code><br>
	 * @deprecated use the safer methods {@link #mono_assembly_load_from_full(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, java.lang.String, java.nio.IntBuffer, boolean)} and {@link #mono_assembly_load_from_full(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, boolean)} instead<br>
	 * @param status @see MonoImageOpenStatus
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly mono_assembly_load_from_full(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, com.sun.jna.Pointer fname, com.sun.jna.ptr.IntByReference status, boolean refonly);
	/// Original signature : <code>MonoAssembly* mono_assembly_load_from_full(MonoImage*, const char*, MonoImageOpenStatus*, bool)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly mono_assembly_load_from_full(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, java.lang.String fname, java.nio.IntBuffer status, boolean refonly);
	/**
	 * Original signature : <code>MonoAssembly* mono_assembly_load_with_partial_name(const char*, MonoImageOpenStatus*)</code><br>
	 * @deprecated use the safer methods {@link #mono_assembly_load_with_partial_name(java.lang.String, java.nio.IntBuffer)} and {@link #mono_assembly_load_with_partial_name(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead<br>
	 * @param status @see MonoImageOpenStatus
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly mono_assembly_load_with_partial_name(com.sun.jna.Pointer name, com.sun.jna.ptr.IntByReference status);
	/// Original signature : <code>MonoAssembly* mono_assembly_load_with_partial_name(const char*, MonoImageOpenStatus*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly mono_assembly_load_with_partial_name(java.lang.String name, java.nio.IntBuffer status);
	/// Original signature : <code>MonoAssembly* mono_assembly_loaded(MonoAssemblyName*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly mono_assembly_loaded(com.nativelibs4java.mono.library.MonoAssemblyName aname);
	/// Original signature : <code>MonoAssembly* mono_assembly_loaded_full(MonoAssemblyName*, bool)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly mono_assembly_loaded_full(com.nativelibs4java.mono.library.MonoAssemblyName aname, boolean refonly);
	/// Original signature : <code>void mono_assembly_get_assemblyref(MonoImage*, int, MonoAssemblyName*)</code>
	void mono_assembly_get_assemblyref(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int index, com.nativelibs4java.mono.library.MonoAssemblyName aname);
	/// Original signature : <code>void mono_assembly_load_reference(MonoImage*, int)</code>
	void mono_assembly_load_reference(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int index);
	/**
	 * Original signature : <code>void mono_assembly_load_references(MonoImage*, MonoImageOpenStatus*)</code><br>
	 * @deprecated use the safer methods {@link #mono_assembly_load_references(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, java.nio.IntBuffer)} and {@link #mono_assembly_load_references(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, com.sun.jna.ptr.IntByReference)} instead<br>
	 * @param status @see MonoImageOpenStatus
	 */
	@java.lang.Deprecated
	void mono_assembly_load_references(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, com.sun.jna.ptr.IntByReference status);
	/// Original signature : <code>void mono_assembly_load_references(MonoImage*, MonoImageOpenStatus*)</code>
	void mono_assembly_load_references(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, java.nio.IntBuffer status);
	/// Original signature : <code>MonoImage* mono_assembly_load_module(MonoAssembly*, int)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoImage mono_assembly_load_module(com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly assembly, int idx);
	/// Original signature : <code>void mono_assembly_close(MonoAssembly*)</code>
	void mono_assembly_close(com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly assembly);
	/**
	 * Original signature : <code>void mono_assembly_setrootdir(const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_assembly_setrootdir(java.lang.String)} and {@link #mono_assembly_setrootdir(com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	void mono_assembly_setrootdir(com.sun.jna.Pointer root_dir);
	/// Original signature : <code>void mono_assembly_setrootdir(const char*)</code>
	void mono_assembly_setrootdir(java.lang.String root_dir);
	/// Original signature : <code>char* mono_assembly_getrootdir()</code>
	java.lang.String mono_assembly_getrootdir();
	/// Original signature : <code>void mono_assembly_set_main(MonoAssembly*)</code>
	void mono_assembly_set_main(com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly assembly);
	/// Original signature : <code>MonoAssembly* mono_assembly_get_main()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly mono_assembly_get_main();
	/// Original signature : <code>MonoImage* mono_assembly_get_image(MonoAssembly*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoImage mono_assembly_get_image(com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly assembly);
	/// Original signature : <code>bool mono_assembly_fill_assembly_name(MonoImage*, MonoAssemblyName*)</code>
	boolean mono_assembly_fill_assembly_name(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, com.nativelibs4java.mono.library.MonoAssemblyName aname);
	/// Original signature : <code>bool mono_assembly_names_equal(MonoAssemblyName*, MonoAssemblyName*)</code>
	boolean mono_assembly_names_equal(com.nativelibs4java.mono.library.MonoAssemblyName l, com.nativelibs4java.mono.library.MonoAssemblyName r);
	/// Original signature : <code>char* mono_stringify_assembly_name(MonoAssemblyName*)</code>
	com.sun.jna.Pointer mono_stringify_assembly_name(com.nativelibs4java.mono.library.MonoAssemblyName aname);
	/// Original signature : <code>void mono_install_assembly_load_hook(MonoAssemblyLoadFunc, void*)</code>
	void mono_install_assembly_load_hook(com.nativelibs4java.mono.library.MonoLibrary.MonoAssemblyLoadFunc func, com.sun.jna.Pointer user_data);
	/// Original signature : <code>void mono_install_assembly_search_hook(MonoAssemblySearchFunc, void*)</code>
	void mono_install_assembly_search_hook(com.nativelibs4java.mono.library.MonoLibrary.MonoAssemblySearchFunc func, com.sun.jna.Pointer user_data);
	/// Original signature : <code>void mono_install_assembly_refonly_search_hook(MonoAssemblySearchFunc, void*)</code>
	void mono_install_assembly_refonly_search_hook(com.nativelibs4java.mono.library.MonoLibrary.MonoAssemblySearchFunc func, com.sun.jna.Pointer user_data);
	/// Original signature : <code>MonoAssembly* mono_assembly_invoke_search_hook(MonoAssemblyName*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly mono_assembly_invoke_search_hook(com.nativelibs4java.mono.library.MonoAssemblyName aname);
	/**
	 * Installs a new search function which is used as a last resort when loading <br>
	 * an assembly fails. This could invoke AssemblyResolve events.<br>
	 * Original signature : <code>void mono_install_assembly_postload_search_hook(MonoAssemblySearchFunc, void*)</code>
	 */
	void mono_install_assembly_postload_search_hook(com.nativelibs4java.mono.library.MonoLibrary.MonoAssemblySearchFunc func, com.sun.jna.Pointer user_data);
	/// Original signature : <code>void mono_install_assembly_postload_refonly_search_hook(MonoAssemblySearchFunc, void*)</code>
	void mono_install_assembly_postload_refonly_search_hook(com.nativelibs4java.mono.library.MonoLibrary.MonoAssemblySearchFunc func, com.sun.jna.Pointer user_data);
	/// Original signature : <code>void mono_install_assembly_preload_hook(MonoAssemblyPreLoadFunc, void*)</code>
	void mono_install_assembly_preload_hook(com.nativelibs4java.mono.library.MonoLibrary.MonoAssemblyPreLoadFunc func, com.sun.jna.Pointer user_data);
	/// Original signature : <code>void mono_install_assembly_refonly_preload_hook(MonoAssemblyPreLoadFunc, void*)</code>
	void mono_install_assembly_refonly_preload_hook(com.nativelibs4java.mono.library.MonoLibrary.MonoAssemblyPreLoadFunc func, com.sun.jna.Pointer user_data);
	/// Original signature : <code>void mono_assembly_invoke_load_hook(MonoAssembly*)</code>
	void mono_assembly_invoke_load_hook(com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly ass);
	/**
	 * Original signature : <code>void mono_register_bundled_assemblies(const MonoBundledAssembly**)</code><br>
	 * @deprecated use the safer method {@link #mono_register_bundled_assemblies(com.nativelibs4java.mono.library.MonoBundledAssembly.ByReference[])} instead
	 */
	@java.lang.Deprecated
	void mono_register_bundled_assemblies(com.sun.jna.ptr.PointerByReference assemblies);
	/// Original signature : <code>void mono_register_bundled_assemblies(const MonoBundledAssembly**)</code>
	void mono_register_bundled_assemblies(com.nativelibs4java.mono.library.MonoBundledAssembly.ByReference assemblies[]);
	/**
	 * Original signature : <code>void mono_register_config_for_assembly(const char*, const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_register_config_for_assembly(java.lang.String, java.lang.String)} and {@link #mono_register_config_for_assembly(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	void mono_register_config_for_assembly(com.sun.jna.Pointer assembly_name, com.sun.jna.Pointer config_xml);
	/// Original signature : <code>void mono_register_config_for_assembly(const char*, const char*)</code>
	void mono_register_config_for_assembly(java.lang.String assembly_name, java.lang.String config_xml);
	/**
	 * Original signature : <code>void mono_register_machine_config(const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_register_machine_config(java.lang.String)} and {@link #mono_register_machine_config(com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	void mono_register_machine_config(com.sun.jna.Pointer config_xml);
	/// Original signature : <code>void mono_register_machine_config(const char*)</code>
	void mono_register_machine_config(java.lang.String config_xml);
	/// Original signature : <code>void mono_set_rootdir()</code>
	void mono_set_rootdir();
	/**
	 * Original signature : <code>void mono_set_dirs(const char*, const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_set_dirs(java.lang.String, java.lang.String)} and {@link #mono_set_dirs(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	void mono_set_dirs(com.sun.jna.Pointer assembly_dir, com.sun.jna.Pointer config_dir);
	/// Original signature : <code>void mono_set_dirs(const char*, const char*)</code>
	void mono_set_dirs(java.lang.String assembly_dir, java.lang.String config_dir);
	/// Original signature : <code>MonoObject* mono_object_new(MonoDomain*, MonoClass*)</code>
	com.nativelibs4java.mono.library.MonoObject mono_object_new(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>MonoObject* mono_object_new_specific(MonoVTable*)</code>
	com.nativelibs4java.mono.library.MonoObject mono_object_new_specific(com.nativelibs4java.mono.library.MonoLibrary.MonoVTable vtable);
	/**
	 * can be used for classes without finalizer in non-profiling mode<br>
	 * Original signature : <code>MonoObject* mono_object_new_fast(MonoVTable*)</code>
	 */
	com.nativelibs4java.mono.library.MonoObject mono_object_new_fast(com.nativelibs4java.mono.library.MonoLibrary.MonoVTable vtable);
	/// Original signature : <code>MonoObject* mono_object_new_alloc_specific(MonoVTable*)</code>
	com.nativelibs4java.mono.library.MonoObject mono_object_new_alloc_specific(com.nativelibs4java.mono.library.MonoLibrary.MonoVTable vtable);
	/// Original signature : <code>MonoObject* mono_object_new_from_token(MonoDomain*, MonoImage*, int)</code>
	com.nativelibs4java.mono.library.MonoObject mono_object_new_from_token(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int token);
	/// Original signature : <code>MonoArray* mono_array_new(MonoDomain*, MonoClass*, mono_array_size_t)</code>
	com.nativelibs4java.mono.library.MonoArray mono_array_new(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.nativelibs4java.mono.library.MonoLibrary.MonoClass eclass, int n);
	/**
	 * Original signature : <code>MonoArray* mono_array_new_full(MonoDomain*, MonoClass*, mono_array_size_t*, mono_array_size_t*)</code><br>
	 * @deprecated use the safer methods {@link #mono_array_new_full(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain, com.nativelibs4java.mono.library.MonoLibrary.MonoClass, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #mono_array_new_full(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain, com.nativelibs4java.mono.library.MonoLibrary.MonoClass, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoArray mono_array_new_full(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.nativelibs4java.mono.library.MonoLibrary.MonoClass array_class, com.sun.jna.ptr.IntByReference lengths, com.sun.jna.ptr.IntByReference lower_bounds);
	/// Original signature : <code>MonoArray* mono_array_new_full(MonoDomain*, MonoClass*, mono_array_size_t*, mono_array_size_t*)</code>
	com.nativelibs4java.mono.library.MonoArray mono_array_new_full(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.nativelibs4java.mono.library.MonoLibrary.MonoClass array_class, java.nio.IntBuffer lengths, java.nio.IntBuffer lower_bounds);
	/// Original signature : <code>MonoArray* mono_array_new_specific(MonoVTable*, mono_array_size_t)</code>
	com.nativelibs4java.mono.library.MonoArray mono_array_new_specific(com.nativelibs4java.mono.library.MonoLibrary.MonoVTable vtable, int n);
	/// Original signature : <code>MonoArray* mono_array_clone(MonoArray*)</code>
	com.nativelibs4java.mono.library.MonoArray mono_array_clone(com.nativelibs4java.mono.library.MonoArray array);
	/**
	 * Original signature : <code>MonoString* mono_string_new_utf16(MonoDomain*, const short*, int)</code><br>
	 * @deprecated use the safer methods {@link #mono_string_new_utf16(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain, short[], int)} and {@link #mono_string_new_utf16(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain, com.sun.jna.ptr.ShortByReference, int)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoString mono_string_new_utf16(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.sun.jna.ptr.ShortByReference text, int len);
	/// Original signature : <code>MonoString* mono_string_new_utf16(MonoDomain*, const short*, int)</code>
	com.nativelibs4java.mono.library.MonoString mono_string_new_utf16(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, short text[], int len);
	/// Original signature : <code>MonoString* mono_string_new_size(MonoDomain*, int)</code>
	com.nativelibs4java.mono.library.MonoString mono_string_new_size(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, int len);
	/// Original signature : <code>MonoString* mono_ldstr(MonoDomain*, MonoImage*, int)</code>
	com.nativelibs4java.mono.library.MonoString mono_ldstr(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int str_index);
	/// Original signature : <code>MonoString* mono_string_is_interned(MonoString*)</code>
	com.nativelibs4java.mono.library.MonoString mono_string_is_interned(com.nativelibs4java.mono.library.MonoString str);
	/// Original signature : <code>MonoString* mono_string_intern(MonoString*)</code>
	com.nativelibs4java.mono.library.MonoString mono_string_intern(com.nativelibs4java.mono.library.MonoString str);
	/**
	 * Original signature : <code>MonoString* mono_string_new(MonoDomain*, const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_string_new(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain, java.lang.String)} and {@link #mono_string_new(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoString mono_string_new(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.sun.jna.Pointer text);
	/// Original signature : <code>MonoString* mono_string_new(MonoDomain*, const char*)</code>
	com.nativelibs4java.mono.library.MonoString mono_string_new(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, java.lang.String text);
	/**
	 * Original signature : <code>MonoString* mono_string_new_wrapper(const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_string_new_wrapper(java.lang.String)} and {@link #mono_string_new_wrapper(com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoString mono_string_new_wrapper(com.sun.jna.Pointer text);
	/// Original signature : <code>MonoString* mono_string_new_wrapper(const char*)</code>
	com.nativelibs4java.mono.library.MonoString mono_string_new_wrapper(java.lang.String text);
	/**
	 * Original signature : <code>MonoString* mono_string_new_len(MonoDomain*, const char*, guint)</code><br>
	 * @deprecated use the safer methods {@link #mono_string_new_len(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain, java.lang.String, int)} and {@link #mono_string_new_len(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain, com.sun.jna.Pointer, int)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoString mono_string_new_len(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.sun.jna.Pointer text, int length);
	/// Original signature : <code>MonoString* mono_string_new_len(MonoDomain*, const char*, guint)</code>
	com.nativelibs4java.mono.library.MonoString mono_string_new_len(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, java.lang.String text, int length);
	/// Original signature : <code>char* mono_string_to_utf8(MonoString*)</code>
	com.sun.jna.Pointer mono_string_to_utf8(com.nativelibs4java.mono.library.MonoString string_obj);
	/// Original signature : <code>gunichar2* mono_string_to_utf16(MonoString*)</code>
	com.sun.jna.ptr.ShortByReference mono_string_to_utf16(com.nativelibs4java.mono.library.MonoString string_obj);
	/**
	 * Original signature : <code>MonoString* mono_string_from_utf16(gunichar2*)</code><br>
	 * @deprecated use the safer methods {@link #mono_string_from_utf16(java.nio.ShortBuffer)} and {@link #mono_string_from_utf16(com.sun.jna.ptr.ShortByReference)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoString mono_string_from_utf16(com.sun.jna.ptr.ShortByReference data);
	/// Original signature : <code>MonoString* mono_string_from_utf16(gunichar2*)</code>
	com.nativelibs4java.mono.library.MonoString mono_string_from_utf16(java.nio.ShortBuffer data);
	/// Original signature : <code>bool mono_string_equal(MonoString*, MonoString*)</code>
	boolean mono_string_equal(com.nativelibs4java.mono.library.MonoString s1, com.nativelibs4java.mono.library.MonoString s2);
	/// Original signature : <code>guint mono_string_hash(MonoString*)</code>
	int mono_string_hash(com.nativelibs4java.mono.library.MonoString s);
	/// Original signature : <code>int mono_object_hash(MonoObject*)</code>
	int mono_object_hash(com.nativelibs4java.mono.library.MonoObject obj);
	/// Original signature : <code>MonoObject* mono_value_box(MonoDomain*, MonoClass*, void*)</code>
	com.nativelibs4java.mono.library.MonoObject mono_value_box(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, com.sun.jna.Pointer val);
	/// Original signature : <code>void mono_value_copy(void*, void*, MonoClass*)</code>
	void mono_value_copy(com.sun.jna.Pointer dest, com.sun.jna.Pointer src, com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>void mono_value_copy_array(MonoArray*, int, void*, int)</code>
	void mono_value_copy_array(com.nativelibs4java.mono.library.MonoArray dest, int dest_idx, com.sun.jna.Pointer src, int count);
	/// Original signature : <code>MonoDomain* mono_object_get_domain(MonoObject*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoDomain mono_object_get_domain(com.nativelibs4java.mono.library.MonoObject obj);
	/// Original signature : <code>MonoClass* mono_object_get_class(MonoObject*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_object_get_class(com.nativelibs4java.mono.library.MonoObject obj);
	/// Original signature : <code>void* mono_object_unbox(MonoObject*)</code>
	com.sun.jna.Pointer mono_object_unbox(com.nativelibs4java.mono.library.MonoObject obj);
	/// Original signature : <code>MonoObject* mono_object_clone(MonoObject*)</code>
	com.nativelibs4java.mono.library.MonoObject mono_object_clone(com.nativelibs4java.mono.library.MonoObject obj);
	/// Original signature : <code>MonoObject* mono_object_isinst(MonoObject*, MonoClass*)</code>
	com.nativelibs4java.mono.library.MonoObject mono_object_isinst(com.nativelibs4java.mono.library.MonoObject obj, com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>MonoObject* mono_object_isinst_mbyref(MonoObject*, MonoClass*)</code>
	com.nativelibs4java.mono.library.MonoObject mono_object_isinst_mbyref(com.nativelibs4java.mono.library.MonoObject obj, com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>MonoObject* mono_object_castclass_mbyref(MonoObject*, MonoClass*)</code>
	com.nativelibs4java.mono.library.MonoObject mono_object_castclass_mbyref(com.nativelibs4java.mono.library.MonoObject obj, com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>bool mono_monitor_try_enter(MonoObject*, int)</code>
	boolean mono_monitor_try_enter(com.nativelibs4java.mono.library.MonoObject obj, int ms);
	/// Original signature : <code>bool mono_monitor_enter(MonoObject*)</code>
	boolean mono_monitor_enter(com.nativelibs4java.mono.library.MonoObject obj);
	/// Original signature : <code>guint mono_object_get_size(MonoObject*)</code>
	int mono_object_get_size(com.nativelibs4java.mono.library.MonoObject o);
	/// Original signature : <code>void mono_monitor_exit(MonoObject*)</code>
	void mono_monitor_exit(com.nativelibs4java.mono.library.MonoObject obj);
	/// Original signature : <code>void mono_raise_exception(MonoException*)</code>
	void mono_raise_exception(com.nativelibs4java.mono.library.MonoLibrary.MonoException ex);
	/// Original signature : <code>void mono_runtime_object_init(MonoObject*)</code>
	void mono_runtime_object_init(com.nativelibs4java.mono.library.MonoObject this_obj);
	/// Original signature : <code>void mono_runtime_class_init(MonoVTable*)</code>
	void mono_runtime_class_init(com.nativelibs4java.mono.library.MonoLibrary.MonoVTable vtable);
	/// Original signature : <code>MonoMethod* mono_object_get_virtual_method(MonoObject*, MonoMethod*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoMethod mono_object_get_virtual_method(com.nativelibs4java.mono.library.MonoObject obj, com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method);
	/**
	 * Original signature : <code>MonoObject* mono_runtime_invoke(MonoMethod*, void*, void**, MonoObject**)</code><br>
	 * @deprecated use the safer method {@link #mono_runtime_invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.nativelibs4java.mono.library.MonoObject.ByReference[])} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoObject mono_runtime_invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, com.sun.jna.Pointer obj, com.sun.jna.ptr.PointerByReference params, com.sun.jna.ptr.PointerByReference exc);
	/// Original signature : <code>MonoObject* mono_runtime_invoke(MonoMethod*, void*, void**, MonoObject**)</code>
	com.nativelibs4java.mono.library.MonoObject mono_runtime_invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, com.sun.jna.Pointer obj, com.sun.jna.ptr.PointerByReference params, com.nativelibs4java.mono.library.MonoObject.ByReference exc[]);
	/// Original signature : <code>MonoMethod* mono_get_delegate_invoke(MonoClass*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoMethod mono_get_delegate_invoke(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/**
	 * Original signature : <code>MonoObject* mono_runtime_delegate_invoke(MonoObject*, void**, MonoObject**)</code><br>
	 * @deprecated use the safer method {@link #mono_runtime_delegate_invoke(com.nativelibs4java.mono.library.MonoObject, com.sun.jna.ptr.PointerByReference, com.nativelibs4java.mono.library.MonoObject.ByReference[])} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoObject mono_runtime_delegate_invoke(com.nativelibs4java.mono.library.MonoObject delegate, com.sun.jna.ptr.PointerByReference params, com.sun.jna.ptr.PointerByReference exc);
	/// Original signature : <code>MonoObject* mono_runtime_delegate_invoke(MonoObject*, void**, MonoObject**)</code>
	com.nativelibs4java.mono.library.MonoObject mono_runtime_delegate_invoke(com.nativelibs4java.mono.library.MonoObject delegate, com.sun.jna.ptr.PointerByReference params, com.nativelibs4java.mono.library.MonoObject.ByReference exc[]);
	/**
	 * Original signature : <code>MonoObject* mono_runtime_invoke_array(MonoMethod*, void*, MonoArray*, MonoObject**)</code><br>
	 * @deprecated use the safer method {@link #mono_runtime_invoke_array(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod, com.sun.jna.Pointer, com.nativelibs4java.mono.library.MonoArray, com.nativelibs4java.mono.library.MonoObject.ByReference[])} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoObject mono_runtime_invoke_array(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, com.sun.jna.Pointer obj, com.nativelibs4java.mono.library.MonoArray params, com.sun.jna.ptr.PointerByReference exc);
	/// Original signature : <code>MonoObject* mono_runtime_invoke_array(MonoMethod*, void*, MonoArray*, MonoObject**)</code>
	com.nativelibs4java.mono.library.MonoObject mono_runtime_invoke_array(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, com.sun.jna.Pointer obj, com.nativelibs4java.mono.library.MonoArray params, com.nativelibs4java.mono.library.MonoObject.ByReference exc[]);
	/// Original signature : <code>void* mono_method_get_unmanaged_thunk(MonoMethod*)</code>
	com.sun.jna.Pointer mono_method_get_unmanaged_thunk(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method);
	/// Original signature : <code>MonoArray* mono_runtime_get_main_args()</code>
	com.nativelibs4java.mono.library.MonoArray mono_runtime_get_main_args();
	/// Original signature : <code>void mono_runtime_exec_managed_code(MonoDomain*, MonoMainThreadFunc, void*)</code>
	void mono_runtime_exec_managed_code(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.nativelibs4java.mono.library.MonoLibrary.MonoMainThreadFunc main_func, com.sun.jna.Pointer main_args);
	/**
	 * Original signature : <code>int mono_runtime_run_main(MonoMethod*, int, char*[], MonoObject**)</code><br>
	 * @deprecated use the safer method {@link #mono_runtime_run_main(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod, int, com.sun.jna.ptr.PointerByReference, com.nativelibs4java.mono.library.MonoObject.ByReference[])} instead
	 */
	@java.lang.Deprecated
	int mono_runtime_run_main(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, int argc, com.sun.jna.ptr.PointerByReference argv, com.sun.jna.ptr.PointerByReference exc);
	/// Original signature : <code>int mono_runtime_run_main(MonoMethod*, int, char*[], MonoObject**)</code>
	int mono_runtime_run_main(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, int argc, com.sun.jna.ptr.PointerByReference argv, com.nativelibs4java.mono.library.MonoObject.ByReference exc[]);
	/**
	 * Original signature : <code>int mono_runtime_exec_main(MonoMethod*, MonoArray*, MonoObject**)</code><br>
	 * @deprecated use the safer method {@link #mono_runtime_exec_main(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod, com.nativelibs4java.mono.library.MonoArray, com.nativelibs4java.mono.library.MonoObject.ByReference[])} instead
	 */
	@java.lang.Deprecated
	int mono_runtime_exec_main(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, com.nativelibs4java.mono.library.MonoArray args, com.sun.jna.ptr.PointerByReference exc);
	/// Original signature : <code>int mono_runtime_exec_main(MonoMethod*, MonoArray*, MonoObject**)</code>
	int mono_runtime_exec_main(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, com.nativelibs4java.mono.library.MonoArray args, com.nativelibs4java.mono.library.MonoObject.ByReference exc[]);
	/// Original signature : <code>void* mono_load_remote_field(MonoObject*, MonoClass*, MonoClassField*, void**)</code>
	com.sun.jna.Pointer mono_load_remote_field(com.nativelibs4java.mono.library.MonoObject this_obj, com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, com.nativelibs4java.mono.library.MonoLibrary.MonoClassField field, com.sun.jna.ptr.PointerByReference res);
	/// Original signature : <code>MonoObject* mono_load_remote_field_new(MonoObject*, MonoClass*, MonoClassField*)</code>
	com.nativelibs4java.mono.library.MonoObject mono_load_remote_field_new(com.nativelibs4java.mono.library.MonoObject this_obj, com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, com.nativelibs4java.mono.library.MonoLibrary.MonoClassField field);
	/// Original signature : <code>void mono_store_remote_field(MonoObject*, MonoClass*, MonoClassField*, void*)</code>
	void mono_store_remote_field(com.nativelibs4java.mono.library.MonoObject this_obj, com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, com.nativelibs4java.mono.library.MonoLibrary.MonoClassField field, com.sun.jna.Pointer val);
	/// Original signature : <code>void mono_store_remote_field_new(MonoObject*, MonoClass*, MonoClassField*, MonoObject*)</code>
	void mono_store_remote_field_new(com.nativelibs4java.mono.library.MonoObject this_obj, com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, com.nativelibs4java.mono.library.MonoLibrary.MonoClassField field, com.nativelibs4java.mono.library.MonoObject arg);
	/// Original signature : <code>void mono_unhandled_exception(MonoObject*)</code>
	void mono_unhandled_exception(com.nativelibs4java.mono.library.MonoObject exc);
	/// Original signature : <code>void mono_print_unhandled_exception(MonoObject*)</code>
	void mono_print_unhandled_exception(com.nativelibs4java.mono.library.MonoObject exc);
	/// Original signature : <code>void* mono_compile_method(MonoMethod*)</code>
	com.sun.jna.Pointer mono_compile_method(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method);
	/// Original signature : <code>MonoRemoteClass* mono_remote_class(MonoDomain*, MonoString*, MonoClass*)</code>
	com.nativelibs4java.mono.library.MonoRemoteClass mono_remote_class(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.nativelibs4java.mono.library.MonoString class_name, com.nativelibs4java.mono.library.MonoLibrary.MonoClass proxy_class);
	/**
	 * accessors for fields and properties<br>
	 * Original signature : <code>void mono_field_set_value(MonoObject*, MonoClassField*, void*)</code>
	 */
	void mono_field_set_value(com.nativelibs4java.mono.library.MonoObject obj, com.nativelibs4java.mono.library.MonoLibrary.MonoClassField field, com.sun.jna.Pointer value);
	/// Original signature : <code>void mono_field_static_set_value(MonoVTable*, MonoClassField*, void*)</code>
	void mono_field_static_set_value(com.nativelibs4java.mono.library.MonoLibrary.MonoVTable vt, com.nativelibs4java.mono.library.MonoLibrary.MonoClassField field, com.sun.jna.Pointer value);
	/// Original signature : <code>void mono_field_get_value(MonoObject*, MonoClassField*, void*)</code>
	void mono_field_get_value(com.nativelibs4java.mono.library.MonoObject obj, com.nativelibs4java.mono.library.MonoLibrary.MonoClassField field, com.sun.jna.Pointer value);
	/// Original signature : <code>void mono_field_static_get_value(MonoVTable*, MonoClassField*, void*)</code>
	void mono_field_static_get_value(com.nativelibs4java.mono.library.MonoLibrary.MonoVTable vt, com.nativelibs4java.mono.library.MonoLibrary.MonoClassField field, com.sun.jna.Pointer value);
	/// Original signature : <code>MonoObject* mono_field_get_value_object(MonoDomain*, MonoClassField*, MonoObject*)</code>
	com.nativelibs4java.mono.library.MonoObject mono_field_get_value_object(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.nativelibs4java.mono.library.MonoLibrary.MonoClassField field, com.nativelibs4java.mono.library.MonoObject obj);
	/**
	 * Original signature : <code>void mono_property_set_value(MonoProperty*, void*, void**, MonoObject**)</code><br>
	 * @deprecated use the safer method {@link #mono_property_set_value(com.nativelibs4java.mono.library.MonoLibrary.MonoProperty, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.nativelibs4java.mono.library.MonoObject.ByReference[])} instead
	 */
	@java.lang.Deprecated
	void mono_property_set_value(com.nativelibs4java.mono.library.MonoLibrary.MonoProperty prop, com.sun.jna.Pointer obj, com.sun.jna.ptr.PointerByReference params, com.sun.jna.ptr.PointerByReference exc);
	/// Original signature : <code>void mono_property_set_value(MonoProperty*, void*, void**, MonoObject**)</code>
	void mono_property_set_value(com.nativelibs4java.mono.library.MonoLibrary.MonoProperty prop, com.sun.jna.Pointer obj, com.sun.jna.ptr.PointerByReference params, com.nativelibs4java.mono.library.MonoObject.ByReference exc[]);
	/**
	 * Original signature : <code>MonoObject* mono_property_get_value(MonoProperty*, void*, void**, MonoObject**)</code><br>
	 * @deprecated use the safer method {@link #mono_property_get_value(com.nativelibs4java.mono.library.MonoLibrary.MonoProperty, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.nativelibs4java.mono.library.MonoObject.ByReference[])} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoObject mono_property_get_value(com.nativelibs4java.mono.library.MonoLibrary.MonoProperty prop, com.sun.jna.Pointer obj, com.sun.jna.ptr.PointerByReference params, com.sun.jna.ptr.PointerByReference exc);
	/// Original signature : <code>MonoObject* mono_property_get_value(MonoProperty*, void*, void**, MonoObject**)</code>
	com.nativelibs4java.mono.library.MonoObject mono_property_get_value(com.nativelibs4java.mono.library.MonoLibrary.MonoProperty prop, com.sun.jna.Pointer obj, com.sun.jna.ptr.PointerByReference params, com.nativelibs4java.mono.library.MonoObject.ByReference exc[]);
	/**
	 * GC handles support <br>
	 * * A handle can be created to refer to a managed object and either prevent it<br>
	 * from being garbage collected or moved or to be able to know if it has been <br>
	 * collected or not (weak references).<br>
	 * mono_gchandle_new () is used to prevent an object from being garbage collected<br>
	 * until mono_gchandle_free() is called. Use a TRUE value for the pinned argument to<br>
	 * prevent the object from being moved (this should be avoided as much as possible <br>
	 * and this should be used only for shorts periods of time or performance will suffer).<br>
	 * To create a weakref use mono_gchandle_new_weakref (): track_resurrection should<br>
	 * usually be false (see the GC docs for more details).<br>
	 * mono_gchandle_get_target () can be used to get the object referenced by both kinds<br>
	 * of handle: for a weakref handle, if an object has been collected, it will return NULL.<br>
	 * Original signature : <code>int mono_gchandle_new(MonoObject*, bool)</code>
	 */
	int mono_gchandle_new(com.nativelibs4java.mono.library.MonoObject obj, boolean pinned);
	/// Original signature : <code>int mono_gchandle_new_weakref(MonoObject*, bool)</code>
	int mono_gchandle_new_weakref(com.nativelibs4java.mono.library.MonoObject obj, boolean track_resurrection);
	/// Original signature : <code>MonoObject* mono_gchandle_get_target(int)</code>
	com.nativelibs4java.mono.library.MonoObject mono_gchandle_get_target(int gchandle);
	/// Original signature : <code>void mono_gchandle_free(int)</code>
	void mono_gchandle_free(int gchandle);
	/**
	 * GC write barriers support<br>
	 * Original signature : <code>void mono_gc_wbarrier_set_field(MonoObject*, void*, MonoObject*)</code>
	 */
	void mono_gc_wbarrier_set_field(com.nativelibs4java.mono.library.MonoObject obj, com.sun.jna.Pointer field_ptr, com.nativelibs4java.mono.library.MonoObject value);
	/// Original signature : <code>void mono_gc_wbarrier_set_arrayref(MonoArray*, void*, MonoObject*)</code>
	void mono_gc_wbarrier_set_arrayref(com.nativelibs4java.mono.library.MonoArray arr, com.sun.jna.Pointer slot_ptr, com.nativelibs4java.mono.library.MonoObject value);
	/// Original signature : <code>void mono_gc_wbarrier_arrayref_copy(MonoArray*, void*, int)</code>
	void mono_gc_wbarrier_arrayref_copy(com.nativelibs4java.mono.library.MonoArray arr, com.sun.jna.Pointer slot_ptr, int count);
	/// Original signature : <code>void mono_gc_wbarrier_generic_store(void*, MonoObject*)</code>
	void mono_gc_wbarrier_generic_store(com.sun.jna.Pointer ptr, com.nativelibs4java.mono.library.MonoObject value);
	/// Original signature : <code>void mono_gc_wbarrier_value_copy(void*, void*, int, MonoClass*)</code>
	void mono_gc_wbarrier_value_copy(com.sun.jna.Pointer dest, com.sun.jna.Pointer src, int count, com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>void mono_gc_wbarrier_object(MonoObject*)</code>
	void mono_gc_wbarrier_object(com.nativelibs4java.mono.library.MonoObject obj);
	/// Original signature : <code>char* mono_get_config_dir()</code>
	java.lang.String mono_get_config_dir();
	/**
	 * Original signature : <code>void mono_set_config_dir(const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_set_config_dir(java.lang.String)} and {@link #mono_set_config_dir(com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	void mono_set_config_dir(com.sun.jna.Pointer dir);
	/// Original signature : <code>void mono_set_config_dir(const char*)</code>
	void mono_set_config_dir(java.lang.String dir);
	/// Original signature : <code>char* mono_get_machine_config()</code>
	java.lang.String mono_get_machine_config();
	/**
	 * Original signature : <code>void mono_config_parse(const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_config_parse(java.lang.String)} and {@link #mono_config_parse(com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	void mono_config_parse(com.sun.jna.Pointer filename);
	/// Original signature : <code>void mono_config_parse(const char*)</code>
	void mono_config_parse(java.lang.String filename);
	/// Original signature : <code>void mono_config_for_assembly(MonoImage*)</code>
	void mono_config_for_assembly(com.nativelibs4java.mono.library.MonoLibrary.MonoImage assembly);
	/**
	 * Original signature : <code>void mono_config_parse_memory(const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_config_parse_memory(java.lang.String)} and {@link #mono_config_parse_memory(com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	void mono_config_parse_memory(com.sun.jna.Pointer buffer);
	/// Original signature : <code>void mono_config_parse_memory(const char*)</code>
	void mono_config_parse_memory(java.lang.String buffer);
	/**
	 * Original signature : <code>char* mono_config_string_for_assembly_file(const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_config_string_for_assembly_file(java.lang.String)} and {@link #mono_config_string_for_assembly_file(com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	java.lang.String mono_config_string_for_assembly_file(com.sun.jna.Pointer filename);
	/// Original signature : <code>char* mono_config_string_for_assembly_file(const char*)</code>
	java.lang.String mono_config_string_for_assembly_file(java.lang.String filename);
	/**
	 * Original signature : <code>MonoException* mono_exception_from_name(MonoImage*, const char*, const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_exception_from_name(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, java.lang.String, java.lang.String)} and {@link #mono_exception_from_name(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_exception_from_name(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, com.sun.jna.Pointer name_space, com.sun.jna.Pointer name);
	/// Original signature : <code>MonoException* mono_exception_from_name(MonoImage*, const char*, const char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_exception_from_name(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, java.lang.String name_space, java.lang.String name);
	/// Original signature : <code>MonoException* mono_exception_from_token(MonoImage*, int)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_exception_from_token(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int token);
	/**
	 * Original signature : <code>MonoException* mono_exception_from_name_two_strings(MonoImage*, const char*, const char*, MonoString*, MonoString*)</code><br>
	 * @deprecated use the safer methods {@link #mono_exception_from_name_two_strings(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, java.lang.String, java.lang.String, com.nativelibs4java.mono.library.MonoString, com.nativelibs4java.mono.library.MonoString)} and {@link #mono_exception_from_name_two_strings(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, com.sun.jna.Pointer, com.sun.jna.Pointer, com.nativelibs4java.mono.library.MonoString, com.nativelibs4java.mono.library.MonoString)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_exception_from_name_two_strings(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, com.sun.jna.Pointer name_space, com.sun.jna.Pointer name, com.nativelibs4java.mono.library.MonoString a1, com.nativelibs4java.mono.library.MonoString a2);
	/// Original signature : <code>MonoException* mono_exception_from_name_two_strings(MonoImage*, const char*, const char*, MonoString*, MonoString*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_exception_from_name_two_strings(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, java.lang.String name_space, java.lang.String name, com.nativelibs4java.mono.library.MonoString a1, com.nativelibs4java.mono.library.MonoString a2);
	/**
	 * Original signature : <code>MonoException* mono_exception_from_name_msg(MonoImage*, const char*, const char*, const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_exception_from_name_msg(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, java.lang.String, java.lang.String, java.lang.String)} and {@link #mono_exception_from_name_msg(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_exception_from_name_msg(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, com.sun.jna.Pointer name_space, com.sun.jna.Pointer name, com.sun.jna.Pointer msg);
	/// Original signature : <code>MonoException* mono_exception_from_name_msg(MonoImage*, const char*, const char*, const char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_exception_from_name_msg(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, java.lang.String name_space, java.lang.String name, java.lang.String msg);
	/// Original signature : <code>MonoException* mono_exception_from_token_two_strings(MonoImage*, int, MonoString*, MonoString*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_exception_from_token_two_strings(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int token, com.nativelibs4java.mono.library.MonoString a1, com.nativelibs4java.mono.library.MonoString a2);
	/**
	 * Original signature : <code>MonoException* mono_exception_from_name_domain(MonoDomain*, MonoImage*, const char*, const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_exception_from_name_domain(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain, com.nativelibs4java.mono.library.MonoLibrary.MonoImage, java.lang.String, java.lang.String)} and {@link #mono_exception_from_name_domain(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain, com.nativelibs4java.mono.library.MonoLibrary.MonoImage, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_exception_from_name_domain(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, com.sun.jna.Pointer name_space, com.sun.jna.Pointer name);
	/// Original signature : <code>MonoException* mono_exception_from_name_domain(MonoDomain*, MonoImage*, const char*, const char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_exception_from_name_domain(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, java.lang.String name_space, java.lang.String name);
	/// Original signature : <code>MonoException* mono_get_exception_divide_by_zero()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_divide_by_zero();
	/// Original signature : <code>MonoException* mono_get_exception_security()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_security();
	/// Original signature : <code>MonoException* mono_get_exception_arithmetic()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_arithmetic();
	/// Original signature : <code>MonoException* mono_get_exception_overflow()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_overflow();
	/// Original signature : <code>MonoException* mono_get_exception_null_reference()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_null_reference();
	/**
	 * Original signature : <code>MonoException* mono_get_exception_execution_engine(const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_get_exception_execution_engine(java.lang.String)} and {@link #mono_get_exception_execution_engine(com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_execution_engine(com.sun.jna.Pointer msg);
	/// Original signature : <code>MonoException* mono_get_exception_execution_engine(const char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_execution_engine(java.lang.String msg);
	/// Original signature : <code>MonoException* mono_get_exception_thread_abort()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_thread_abort();
	/**
	 * Original signature : <code>MonoException* mono_get_exception_thread_state(const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_get_exception_thread_state(java.lang.String)} and {@link #mono_get_exception_thread_state(com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_thread_state(com.sun.jna.Pointer msg);
	/// Original signature : <code>MonoException* mono_get_exception_thread_state(const char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_thread_state(java.lang.String msg);
	/// Original signature : <code>MonoException* mono_get_exception_thread_interrupted()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_thread_interrupted();
	/**
	 * Original signature : <code>MonoException* mono_get_exception_serialization(const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_get_exception_serialization(java.lang.String)} and {@link #mono_get_exception_serialization(com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_serialization(com.sun.jna.Pointer msg);
	/// Original signature : <code>MonoException* mono_get_exception_serialization(const char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_serialization(java.lang.String msg);
	/// Original signature : <code>MonoException* mono_get_exception_invalid_cast()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_invalid_cast();
	/**
	 * Original signature : <code>MonoException* mono_get_exception_invalid_operation(const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_get_exception_invalid_operation(java.lang.String)} and {@link #mono_get_exception_invalid_operation(com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_invalid_operation(com.sun.jna.Pointer msg);
	/// Original signature : <code>MonoException* mono_get_exception_invalid_operation(const char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_invalid_operation(java.lang.String msg);
	/// Original signature : <code>MonoException* mono_get_exception_index_out_of_range()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_index_out_of_range();
	/// Original signature : <code>MonoException* mono_get_exception_array_type_mismatch()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_array_type_mismatch();
	/**
	 * Original signature : <code>MonoException* mono_get_exception_type_load(MonoString*, char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_get_exception_type_load(com.nativelibs4java.mono.library.MonoString, java.nio.ByteBuffer)} and {@link #mono_get_exception_type_load(com.nativelibs4java.mono.library.MonoString, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_type_load(com.nativelibs4java.mono.library.MonoString class_name, com.sun.jna.Pointer assembly_name);
	/// Original signature : <code>MonoException* mono_get_exception_type_load(MonoString*, char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_type_load(com.nativelibs4java.mono.library.MonoString class_name, java.nio.ByteBuffer assembly_name);
	/**
	 * Original signature : <code>MonoException* mono_get_exception_missing_method(const char*, const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_get_exception_missing_method(java.lang.String, java.lang.String)} and {@link #mono_get_exception_missing_method(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_missing_method(com.sun.jna.Pointer class_name, com.sun.jna.Pointer member_name);
	/// Original signature : <code>MonoException* mono_get_exception_missing_method(const char*, const char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_missing_method(java.lang.String class_name, java.lang.String member_name);
	/**
	 * Original signature : <code>MonoException* mono_get_exception_missing_field(const char*, const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_get_exception_missing_field(java.lang.String, java.lang.String)} and {@link #mono_get_exception_missing_field(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_missing_field(com.sun.jna.Pointer class_name, com.sun.jna.Pointer member_name);
	/// Original signature : <code>MonoException* mono_get_exception_missing_field(const char*, const char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_missing_field(java.lang.String class_name, java.lang.String member_name);
	/**
	 * Original signature : <code>MonoException* mono_get_exception_not_implemented(const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_get_exception_not_implemented(java.lang.String)} and {@link #mono_get_exception_not_implemented(com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_not_implemented(com.sun.jna.Pointer msg);
	/// Original signature : <code>MonoException* mono_get_exception_not_implemented(const char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_not_implemented(java.lang.String msg);
	/**
	 * Original signature : <code>MonoException* mono_get_exception_not_supported(const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_get_exception_not_supported(java.lang.String)} and {@link #mono_get_exception_not_supported(com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_not_supported(com.sun.jna.Pointer msg);
	/// Original signature : <code>MonoException* mono_get_exception_not_supported(const char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_not_supported(java.lang.String msg);
	/**
	 * Original signature : <code>MonoException* mono_get_exception_argument_null(const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_get_exception_argument_null(java.lang.String)} and {@link #mono_get_exception_argument_null(com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_argument_null(com.sun.jna.Pointer arg);
	/// Original signature : <code>MonoException* mono_get_exception_argument_null(const char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_argument_null(java.lang.String arg);
	/**
	 * Original signature : <code>MonoException* mono_get_exception_argument(const char*, const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_get_exception_argument(java.lang.String, java.lang.String)} and {@link #mono_get_exception_argument(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_argument(com.sun.jna.Pointer arg, com.sun.jna.Pointer msg);
	/// Original signature : <code>MonoException* mono_get_exception_argument(const char*, const char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_argument(java.lang.String arg, java.lang.String msg);
	/**
	 * Original signature : <code>MonoException* mono_get_exception_argument_out_of_range(const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_get_exception_argument_out_of_range(java.lang.String)} and {@link #mono_get_exception_argument_out_of_range(com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_argument_out_of_range(com.sun.jna.Pointer arg);
	/// Original signature : <code>MonoException* mono_get_exception_argument_out_of_range(const char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_argument_out_of_range(java.lang.String arg);
	/**
	 * Original signature : <code>MonoException* mono_get_exception_io(const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_get_exception_io(java.lang.String)} and {@link #mono_get_exception_io(com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_io(com.sun.jna.Pointer msg);
	/// Original signature : <code>MonoException* mono_get_exception_io(const char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_io(java.lang.String msg);
	/// Original signature : <code>MonoException* mono_get_exception_file_not_found(MonoString*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_file_not_found(com.nativelibs4java.mono.library.MonoString fname);
	/**
	 * Original signature : <code>MonoException* mono_get_exception_file_not_found2(const char*, MonoString*)</code><br>
	 * @deprecated use the safer methods {@link #mono_get_exception_file_not_found2(java.lang.String, com.nativelibs4java.mono.library.MonoString)} and {@link #mono_get_exception_file_not_found2(com.sun.jna.Pointer, com.nativelibs4java.mono.library.MonoString)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_file_not_found2(com.sun.jna.Pointer msg, com.nativelibs4java.mono.library.MonoString fname);
	/// Original signature : <code>MonoException* mono_get_exception_file_not_found2(const char*, MonoString*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_file_not_found2(java.lang.String msg, com.nativelibs4java.mono.library.MonoString fname);
	/**
	 * Original signature : <code>MonoException* mono_get_exception_type_initialization(const char*, MonoException*)</code><br>
	 * @deprecated use the safer methods {@link #mono_get_exception_type_initialization(java.lang.String, com.nativelibs4java.mono.library.MonoLibrary.MonoException)} and {@link #mono_get_exception_type_initialization(com.sun.jna.Pointer, com.nativelibs4java.mono.library.MonoLibrary.MonoException)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_type_initialization(com.sun.jna.Pointer type_name, com.nativelibs4java.mono.library.MonoLibrary.MonoException inner);
	/// Original signature : <code>MonoException* mono_get_exception_type_initialization(const char*, MonoException*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_type_initialization(java.lang.String type_name, com.nativelibs4java.mono.library.MonoLibrary.MonoException inner);
	/**
	 * Original signature : <code>MonoException* mono_get_exception_synchronization_lock(const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_get_exception_synchronization_lock(java.lang.String)} and {@link #mono_get_exception_synchronization_lock(com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_synchronization_lock(com.sun.jna.Pointer msg);
	/// Original signature : <code>MonoException* mono_get_exception_synchronization_lock(const char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_synchronization_lock(java.lang.String msg);
	/**
	 * Original signature : <code>MonoException* mono_get_exception_cannot_unload_appdomain(const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_get_exception_cannot_unload_appdomain(java.lang.String)} and {@link #mono_get_exception_cannot_unload_appdomain(com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_cannot_unload_appdomain(com.sun.jna.Pointer msg);
	/// Original signature : <code>MonoException* mono_get_exception_cannot_unload_appdomain(const char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_cannot_unload_appdomain(java.lang.String msg);
	/// Original signature : <code>MonoException* mono_get_exception_appdomain_unloaded()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_appdomain_unloaded();
	/**
	 * Original signature : <code>MonoException* mono_get_exception_bad_image_format(const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_get_exception_bad_image_format(java.lang.String)} and {@link #mono_get_exception_bad_image_format(com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_bad_image_format(com.sun.jna.Pointer msg);
	/// Original signature : <code>MonoException* mono_get_exception_bad_image_format(const char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_bad_image_format(java.lang.String msg);
	/**
	 * Original signature : <code>MonoException* mono_get_exception_bad_image_format2(const char*, MonoString*)</code><br>
	 * @deprecated use the safer methods {@link #mono_get_exception_bad_image_format2(java.lang.String, com.nativelibs4java.mono.library.MonoString)} and {@link #mono_get_exception_bad_image_format2(com.sun.jna.Pointer, com.nativelibs4java.mono.library.MonoString)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_bad_image_format2(com.sun.jna.Pointer msg, com.nativelibs4java.mono.library.MonoString fname);
	/// Original signature : <code>MonoException* mono_get_exception_bad_image_format2(const char*, MonoString*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_bad_image_format2(java.lang.String msg, com.nativelibs4java.mono.library.MonoString fname);
	/// Original signature : <code>MonoException* mono_get_exception_stack_overflow()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_stack_overflow();
	/// Original signature : <code>MonoException* mono_get_exception_out_of_memory()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_out_of_memory();
	/// Original signature : <code>MonoException* mono_get_exception_reflection_type_load(MonoArray*, MonoArray*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_get_exception_reflection_type_load(com.nativelibs4java.mono.library.MonoArray types, com.nativelibs4java.mono.library.MonoArray exceptions);
	/// Original signature : <code>int mono_environment_exitcode_get()</code>
	int mono_environment_exitcode_get();
	/// Original signature : <code>void mono_environment_exitcode_set(int)</code>
	void mono_environment_exitcode_set(int value);
	/// Original signature : <code>MonoString* ves_icall_System_Environment_GetOSVersionString()</code>
	com.nativelibs4java.mono.library.MonoString ves_icall_System_Environment_GetOSVersionString();
	/// Original signature : <code>MonoMethod* mono_get_method(MonoImage*, int, MonoClass*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoMethod mono_get_method(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int token, com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>MonoMethod* mono_get_method_full(MonoImage*, int, MonoClass*, MonoGenericContext*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoMethod mono_get_method_full(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int token, com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, com.nativelibs4java.mono.library.MonoLibrary.MonoGenericContext context);
	/**
	 * Original signature : <code>MonoMethod* mono_get_method_constrained(MonoImage*, int, MonoClass*, MonoGenericContext*, MonoMethod**)</code><br>
	 * @deprecated use the safer method {@link #mono_get_method_constrained(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, int, com.nativelibs4java.mono.library.MonoLibrary.MonoClass, com.nativelibs4java.mono.library.MonoLibrary.MonoGenericContext, com.nativelibs4java.mono.library.MonoLibrary.MonoMethod[])} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoMethod mono_get_method_constrained(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int token, com.nativelibs4java.mono.library.MonoLibrary.MonoClass constrained_class, com.nativelibs4java.mono.library.MonoLibrary.MonoGenericContext context, com.sun.jna.ptr.PointerByReference cil_method);
	/// Original signature : <code>MonoMethod* mono_get_method_constrained(MonoImage*, int, MonoClass*, MonoGenericContext*, MonoMethod**)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoMethod mono_get_method_constrained(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int token, com.nativelibs4java.mono.library.MonoLibrary.MonoClass constrained_class, com.nativelibs4java.mono.library.MonoLibrary.MonoGenericContext context, com.nativelibs4java.mono.library.MonoLibrary.MonoMethod cil_method[]);
	/// Original signature : <code>void mono_free_method(MonoMethod*)</code>
	void mono_free_method(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method);
	/// Original signature : <code>MonoMethodSignature* mono_method_get_signature_full(MonoMethod*, MonoImage*, int, MonoGenericContext*)</code>
	com.nativelibs4java.mono.library.MonoMethodSignature mono_method_get_signature_full(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int token, com.nativelibs4java.mono.library.MonoLibrary.MonoGenericContext context);
	/// Original signature : <code>MonoMethodSignature* mono_method_get_signature(MonoMethod*, MonoImage*, int)</code>
	com.nativelibs4java.mono.library.MonoMethodSignature mono_method_get_signature(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int token);
	/// Original signature : <code>MonoMethodSignature* mono_method_signature(MonoMethod*)</code>
	com.nativelibs4java.mono.library.MonoMethodSignature mono_method_signature(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method);
	/// Original signature : <code>MonoMethodHeader* mono_method_get_header(MonoMethod*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoMethodHeader mono_method_get_header(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method);
	/// Original signature : <code>char* mono_method_get_name(MonoMethod*)</code>
	java.lang.String mono_method_get_name(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method);
	/// Original signature : <code>MonoClass* mono_method_get_class(MonoMethod*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_method_get_class(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method);
	/// Original signature : <code>int mono_method_get_token(MonoMethod*)</code>
	int mono_method_get_token(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method);
	/**
	 * Original signature : <code>int mono_method_get_flags(MonoMethod*, int*)</code><br>
	 * @deprecated use the safer methods {@link #mono_method_get_flags(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod, java.nio.IntBuffer)} and {@link #mono_method_get_flags(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated
	int mono_method_get_flags(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, com.sun.jna.ptr.IntByReference iflags);
	/// Original signature : <code>int mono_method_get_flags(MonoMethod*, int*)</code>
	int mono_method_get_flags(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, java.nio.IntBuffer iflags);
	/// Original signature : <code>int mono_method_get_index(MonoMethod*)</code>
	int mono_method_get_index(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method);
	/**
	 * Original signature : <code>MonoImage* mono_load_image(const char*, MonoImageOpenStatus*)</code><br>
	 * @deprecated use the safer methods {@link #mono_load_image(java.lang.String, java.nio.IntBuffer)} and {@link #mono_load_image(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead<br>
	 * @param status @see MonoImageOpenStatus
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoImage mono_load_image(com.sun.jna.Pointer fname, com.sun.jna.ptr.IntByReference status);
	/// Original signature : <code>MonoImage* mono_load_image(const char*, MonoImageOpenStatus*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoImage mono_load_image(java.lang.String fname, java.nio.IntBuffer status);
	/**
	 * Original signature : <code>void mono_add_internal_call(const char*, gconstpointer)</code><br>
	 * @deprecated use the safer methods {@link #mono_add_internal_call(java.lang.String, com.sun.jna.Pointer)} and {@link #mono_add_internal_call(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	void mono_add_internal_call(com.sun.jna.Pointer name, com.sun.jna.Pointer method);
	/// Original signature : <code>void mono_add_internal_call(const char*, gconstpointer)</code>
	void mono_add_internal_call(java.lang.String name, com.sun.jna.Pointer method);
	/// Original signature : <code>void* mono_lookup_internal_call(MonoMethod*)</code>
	com.sun.jna.Pointer mono_lookup_internal_call(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method);
	/**
	 * Original signature : <code>void mono_dllmap_insert(MonoImage*, const char*, const char*, const char*, const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_dllmap_insert(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, java.lang.String, java.lang.String, java.lang.String, java.lang.String)} and {@link #mono_dllmap_insert(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	void mono_dllmap_insert(com.nativelibs4java.mono.library.MonoLibrary.MonoImage assembly, com.sun.jna.Pointer dll, com.sun.jna.Pointer func, com.sun.jna.Pointer tdll, com.sun.jna.Pointer tfunc);
	/// Original signature : <code>void mono_dllmap_insert(MonoImage*, const char*, const char*, const char*, const char*)</code>
	void mono_dllmap_insert(com.nativelibs4java.mono.library.MonoLibrary.MonoImage assembly, java.lang.String dll, java.lang.String func, java.lang.String tdll, java.lang.String tfunc);
	/**
	 * Original signature : <code>void* mono_lookup_pinvoke_call(MonoMethod*, const char**, const char**)</code><br>
	 * @deprecated use the safer methods {@link #mono_lookup_pinvoke_call(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod, java.lang.String[], java.lang.String[])} and {@link #mono_lookup_pinvoke_call(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@java.lang.Deprecated
	com.sun.jna.Pointer mono_lookup_pinvoke_call(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, com.sun.jna.ptr.PointerByReference exc_class, com.sun.jna.ptr.PointerByReference exc_arg);
	/// Original signature : <code>void* mono_lookup_pinvoke_call(MonoMethod*, const char**, const char**)</code>
	com.sun.jna.Pointer mono_lookup_pinvoke_call(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, java.lang.String exc_class[], java.lang.String exc_arg[]);
	/**
	 * Original signature : <code>void mono_method_get_param_names(MonoMethod*, const char**)</code><br>
	 * @deprecated use the safer methods {@link #mono_method_get_param_names(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod, java.lang.String[])} and {@link #mono_method_get_param_names(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@java.lang.Deprecated
	void mono_method_get_param_names(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, com.sun.jna.ptr.PointerByReference names);
	/// Original signature : <code>void mono_method_get_param_names(MonoMethod*, const char**)</code>
	void mono_method_get_param_names(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, java.lang.String names[]);
	/// Original signature : <code>int mono_method_get_param_token(MonoMethod*, int)</code>
	int mono_method_get_param_token(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, int idx);
	/**
	 * Original signature : <code>void mono_method_get_marshal_info(MonoMethod*, MonoMarshalSpec**)</code><br>
	 * @deprecated use the safer method {@link #mono_method_get_marshal_info(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod, com.nativelibs4java.mono.library.MonoMarshalSpec.ByReference[])} instead
	 */
	@java.lang.Deprecated
	void mono_method_get_marshal_info(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, com.sun.jna.ptr.PointerByReference mspecs);
	/// Original signature : <code>void mono_method_get_marshal_info(MonoMethod*, MonoMarshalSpec**)</code>
	void mono_method_get_marshal_info(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, com.nativelibs4java.mono.library.MonoMarshalSpec.ByReference mspecs[]);
	/// Original signature : <code>bool mono_method_has_marshal_info(MonoMethod*)</code>
	boolean mono_method_has_marshal_info(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method);
	/// Original signature : <code>MonoMethod* mono_method_get_last_managed()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoMethod mono_method_get_last_managed();
	/// Original signature : <code>void mono_stack_walk(MonoStackWalk, void*)</code>
	void mono_stack_walk(com.nativelibs4java.mono.library.MonoLibrary.MonoStackWalk func, com.sun.jna.Pointer user_data);
	/**
	 * Use this if the IL offset is not needed: it's faster<br>
	 * Original signature : <code>void mono_stack_walk_no_il(MonoStackWalk, void*)</code>
	 */
	void mono_stack_walk_no_il(com.nativelibs4java.mono.library.MonoLibrary.MonoStackWalk func, com.sun.jna.Pointer user_data);
	/// Original signature : <code>int mono_thread_get_abort_signal()</code>
	int mono_thread_get_abort_signal();
	/// Original signature : <code>void mono_thread_init(MonoThreadStartCB, MonoThreadAttachCB)</code>
	void mono_thread_init(com.nativelibs4java.mono.library.MonoLibrary.MonoThreadStartCB start_cb, com.nativelibs4java.mono.library.MonoLibrary.MonoThreadAttachCB attach_cb);
	/// Original signature : <code>void mono_thread_cleanup()</code>
	void mono_thread_cleanup();
	/// Original signature : <code>void mono_thread_manage()</code>
	void mono_thread_manage();
	/// Original signature : <code>void mono_thread_abort_all_other_threads()</code>
	void mono_thread_abort_all_other_threads();
	/// Original signature : <code>void mono_thread_suspend_all_other_threads()</code>
	void mono_thread_suspend_all_other_threads();
	/// Original signature : <code>void mono_thread_push_appdomain_ref(MonoDomain*)</code>
	void mono_thread_push_appdomain_ref(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain);
	/// Original signature : <code>void mono_thread_pop_appdomain_ref()</code>
	void mono_thread_pop_appdomain_ref();
	/// Original signature : <code>bool mono_thread_has_appdomain_ref(MonoThread*, MonoDomain*)</code>
	boolean mono_thread_has_appdomain_ref(com.nativelibs4java.mono.library.MonoLibrary.MonoThread thread, com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain);
	/// Original signature : <code>bool mono_threads_abort_appdomain_threads(MonoDomain*, int)</code>
	boolean mono_threads_abort_appdomain_threads(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, int timeout);
	/// Original signature : <code>void mono_threads_clear_cached_culture(MonoDomain*)</code>
	void mono_threads_clear_cached_culture(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain);
	/// Original signature : <code>MonoThread* mono_thread_current()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoThread mono_thread_current();
	/// Original signature : <code>void mono_thread_set_main(MonoThread*)</code>
	void mono_thread_set_main(com.nativelibs4java.mono.library.MonoLibrary.MonoThread thread);
	/// Original signature : <code>MonoThread* mono_thread_get_main()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoThread mono_thread_get_main();
	/// Original signature : <code>void mono_thread_stop(MonoThread*)</code>
	void mono_thread_stop(com.nativelibs4java.mono.library.MonoLibrary.MonoThread thread);
	/// Original signature : <code>void mono_thread_new_init(size_t, void*, void*)</code>
	void mono_thread_new_init(com.ochafik.lang.jnaerator.runtime.NativeSize tid, com.sun.jna.Pointer stack_start, com.sun.jna.Pointer func);
	/// Original signature : <code>void mono_thread_create(MonoDomain*, void*, void*)</code>
	void mono_thread_create(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.sun.jna.Pointer func, com.sun.jna.Pointer arg);
	/// Original signature : <code>MonoThread* mono_thread_attach(MonoDomain*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoThread mono_thread_attach(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain);
	/// Original signature : <code>void mono_thread_detach(MonoThread*)</code>
	void mono_thread_detach(com.nativelibs4java.mono.library.MonoLibrary.MonoThread thread);
	/// Original signature : <code>void mono_thread_exit()</code>
	void mono_thread_exit();
	/// Original signature : <code>void mono_threads_install_cleanup(MonoThreadCleanupFunc)</code>
	void mono_threads_install_cleanup(com.nativelibs4java.mono.library.MonoLibrary.MonoThreadCleanupFunc func);
	/// Original signature : <code>void mono_thread_set_manage_callback(MonoThread*, MonoThreadManageCallback)</code>
	void mono_thread_set_manage_callback(com.nativelibs4java.mono.library.MonoLibrary.MonoThread thread, com.nativelibs4java.mono.library.MonoLibrary.MonoThreadManageCallback func);
	/// Original signature : <code>void mono_threads_set_default_stacksize(int)</code>
	void mono_threads_set_default_stacksize(int stacksize);
	/// Original signature : <code>int mono_threads_get_default_stacksize()</code>
	int mono_threads_get_default_stacksize();
	/// Original signature : <code>int mono_alloc_special_static_data(int, int, int)</code>
	int mono_alloc_special_static_data(int static_type, int size, int align);
	/// Original signature : <code>void* mono_get_special_static_data(int)</code>
	com.sun.jna.Pointer mono_get_special_static_data(int offset);
	/// Original signature : <code>void mono_threads_request_thread_dump()</code>
	void mono_threads_request_thread_dump();
	/// Original signature : <code>MonoException* mono_thread_request_interruption(bool)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoException mono_thread_request_interruption(boolean running_managed);
	/// Original signature : <code>bool mono_thread_interruption_requested()</code>
	boolean mono_thread_interruption_requested();
	/// Original signature : <code>void mono_thread_interruption_checkpoint()</code>
	void mono_thread_interruption_checkpoint();
	/// Original signature : <code>void mono_thread_force_interruption_checkpoint()</code>
	void mono_thread_force_interruption_checkpoint();
	/// Original signature : <code>int* mono_thread_interruption_request_flag()</code>
	com.sun.jna.ptr.IntByReference mono_thread_interruption_request_flag();
	/**
	 * Original signature : <code>void mono_debug_list_add(MonoDebugList**, gconstpointer)</code><br>
	 * @deprecated use the safer method {@link #mono_debug_list_add(com.nativelibs4java.mono.library.MonoDebugList.ByReference[], com.sun.jna.Pointer)} instead
	 */
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z19mono_debug_list_addPP14_MonoDebugListPKv", "?mono_debug_list_add@@YAXPAPA14_MonoDebugListPAX@Z"})
	@java.lang.Deprecated
	void mono_debug_list_add(com.sun.jna.ptr.PointerByReference list, com.sun.jna.Pointer data);
	/// Original signature : <code>void mono_debug_list_add(MonoDebugList**, gconstpointer)</code>
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z19mono_debug_list_addPP14_MonoDebugListPKv", "?mono_debug_list_add@@YAXPAPA14_MonoDebugListPAX@Z"})
	void mono_debug_list_add(com.nativelibs4java.mono.library.MonoDebugList.ByReference list[], com.sun.jna.Pointer data);
	/**
	 * Original signature : <code>void mono_debug_list_remove(MonoDebugList**, gconstpointer)</code><br>
	 * @deprecated use the safer method {@link #mono_debug_list_remove(com.nativelibs4java.mono.library.MonoDebugList.ByReference[], com.sun.jna.Pointer)} instead
	 */
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z22mono_debug_list_removePP14_MonoDebugListPKv", "?mono_debug_list_remove@@YAXPAPA14_MonoDebugListPAX@Z"})
	@java.lang.Deprecated
	void mono_debug_list_remove(com.sun.jna.ptr.PointerByReference list, com.sun.jna.Pointer data);
	/// Original signature : <code>void mono_debug_list_remove(MonoDebugList**, gconstpointer)</code>
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z22mono_debug_list_removePP14_MonoDebugListPKv", "?mono_debug_list_remove@@YAXPAPA14_MonoDebugListPAX@Z"})
	void mono_debug_list_remove(com.nativelibs4java.mono.library.MonoDebugList.ByReference list[], com.sun.jna.Pointer data);
	/**
	 * Original signature : <code>void mono_debug_init(MonoDebugFormat)</code><br>
	 * @param format @see MonoDebugFormat
	 */
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z15mono_debug_init15MonoDebugFormat", "?mono_debug_init@@YAXW4MonoDebugFormat@@@Z"})
	void mono_debug_init(int format);
	/**
	 * Original signature : <code>void mono_debug_open_image_from_memory(MonoImage*, const char*, int)</code><br>
	 * @deprecated use the safer methods {@link #mono_debug_open_image_from_memory(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, java.lang.String, int)} and {@link #mono_debug_open_image_from_memory(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, com.sun.jna.Pointer, int)} instead
	 */
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z33mono_debug_open_image_from_memoryP10_MonoImagePKci", "?mono_debug_open_image_from_memory@@YAXPA10_MonoImagePADH@Z"})
	@java.lang.Deprecated
	void mono_debug_open_image_from_memory(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, com.sun.jna.Pointer raw_contents, int size);
	/// Original signature : <code>void mono_debug_open_image_from_memory(MonoImage*, const char*, int)</code>
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z33mono_debug_open_image_from_memoryP10_MonoImagePKci", "?mono_debug_open_image_from_memory@@YAXPA10_MonoImagePADH@Z"})
	void mono_debug_open_image_from_memory(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, java.lang.String raw_contents, int size);
	/// Original signature : <code>void mono_debug_cleanup()</code>
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z18mono_debug_cleanupv", "?mono_debug_cleanup@@YAXXZ"})
	void mono_debug_cleanup();
	/// Original signature : <code>void mono_debug_close_image(MonoImage*)</code>
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z22mono_debug_close_imageP10_MonoImage", "?mono_debug_close_image@@YAXPA10_MonoImage@Z"})
	void mono_debug_close_image(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image);
	/// Original signature : <code>void mono_debug_domain_unload(MonoDomain*)</code>
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z24mono_debug_domain_unloadP11_MonoDomain", "?mono_debug_domain_unload@@YAXPA11_MonoDomain@Z"})
	void mono_debug_domain_unload(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain);
	/// Original signature : <code>void mono_debug_domain_create(MonoDomain*)</code>
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z24mono_debug_domain_createP11_MonoDomain", "?mono_debug_domain_create@@YAXPA11_MonoDomain@Z"})
	void mono_debug_domain_create(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain);
	/// Original signature : <code>bool mono_debug_using_mono_debugger()</code>
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z30mono_debug_using_mono_debuggerv", "?mono_debug_using_mono_debugger@@YA_NXZ"})
	boolean mono_debug_using_mono_debugger();
	/// Original signature : <code>MonoDebugMethodAddress* mono_debug_add_method(MonoMethod*, MonoDebugMethodJitInfo*, MonoDomain*)</code>
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z21mono_debug_add_methodP11_MonoMethodP23_MonoDebugMethodJitInfoP11_MonoDomain", "?mono_debug_add_method@@YAPA23_MonoDebugMethodAddressPA11_MonoMethodPA23_MonoDebugMethodJitInfoPA11_MonoDomain@Z"})
	com.nativelibs4java.mono.library.MonoLibrary.MonoDebugMethodAddress mono_debug_add_method(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, com.nativelibs4java.mono.library.MonoDebugMethodJitInfo jit, com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain);
	/// Original signature : <code>MonoDebugMethodInfo* mono_debug_lookup_method(MonoMethod*)</code>
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z24mono_debug_lookup_methodP11_MonoMethod", "?mono_debug_lookup_method@@YAPA20_MonoDebugMethodInfoPA11_MonoMethod@Z"})
	com.nativelibs4java.mono.library.MonoDebugMethodInfo mono_debug_lookup_method(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method);
	/// Original signature : <code>MonoDebugMethodAddressList* mono_debug_lookup_method_addresses(MonoMethod*)</code>
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z34mono_debug_lookup_method_addressesP11_MonoMethod", "?mono_debug_lookup_method_addresses@@YAPA27_MonoDebugMethodAddressListPA11_MonoMethod@Z"})
	com.nativelibs4java.mono.library.MonoDebugMethodAddressList mono_debug_lookup_method_addresses(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method);
	/// Original signature : <code>MonoDebugMethodJitInfo* mono_debug_find_method(MonoMethod*, MonoDomain*)</code>
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z22mono_debug_find_methodP11_MonoMethodP11_MonoDomain", "?mono_debug_find_method@@YAPA23_MonoDebugMethodJitInfoPA11_MonoMethodPA11_MonoDomain@Z"})
	com.nativelibs4java.mono.library.MonoDebugMethodJitInfo mono_debug_find_method(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain);
	/// Original signature : <code>void mono_debug_free_method_jit_info(MonoDebugMethodJitInfo*)</code>
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z31mono_debug_free_method_jit_infoP23_MonoDebugMethodJitInfo", "?mono_debug_free_method_jit_info@@YAXPA23_MonoDebugMethodJitInfo@Z"})
	void mono_debug_free_method_jit_info(com.nativelibs4java.mono.library.MonoDebugMethodJitInfo jit);
	/// Original signature : <code>void mono_debug_add_delegate_trampoline(void*, int)</code>
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z34mono_debug_add_delegate_trampolinePvi", "?mono_debug_add_delegate_trampoline@@YAXPAXH@Z"})
	void mono_debug_add_delegate_trampoline(com.sun.jna.Pointer code, int size);
	/// Original signature : <code>MonoDebugSourceLocation* mono_debug_lookup_source_location(MonoMethod*, int, MonoDomain*)</code>
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z33mono_debug_lookup_source_locationP11_MonoMethodiP11_MonoDomain", "?mono_debug_lookup_source_location@@YAPA24_MonoDebugSourceLocationPA11_MonoMethodHPA11_MonoDomain@Z"})
	com.nativelibs4java.mono.library.MonoDebugSourceLocation mono_debug_lookup_source_location(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, int address, com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain);
	/// Original signature : <code>void mono_debug_free_source_location(MonoDebugSourceLocation*)</code>
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z31mono_debug_free_source_locationP24_MonoDebugSourceLocation", "?mono_debug_free_source_location@@YAXPA24_MonoDebugSourceLocation@Z"})
	void mono_debug_free_source_location(com.nativelibs4java.mono.library.MonoDebugSourceLocation location);
	/// Original signature : <code>char* mono_debug_print_stack_frame(MonoMethod*, int, MonoDomain*)</code>
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z28mono_debug_print_stack_frameP11_MonoMethodiP11_MonoDomain", "?mono_debug_print_stack_frame@@YAPADPA11_MonoMethodHPA11_MonoDomain@Z"})
	com.sun.jna.Pointer mono_debug_print_stack_frame(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, int native_offset, com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain);
	/// Original signature : <code>int mono_debugger_method_has_breakpoint(MonoMethod*)</code>
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z35mono_debugger_method_has_breakpointP11_MonoMethod", "?mono_debugger_method_has_breakpoint@@YAHPA11_MonoMethod@Z"})
	int mono_debugger_method_has_breakpoint(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method);
	/**
	 * Original signature : <code>int mono_debugger_insert_breakpoint(const char*, bool)</code><br>
	 * @deprecated use the safer methods {@link #mono_debugger_insert_breakpoint(java.lang.String, boolean)} and {@link #mono_debugger_insert_breakpoint(com.sun.jna.Pointer, boolean)} instead
	 */
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z31mono_debugger_insert_breakpointPKcb", "?mono_debugger_insert_breakpoint@@YAHPAD_N@Z"})
	@java.lang.Deprecated
	int mono_debugger_insert_breakpoint(com.sun.jna.Pointer method_name, boolean include_namespace);
	/// Original signature : <code>int mono_debugger_insert_breakpoint(const char*, bool)</code>
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z31mono_debugger_insert_breakpointPKcb", "?mono_debugger_insert_breakpoint@@YAHPAD_N@Z"})
	int mono_debugger_insert_breakpoint(java.lang.String method_name, boolean include_namespace);
	/**
	 * Original signature : <code>char* mono_disasm_code_one(MonoDisHelper*, MonoMethod*, const guchar*, const guchar**)</code><br>
	 * @deprecated use the safer methods {@link #mono_disasm_code_one(com.nativelibs4java.mono.library.MonoDisHelper, com.nativelibs4java.mono.library.MonoLibrary.MonoMethod, java.nio.ByteBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #mono_disasm_code_one(com.nativelibs4java.mono.library.MonoDisHelper, com.nativelibs4java.mono.library.MonoLibrary.MonoMethod, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@java.lang.Deprecated
	com.sun.jna.Pointer mono_disasm_code_one(com.nativelibs4java.mono.library.MonoDisHelper dh, com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, com.sun.jna.Pointer ip, com.sun.jna.ptr.PointerByReference endp);
	/// Original signature : <code>char* mono_disasm_code_one(MonoDisHelper*, MonoMethod*, const guchar*, const guchar**)</code>
	com.sun.jna.Pointer mono_disasm_code_one(com.nativelibs4java.mono.library.MonoDisHelper dh, com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, java.nio.ByteBuffer ip, com.sun.jna.ptr.PointerByReference endp);
	/**
	 * Original signature : <code>char* mono_disasm_code(MonoDisHelper*, MonoMethod*, const guchar*, const guchar*)</code><br>
	 * @deprecated use the safer methods {@link #mono_disasm_code(com.nativelibs4java.mono.library.MonoDisHelper, com.nativelibs4java.mono.library.MonoLibrary.MonoMethod, java.nio.ByteBuffer, java.nio.ByteBuffer)} and {@link #mono_disasm_code(com.nativelibs4java.mono.library.MonoDisHelper, com.nativelibs4java.mono.library.MonoLibrary.MonoMethod, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.sun.jna.Pointer mono_disasm_code(com.nativelibs4java.mono.library.MonoDisHelper dh, com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, com.sun.jna.Pointer ip, com.sun.jna.Pointer end);
	/// Original signature : <code>char* mono_disasm_code(MonoDisHelper*, MonoMethod*, const guchar*, const guchar*)</code>
	com.sun.jna.Pointer mono_disasm_code(com.nativelibs4java.mono.library.MonoDisHelper dh, com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, java.nio.ByteBuffer ip, java.nio.ByteBuffer end);
	/// Original signature : <code>void mono_type_get_desc(GString*, MonoType*, bool)</code>
	void mono_type_get_desc(com.nativelibs4java.mono.library.MonoLibrary.GString res, com.nativelibs4java.mono.library.MonoType type, boolean include_namespace);
	/// Original signature : <code>char* mono_type_full_name(MonoType*)</code>
	com.sun.jna.Pointer mono_type_full_name(com.nativelibs4java.mono.library.MonoType type);
	/// Original signature : <code>char* mono_signature_get_desc(MonoMethodSignature*, bool)</code>
	com.sun.jna.Pointer mono_signature_get_desc(com.nativelibs4java.mono.library.MonoMethodSignature sig, boolean include_namespace);
	/// Original signature : <code>char* mono_context_get_desc(MonoGenericContext*)</code>
	com.sun.jna.Pointer mono_context_get_desc(com.nativelibs4java.mono.library.MonoLibrary.MonoGenericContext context);
	/**
	 * Original signature : <code>MonoMethodDesc* mono_method_desc_new(const char*, bool)</code><br>
	 * @deprecated use the safer methods {@link #mono_method_desc_new(java.lang.String, boolean)} and {@link #mono_method_desc_new(com.sun.jna.Pointer, boolean)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoMethodDesc mono_method_desc_new(com.sun.jna.Pointer name, boolean include_namespace);
	/// Original signature : <code>MonoMethodDesc* mono_method_desc_new(const char*, bool)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoMethodDesc mono_method_desc_new(java.lang.String name, boolean include_namespace);
	/// Original signature : <code>MonoMethodDesc* mono_method_desc_from_method(MonoMethod*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoMethodDesc mono_method_desc_from_method(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method);
	/// Original signature : <code>void mono_method_desc_free(MonoMethodDesc*)</code>
	void mono_method_desc_free(com.nativelibs4java.mono.library.MonoLibrary.MonoMethodDesc desc);
	/// Original signature : <code>bool mono_method_desc_match(MonoMethodDesc*, MonoMethod*)</code>
	boolean mono_method_desc_match(com.nativelibs4java.mono.library.MonoLibrary.MonoMethodDesc desc, com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method);
	/// Original signature : <code>bool mono_method_desc_full_match(MonoMethodDesc*, MonoMethod*)</code>
	boolean mono_method_desc_full_match(com.nativelibs4java.mono.library.MonoLibrary.MonoMethodDesc desc, com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method);
	/// Original signature : <code>MonoMethod* mono_method_desc_search_in_class(MonoMethodDesc*, MonoClass*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoMethod mono_method_desc_search_in_class(com.nativelibs4java.mono.library.MonoLibrary.MonoMethodDesc desc, com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>MonoMethod* mono_method_desc_search_in_image(MonoMethodDesc*, MonoImage*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoMethod mono_method_desc_search_in_image(com.nativelibs4java.mono.library.MonoLibrary.MonoMethodDesc desc, com.nativelibs4java.mono.library.MonoLibrary.MonoImage image);
	/// Original signature : <code>char* mono_method_full_name(MonoMethod*, bool)</code>
	com.sun.jna.Pointer mono_method_full_name(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, boolean signature);
	/// Original signature : <code>char* mono_field_full_name(MonoClassField*)</code>
	com.sun.jna.Pointer mono_field_full_name(com.nativelibs4java.mono.library.MonoLibrary.MonoClassField field);
	/// Original signature : <code>MonoMemPool* mono_mempool_new()</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoMemPool mono_mempool_new();
	/// Original signature : <code>MonoMemPool* mono_mempool_new_size(int)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoMemPool mono_mempool_new_size(int initial_size);
	/// Original signature : <code>void mono_mempool_destroy(MonoMemPool*)</code>
	void mono_mempool_destroy(com.nativelibs4java.mono.library.MonoLibrary.MonoMemPool pool);
	/// Original signature : <code>void mono_mempool_invalidate(MonoMemPool*)</code>
	void mono_mempool_invalidate(com.nativelibs4java.mono.library.MonoLibrary.MonoMemPool pool);
	/// Original signature : <code>void mono_mempool_empty(MonoMemPool*)</code>
	void mono_mempool_empty(com.nativelibs4java.mono.library.MonoLibrary.MonoMemPool pool);
	/// Original signature : <code>void mono_mempool_stats(MonoMemPool*)</code>
	void mono_mempool_stats(com.nativelibs4java.mono.library.MonoLibrary.MonoMemPool pool);
	/// Original signature : <code>void* mono_mempool_alloc(MonoMemPool*, guint)</code>
	com.sun.jna.Pointer mono_mempool_alloc(com.nativelibs4java.mono.library.MonoLibrary.MonoMemPool pool, int size);
	/// Original signature : <code>void* mono_mempool_alloc0(MonoMemPool*, guint)</code>
	com.sun.jna.Pointer mono_mempool_alloc0(com.nativelibs4java.mono.library.MonoLibrary.MonoMemPool pool, int size);
	/// Original signature : <code>bool mono_mempool_contains_addr(MonoMemPool*, void*)</code>
	boolean mono_mempool_contains_addr(com.nativelibs4java.mono.library.MonoLibrary.MonoMemPool pool, com.sun.jna.Pointer addr);
	/**
	 * Original signature : <code>char* mono_mempool_strdup(MonoMemPool*, const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_mempool_strdup(com.nativelibs4java.mono.library.MonoLibrary.MonoMemPool, java.lang.String)} and {@link #mono_mempool_strdup(com.nativelibs4java.mono.library.MonoLibrary.MonoMemPool, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.sun.jna.Pointer mono_mempool_strdup(com.nativelibs4java.mono.library.MonoLibrary.MonoMemPool pool, com.sun.jna.Pointer s);
	/// Original signature : <code>char* mono_mempool_strdup(MonoMemPool*, const char*)</code>
	com.sun.jna.Pointer mono_mempool_strdup(com.nativelibs4java.mono.library.MonoLibrary.MonoMemPool pool, java.lang.String s);
	/// Original signature : <code>int mono_mempool_get_allocated(MonoMemPool*)</code>
	int mono_mempool_get_allocated(com.nativelibs4java.mono.library.MonoLibrary.MonoMemPool pool);
	/**
	 * Function the profiler may call.<br>
	 * Original signature : <code>void mono_profiler_install(MonoProfiler*, MonoProfileFunc)</code>
	 */
	void mono_profiler_install(com.nativelibs4java.mono.library.MonoLibrary.MonoProfiler prof, com.nativelibs4java.mono.library.MonoLibrary.MonoProfileFunc shutdown_callback);
	/**
	 * Original signature : <code>void mono_profiler_set_events(MonoProfileFlags)</code><br>
	 * @param events @see MonoProfileFlags
	 */
	void mono_profiler_set_events(int events);
	/// Original signature : <code>MonoProfileFlags mono_profiler_get_events()</code>
	/**
 * @see MonoProfileFlags
 */int mono_profiler_get_events();
	/// Original signature : <code>void mono_profiler_install_appdomain(MonoProfileAppDomainFunc, MonoProfileAppDomainResult, MonoProfileAppDomainFunc, MonoProfileAppDomainFunc)</code>
	void mono_profiler_install_appdomain(com.nativelibs4java.mono.library.MonoLibrary.MonoProfileAppDomainFunc start_load, com.nativelibs4java.mono.library.MonoLibrary.MonoProfileAppDomainResult end_load, com.nativelibs4java.mono.library.MonoLibrary.MonoProfileAppDomainFunc start_unload, com.nativelibs4java.mono.library.MonoLibrary.MonoProfileAppDomainFunc end_unload);
	/// Original signature : <code>void mono_profiler_install_assembly(MonoProfileAssemblyFunc, MonoProfileAssemblyResult, MonoProfileAssemblyFunc, MonoProfileAssemblyFunc)</code>
	void mono_profiler_install_assembly(com.nativelibs4java.mono.library.MonoLibrary.MonoProfileAssemblyFunc start_load, com.nativelibs4java.mono.library.MonoLibrary.MonoProfileAssemblyResult end_load, com.nativelibs4java.mono.library.MonoLibrary.MonoProfileAssemblyFunc start_unload, com.nativelibs4java.mono.library.MonoLibrary.MonoProfileAssemblyFunc end_unload);
	/// Original signature : <code>void mono_profiler_install_module(MonoProfileModuleFunc, MonoProfileModuleResult, MonoProfileModuleFunc, MonoProfileModuleFunc)</code>
	void mono_profiler_install_module(com.nativelibs4java.mono.library.MonoLibrary.MonoProfileModuleFunc start_load, com.nativelibs4java.mono.library.MonoLibrary.MonoProfileModuleResult end_load, com.nativelibs4java.mono.library.MonoLibrary.MonoProfileModuleFunc start_unload, com.nativelibs4java.mono.library.MonoLibrary.MonoProfileModuleFunc end_unload);
	/// Original signature : <code>void mono_profiler_install_class(MonoProfileClassFunc, MonoProfileClassResult, MonoProfileClassFunc, MonoProfileClassFunc)</code>
	void mono_profiler_install_class(com.nativelibs4java.mono.library.MonoLibrary.MonoProfileClassFunc start_load, com.nativelibs4java.mono.library.MonoLibrary.MonoProfileClassResult end_load, com.nativelibs4java.mono.library.MonoLibrary.MonoProfileClassFunc start_unload, com.nativelibs4java.mono.library.MonoLibrary.MonoProfileClassFunc end_unload);
	/// Original signature : <code>void mono_profiler_install_jit_compile(MonoProfileMethodFunc, MonoProfileMethodResult)</code>
	void mono_profiler_install_jit_compile(com.nativelibs4java.mono.library.MonoLibrary.MonoProfileMethodFunc start, com.nativelibs4java.mono.library.MonoLibrary.MonoProfileMethodResult end);
	/// Original signature : <code>void mono_profiler_install_jit_end(MonoProfileJitResult)</code>
	void mono_profiler_install_jit_end(com.nativelibs4java.mono.library.MonoLibrary.MonoProfileJitResult end);
	/// Original signature : <code>void mono_profiler_install_method_free(MonoProfileMethodFunc)</code>
	void mono_profiler_install_method_free(com.nativelibs4java.mono.library.MonoLibrary.MonoProfileMethodFunc callback);
	/// Original signature : <code>void mono_profiler_install_enter_leave(MonoProfileMethodFunc, MonoProfileMethodFunc)</code>
	void mono_profiler_install_enter_leave(com.nativelibs4java.mono.library.MonoLibrary.MonoProfileMethodFunc enter, com.nativelibs4java.mono.library.MonoLibrary.MonoProfileMethodFunc fleave);
	/// Original signature : <code>void mono_profiler_install_thread(MonoProfileThreadFunc, MonoProfileThreadFunc)</code>
	void mono_profiler_install_thread(com.nativelibs4java.mono.library.MonoLibrary.MonoProfileThreadFunc start, com.nativelibs4java.mono.library.MonoLibrary.MonoProfileThreadFunc end);
	/// Original signature : <code>void mono_profiler_install_transition(MonoProfileMethodResult)</code>
	void mono_profiler_install_transition(com.nativelibs4java.mono.library.MonoLibrary.MonoProfileMethodResult callback);
	/// Original signature : <code>void mono_profiler_install_allocation(MonoProfileAllocFunc)</code>
	void mono_profiler_install_allocation(com.nativelibs4java.mono.library.MonoLibrary.MonoProfileAllocFunc callback);
	/// Original signature : <code>void mono_profiler_install_statistical(MonoProfileStatFunc)</code>
	void mono_profiler_install_statistical(com.nativelibs4java.mono.library.MonoLibrary.MonoProfileStatFunc callback);
	/// Original signature : <code>void mono_profiler_install_statistical_call_chain(MonoProfileStatCallChainFunc, int)</code>
	void mono_profiler_install_statistical_call_chain(com.nativelibs4java.mono.library.MonoLibrary.MonoProfileStatCallChainFunc callback, int call_chain_depth);
	/// Original signature : <code>void mono_profiler_install_exception(MonoProfileExceptionFunc, MonoProfileMethodFunc, MonoProfileExceptionClauseFunc)</code>
	void mono_profiler_install_exception(com.nativelibs4java.mono.library.MonoLibrary.MonoProfileExceptionFunc throw_callback, com.nativelibs4java.mono.library.MonoLibrary.MonoProfileMethodFunc exc_method_leave, com.nativelibs4java.mono.library.MonoLibrary.MonoProfileExceptionClauseFunc clause_callback);
	/// Original signature : <code>void mono_profiler_install_coverage_filter(MonoProfileCoverageFilterFunc)</code>
	void mono_profiler_install_coverage_filter(com.nativelibs4java.mono.library.MonoLibrary.MonoProfileCoverageFilterFunc callback);
	/// Original signature : <code>void mono_profiler_coverage_get(MonoProfiler*, MonoMethod*, MonoProfileCoverageFunc)</code>
	void mono_profiler_coverage_get(com.nativelibs4java.mono.library.MonoLibrary.MonoProfiler prof, com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, com.nativelibs4java.mono.library.MonoLibrary.MonoProfileCoverageFunc func);
	/// Original signature : <code>void mono_profiler_install_gc(MonoProfileGCFunc, MonoProfileGCResizeFunc)</code>
	void mono_profiler_install_gc(com.nativelibs4java.mono.library.MonoLibrary.MonoProfileGCFunc callback, com.nativelibs4java.mono.library.MonoLibrary.MonoProfileGCResizeFunc heap_resize_callback);
	/// Original signature : <code>void mono_profiler_install_runtime_initialized(MonoProfileFunc)</code>
	void mono_profiler_install_runtime_initialized(com.nativelibs4java.mono.library.MonoLibrary.MonoProfileFunc runtime_initialized_callback);
	/**
	 * Original signature : <code>void mono_profiler_load(const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_profiler_load(java.lang.String)} and {@link #mono_profiler_load(com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	void mono_profiler_load(com.sun.jna.Pointer desc);
	/// Original signature : <code>void mono_profiler_load(const char*)</code>
	void mono_profiler_load(java.lang.String desc);
	/// Original signature : <code>char* mono_opcode_name(int)</code>
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z16mono_opcode_namei", "?mono_opcode_name@@YAQBDH@Z"})
	java.lang.String mono_opcode_name(int opcode);
	/// Original signature : <code>void mono_images_init()</code>
	void mono_images_init();
	/// Original signature : <code>void mono_images_cleanup()</code>
	void mono_images_cleanup();
	/**
	 * Original signature : <code>MonoImage* mono_image_open(const char*, MonoImageOpenStatus*)</code><br>
	 * @deprecated use the safer methods {@link #mono_image_open(java.lang.String, java.nio.IntBuffer)} and {@link #mono_image_open(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead<br>
	 * @param status @see MonoImageOpenStatus
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoImage mono_image_open(com.sun.jna.Pointer fname, com.sun.jna.ptr.IntByReference status);
	/// Original signature : <code>MonoImage* mono_image_open(const char*, MonoImageOpenStatus*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoImage mono_image_open(java.lang.String fname, java.nio.IntBuffer status);
	/**
	 * Original signature : <code>MonoImage* mono_image_open_full(const char*, MonoImageOpenStatus*, bool)</code><br>
	 * @deprecated use the safer methods {@link #mono_image_open_full(java.lang.String, java.nio.IntBuffer, boolean)} and {@link #mono_image_open_full(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, boolean)} instead<br>
	 * @param status @see MonoImageOpenStatus
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoImage mono_image_open_full(com.sun.jna.Pointer fname, com.sun.jna.ptr.IntByReference status, boolean refonly);
	/// Original signature : <code>MonoImage* mono_image_open_full(const char*, MonoImageOpenStatus*, bool)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoImage mono_image_open_full(java.lang.String fname, java.nio.IntBuffer status, boolean refonly);
	/**
	 * Original signature : <code>MonoImage* mono_pe_file_open(const char*, MonoImageOpenStatus*)</code><br>
	 * @deprecated use the safer methods {@link #mono_pe_file_open(java.lang.String, java.nio.IntBuffer)} and {@link #mono_pe_file_open(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead<br>
	 * @param status @see MonoImageOpenStatus
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoImage mono_pe_file_open(com.sun.jna.Pointer fname, com.sun.jna.ptr.IntByReference status);
	/// Original signature : <code>MonoImage* mono_pe_file_open(const char*, MonoImageOpenStatus*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoImage mono_pe_file_open(java.lang.String fname, java.nio.IntBuffer status);
	/**
	 * Original signature : <code>MonoImage* mono_image_open_from_data(char*, int, bool, MonoImageOpenStatus*)</code><br>
	 * @deprecated use the safer methods {@link #mono_image_open_from_data(java.nio.ByteBuffer, int, boolean, java.nio.IntBuffer)} and {@link #mono_image_open_from_data(com.sun.jna.Pointer, int, boolean, com.sun.jna.ptr.IntByReference)} instead<br>
	 * @param status @see MonoImageOpenStatus
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoImage mono_image_open_from_data(com.sun.jna.Pointer data, int data_len, boolean need_copy, com.sun.jna.ptr.IntByReference status);
	/// Original signature : <code>MonoImage* mono_image_open_from_data(char*, int, bool, MonoImageOpenStatus*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoImage mono_image_open_from_data(java.nio.ByteBuffer data, int data_len, boolean need_copy, java.nio.IntBuffer status);
	/**
	 * Original signature : <code>MonoImage* mono_image_open_from_data_full(char*, int, bool, MonoImageOpenStatus*, bool)</code><br>
	 * @deprecated use the safer methods {@link #mono_image_open_from_data_full(java.nio.ByteBuffer, int, boolean, java.nio.IntBuffer, boolean)} and {@link #mono_image_open_from_data_full(com.sun.jna.Pointer, int, boolean, com.sun.jna.ptr.IntByReference, boolean)} instead<br>
	 * @param status @see MonoImageOpenStatus
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoImage mono_image_open_from_data_full(com.sun.jna.Pointer data, int data_len, boolean need_copy, com.sun.jna.ptr.IntByReference status, boolean refonly);
	/// Original signature : <code>MonoImage* mono_image_open_from_data_full(char*, int, bool, MonoImageOpenStatus*, bool)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoImage mono_image_open_from_data_full(java.nio.ByteBuffer data, int data_len, boolean need_copy, java.nio.IntBuffer status, boolean refonly);
	/// Original signature : <code>void mono_image_fixup_vtable(MonoImage*)</code>
	void mono_image_fixup_vtable(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image);
	/**
	 * Original signature : <code>MonoImage* mono_image_loaded(const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_image_loaded(java.lang.String)} and {@link #mono_image_loaded(com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoImage mono_image_loaded(com.sun.jna.Pointer name);
	/// Original signature : <code>MonoImage* mono_image_loaded(const char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoImage mono_image_loaded(java.lang.String name);
	/**
	 * Original signature : <code>MonoImage* mono_image_loaded_full(const char*, bool)</code><br>
	 * @deprecated use the safer methods {@link #mono_image_loaded_full(java.lang.String, boolean)} and {@link #mono_image_loaded_full(com.sun.jna.Pointer, boolean)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoImage mono_image_loaded_full(com.sun.jna.Pointer name, boolean refonly);
	/// Original signature : <code>MonoImage* mono_image_loaded_full(const char*, bool)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoImage mono_image_loaded_full(java.lang.String name, boolean refonly);
	/**
	 * Original signature : <code>MonoImage* mono_image_loaded_by_guid(const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_image_loaded_by_guid(java.lang.String)} and {@link #mono_image_loaded_by_guid(com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoImage mono_image_loaded_by_guid(com.sun.jna.Pointer guid);
	/// Original signature : <code>MonoImage* mono_image_loaded_by_guid(const char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoImage mono_image_loaded_by_guid(java.lang.String guid);
	/**
	 * Original signature : <code>MonoImage* mono_image_loaded_by_guid_full(const char*, bool)</code><br>
	 * @deprecated use the safer methods {@link #mono_image_loaded_by_guid_full(java.lang.String, boolean)} and {@link #mono_image_loaded_by_guid_full(com.sun.jna.Pointer, boolean)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoImage mono_image_loaded_by_guid_full(com.sun.jna.Pointer guid, boolean refonly);
	/// Original signature : <code>MonoImage* mono_image_loaded_by_guid_full(const char*, bool)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoImage mono_image_loaded_by_guid_full(java.lang.String guid, boolean refonly);
	/// Original signature : <code>void mono_image_init(MonoImage*)</code>
	void mono_image_init(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image);
	/// Original signature : <code>void mono_image_close(MonoImage*)</code>
	void mono_image_close(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image);
	/// Original signature : <code>void mono_image_addref(MonoImage*)</code>
	void mono_image_addref(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image);
	/**
	 * Original signature : <code>char* mono_image_strerror(MonoImageOpenStatus)</code><br>
	 * @param status @see MonoImageOpenStatus
	 */
	java.lang.String mono_image_strerror(int status);
	/**
	 * Original signature : <code>int mono_image_ensure_section(MonoImage*, const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_image_ensure_section(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, java.lang.String)} and {@link #mono_image_ensure_section(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	int mono_image_ensure_section(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, com.sun.jna.Pointer section);
	/// Original signature : <code>int mono_image_ensure_section(MonoImage*, const char*)</code>
	int mono_image_ensure_section(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, java.lang.String section);
	/// Original signature : <code>int mono_image_ensure_section_idx(MonoImage*, int)</code>
	int mono_image_ensure_section_idx(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int section);
	/// Original signature : <code>int mono_image_get_entry_point(MonoImage*)</code>
	int mono_image_get_entry_point(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image);
	/**
	 * Original signature : <code>char* mono_image_get_resource(MonoImage*, int, int*)</code><br>
	 * @deprecated use the safer methods {@link #mono_image_get_resource(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, int, java.nio.IntBuffer)} and {@link #mono_image_get_resource(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated
	java.lang.String mono_image_get_resource(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int offset, com.sun.jna.ptr.IntByReference size);
	/// Original signature : <code>char* mono_image_get_resource(MonoImage*, int, int*)</code>
	java.lang.String mono_image_get_resource(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int offset, java.nio.IntBuffer size);
	/// Original signature : <code>MonoImage* mono_image_load_file_for_image(MonoImage*, int)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoImage mono_image_load_file_for_image(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int fileidx);
	/// Original signature : <code>MonoImage* mono_image_load_module(MonoImage*, int)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoImage mono_image_load_module(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int idx);
	/// Original signature : <code>char* mono_image_get_name(MonoImage*)</code>
	java.lang.String mono_image_get_name(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image);
	/// Original signature : <code>char* mono_image_get_filename(MonoImage*)</code>
	java.lang.String mono_image_get_filename(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image);
	/// Original signature : <code>char* mono_image_get_guid(MonoImage*)</code>
	java.lang.String mono_image_get_guid(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image);
	/// Original signature : <code>MonoAssembly* mono_image_get_assembly(MonoImage*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly mono_image_get_assembly(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image);
	/// Original signature : <code>bool mono_image_is_dynamic(MonoImage*)</code>
	boolean mono_image_is_dynamic(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image);
	/// Original signature : <code>char* mono_image_rva_map(MonoImage*, int)</code>
	com.sun.jna.Pointer mono_image_rva_map(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int rva);
	/// Original signature : <code>MonoTableInfo* mono_image_get_table_info(MonoImage*, int)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoTableInfo mono_image_get_table_info(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int table_id);
	/// Original signature : <code>int mono_image_get_table_rows(MonoImage*, int)</code>
	int mono_image_get_table_rows(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int table_id);
	/// Original signature : <code>int mono_table_info_get_rows(const MonoTableInfo*)</code>
	int mono_table_info_get_rows(com.nativelibs4java.mono.library.MonoLibrary.MonoTableInfo table);
	/**
	 * This actually returns a MonoPEResourceDataEntry *, but declaring it<br>
	 * causes an include file loop.<br>
	 * Original signature : <code>void* mono_image_lookup_resource(MonoImage*, int, int, gunichar2*)</code><br>
	 * @deprecated use the safer methods {@link #mono_image_lookup_resource(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, int, int, java.nio.ShortBuffer)} and {@link #mono_image_lookup_resource(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, int, int, com.sun.jna.ptr.ShortByReference)} instead
	 */
	@java.lang.Deprecated
	com.sun.jna.Pointer mono_image_lookup_resource(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int res_id, int lang_id, com.sun.jna.ptr.ShortByReference name);
	/**
	 * This actually returns a MonoPEResourceDataEntry *, but declaring it<br>
	 * causes an include file loop.<br>
	 * Original signature : <code>void* mono_image_lookup_resource(MonoImage*, int, int, gunichar2*)</code>
	 */
	com.sun.jna.Pointer mono_image_lookup_resource(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int res_id, int lang_id, java.nio.ShortBuffer name);
	/**
	 * Original signature : <code>char* mono_image_get_public_key(MonoImage*, int*)</code><br>
	 * @deprecated use the safer methods {@link #mono_image_get_public_key(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, java.nio.IntBuffer)} and {@link #mono_image_get_public_key(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated
	java.lang.String mono_image_get_public_key(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, com.sun.jna.ptr.IntByReference size);
	/// Original signature : <code>char* mono_image_get_public_key(MonoImage*, int*)</code>
	java.lang.String mono_image_get_public_key(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, java.nio.IntBuffer size);
	/**
	 * Original signature : <code>char* mono_image_get_strong_name(MonoImage*, int*)</code><br>
	 * @deprecated use the safer methods {@link #mono_image_get_strong_name(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, java.nio.IntBuffer)} and {@link #mono_image_get_strong_name(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated
	java.lang.String mono_image_get_strong_name(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, com.sun.jna.ptr.IntByReference size);
	/// Original signature : <code>char* mono_image_get_strong_name(MonoImage*, int*)</code>
	java.lang.String mono_image_get_strong_name(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, java.nio.IntBuffer size);
	/**
	 * Original signature : <code>int mono_image_strong_name_position(MonoImage*, int*)</code><br>
	 * @deprecated use the safer methods {@link #mono_image_strong_name_position(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, java.nio.IntBuffer)} and {@link #mono_image_strong_name_position(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated
	int mono_image_strong_name_position(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, com.sun.jna.ptr.IntByReference size);
	/// Original signature : <code>int mono_image_strong_name_position(MonoImage*, int*)</code>
	int mono_image_strong_name_position(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, java.nio.IntBuffer size);
	/**
	 * Original signature : <code>void mono_image_add_to_name_cache(MonoImage*, const char*, const char*, int)</code><br>
	 * @deprecated use the safer methods {@link #mono_image_add_to_name_cache(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, java.lang.String, java.lang.String, int)} and {@link #mono_image_add_to_name_cache(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@java.lang.Deprecated
	void mono_image_add_to_name_cache(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, com.sun.jna.Pointer nspace, com.sun.jna.Pointer name, int idx);
	/// Original signature : <code>void mono_image_add_to_name_cache(MonoImage*, const char*, const char*, int)</code>
	void mono_image_add_to_name_cache(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, java.lang.String nspace, java.lang.String name, int idx);
	/// Original signature : <code>bool mono_image_has_authenticode_entry(MonoImage*)</code>
	boolean mono_image_has_authenticode_entry(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image);
	/**
	 * Original signature : <code>int mono_reflection_parse_type(char*, MonoTypeNameParse*)</code><br>
	 * @deprecated use the safer methods {@link #mono_reflection_parse_type(java.nio.ByteBuffer, com.nativelibs4java.mono.library.MonoTypeNameParse)} and {@link #mono_reflection_parse_type(com.sun.jna.Pointer, com.nativelibs4java.mono.library.MonoTypeNameParse)} instead
	 */
	@java.lang.Deprecated
	int mono_reflection_parse_type(com.sun.jna.Pointer name, com.nativelibs4java.mono.library.MonoTypeNameParse info);
	/// Original signature : <code>int mono_reflection_parse_type(char*, MonoTypeNameParse*)</code>
	int mono_reflection_parse_type(java.nio.ByteBuffer name, com.nativelibs4java.mono.library.MonoTypeNameParse info);
	/// Original signature : <code>MonoType* mono_reflection_get_type(MonoImage*, MonoTypeNameParse*, bool, bool*)</code>
	com.nativelibs4java.mono.library.MonoType mono_reflection_get_type(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, com.nativelibs4java.mono.library.MonoTypeNameParse info, boolean ignorecase, boolean type_resolve);
	/// Original signature : <code>void mono_reflection_free_type_info(MonoTypeNameParse*)</code>
	void mono_reflection_free_type_info(com.nativelibs4java.mono.library.MonoTypeNameParse info);
	/**
	 * Original signature : <code>MonoType* mono_reflection_type_from_name(char*, MonoImage*)</code><br>
	 * @deprecated use the safer methods {@link #mono_reflection_type_from_name(java.nio.ByteBuffer, com.nativelibs4java.mono.library.MonoLibrary.MonoImage)} and {@link #mono_reflection_type_from_name(com.sun.jna.Pointer, com.nativelibs4java.mono.library.MonoLibrary.MonoImage)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoType mono_reflection_type_from_name(com.sun.jna.Pointer name, com.nativelibs4java.mono.library.MonoLibrary.MonoImage image);
	/// Original signature : <code>MonoType* mono_reflection_type_from_name(char*, MonoImage*)</code>
	com.nativelibs4java.mono.library.MonoType mono_reflection_type_from_name(java.nio.ByteBuffer name, com.nativelibs4java.mono.library.MonoLibrary.MonoImage image);
	/// Original signature : <code>int mono_reflection_get_token(MonoObject*)</code>
	int mono_reflection_get_token(com.nativelibs4java.mono.library.MonoObject obj);
	/// Original signature : <code>MonoReflectionAssembly* mono_assembly_get_object(MonoDomain*, MonoAssembly*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoReflectionAssembly mono_assembly_get_object(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly assembly);
	/// Original signature : <code>MonoReflectionModule* mono_module_get_object(MonoDomain*, MonoImage*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoReflectionModule mono_module_get_object(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.nativelibs4java.mono.library.MonoLibrary.MonoImage image);
	/// Original signature : <code>MonoReflectionModule* mono_module_file_get_object(MonoDomain*, MonoImage*, int)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoReflectionModule mono_module_file_get_object(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int table_index);
	/// Original signature : <code>MonoReflectionType* mono_type_get_object(MonoDomain*, MonoType*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoReflectionType mono_type_get_object(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.nativelibs4java.mono.library.MonoType type);
	/// Original signature : <code>MonoReflectionMethod* mono_method_get_object(MonoDomain*, MonoMethod*, MonoClass*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoReflectionMethod mono_method_get_object(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, com.nativelibs4java.mono.library.MonoLibrary.MonoClass refclass);
	/// Original signature : <code>MonoReflectionField* mono_field_get_object(MonoDomain*, MonoClass*, MonoClassField*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoReflectionField mono_field_get_object(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, com.nativelibs4java.mono.library.MonoLibrary.MonoClassField field);
	/// Original signature : <code>MonoReflectionProperty* mono_property_get_object(MonoDomain*, MonoClass*, MonoProperty*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoReflectionProperty mono_property_get_object(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, com.nativelibs4java.mono.library.MonoLibrary.MonoProperty property);
	/// Original signature : <code>MonoReflectionEvent* mono_event_get_object(MonoDomain*, MonoClass*, MonoEvent*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoReflectionEvent mono_event_get_object(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, com.nativelibs4java.mono.library.MonoLibrary.MonoEvent event);
	/**
	 * note: this one is slightly different: we keep the whole array of params in the cache<br>
	 * Original signature : <code>MonoArray* mono_param_get_objects(MonoDomain*, MonoMethod*)</code>
	 */
	com.nativelibs4java.mono.library.MonoArray mono_param_get_objects(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method);
	/// Original signature : <code>MonoReflectionMethodBody* mono_method_body_get_object(MonoDomain*, MonoMethod*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoReflectionMethodBody mono_method_body_get_object(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method);
	/// Original signature : <code>MonoObject* mono_get_dbnull_object(MonoDomain*)</code>
	com.nativelibs4java.mono.library.MonoObject mono_get_dbnull_object(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain);
	/// Original signature : <code>MonoArray* mono_reflection_get_custom_attrs_by_type(MonoObject*, MonoClass*)</code>
	com.nativelibs4java.mono.library.MonoArray mono_reflection_get_custom_attrs_by_type(com.nativelibs4java.mono.library.MonoObject obj, com.nativelibs4java.mono.library.MonoLibrary.MonoClass attr_klass);
	/// Original signature : <code>MonoArray* mono_reflection_get_custom_attrs(MonoObject*)</code>
	com.nativelibs4java.mono.library.MonoArray mono_reflection_get_custom_attrs(com.nativelibs4java.mono.library.MonoObject obj);
	/// Original signature : <code>MonoArray* mono_reflection_get_custom_attrs_data(MonoObject*)</code>
	com.nativelibs4java.mono.library.MonoArray mono_reflection_get_custom_attrs_data(com.nativelibs4java.mono.library.MonoObject obj);
	/// Original signature : <code>MonoArray* mono_reflection_get_custom_attrs_blob(MonoReflectionAssembly*, MonoObject*, MonoArray*, MonoArray*, MonoArray*, MonoArray*, MonoArray*)</code>
	com.nativelibs4java.mono.library.MonoArray mono_reflection_get_custom_attrs_blob(com.nativelibs4java.mono.library.MonoLibrary.MonoReflectionAssembly assembly, com.nativelibs4java.mono.library.MonoObject ctor, com.nativelibs4java.mono.library.MonoArray ctorArgs, com.nativelibs4java.mono.library.MonoArray properties, com.nativelibs4java.mono.library.MonoArray porpValues, com.nativelibs4java.mono.library.MonoArray fields, com.nativelibs4java.mono.library.MonoArray fieldValues);
	/// Original signature : <code>MonoCustomAttrInfo* mono_reflection_get_custom_attrs_info(MonoObject*)</code>
	com.nativelibs4java.mono.library.MonoCustomAttrInfo mono_reflection_get_custom_attrs_info(com.nativelibs4java.mono.library.MonoObject obj);
	/// Original signature : <code>MonoArray* mono_custom_attrs_construct(MonoCustomAttrInfo*)</code>
	com.nativelibs4java.mono.library.MonoArray mono_custom_attrs_construct(com.nativelibs4java.mono.library.MonoCustomAttrInfo cinfo);
	/// Original signature : <code>MonoCustomAttrInfo* mono_custom_attrs_from_index(MonoImage*, int)</code>
	com.nativelibs4java.mono.library.MonoCustomAttrInfo mono_custom_attrs_from_index(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int idx);
	/// Original signature : <code>MonoCustomAttrInfo* mono_custom_attrs_from_method(MonoMethod*)</code>
	com.nativelibs4java.mono.library.MonoCustomAttrInfo mono_custom_attrs_from_method(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method);
	/// Original signature : <code>MonoCustomAttrInfo* mono_custom_attrs_from_class(MonoClass*)</code>
	com.nativelibs4java.mono.library.MonoCustomAttrInfo mono_custom_attrs_from_class(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>MonoCustomAttrInfo* mono_custom_attrs_from_assembly(MonoAssembly*)</code>
	com.nativelibs4java.mono.library.MonoCustomAttrInfo mono_custom_attrs_from_assembly(com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly assembly);
	/// Original signature : <code>MonoCustomAttrInfo* mono_custom_attrs_from_property(MonoClass*, MonoProperty*)</code>
	com.nativelibs4java.mono.library.MonoCustomAttrInfo mono_custom_attrs_from_property(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, com.nativelibs4java.mono.library.MonoLibrary.MonoProperty property);
	/// Original signature : <code>MonoCustomAttrInfo* mono_custom_attrs_from_event(MonoClass*, MonoEvent*)</code>
	com.nativelibs4java.mono.library.MonoCustomAttrInfo mono_custom_attrs_from_event(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, com.nativelibs4java.mono.library.MonoLibrary.MonoEvent event);
	/// Original signature : <code>MonoCustomAttrInfo* mono_custom_attrs_from_field(MonoClass*, MonoClassField*)</code>
	com.nativelibs4java.mono.library.MonoCustomAttrInfo mono_custom_attrs_from_field(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, com.nativelibs4java.mono.library.MonoLibrary.MonoClassField field);
	/// Original signature : <code>MonoCustomAttrInfo* mono_custom_attrs_from_param(MonoMethod*, int)</code>
	com.nativelibs4java.mono.library.MonoCustomAttrInfo mono_custom_attrs_from_param(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, int param);
	/// Original signature : <code>bool mono_custom_attrs_has_attr(MonoCustomAttrInfo*, MonoClass*)</code>
	boolean mono_custom_attrs_has_attr(com.nativelibs4java.mono.library.MonoCustomAttrInfo ainfo, com.nativelibs4java.mono.library.MonoLibrary.MonoClass attr_klass);
	/// Original signature : <code>MonoObject* mono_custom_attrs_get_attr(MonoCustomAttrInfo*, MonoClass*)</code>
	com.nativelibs4java.mono.library.MonoObject mono_custom_attrs_get_attr(com.nativelibs4java.mono.library.MonoCustomAttrInfo ainfo, com.nativelibs4java.mono.library.MonoLibrary.MonoClass attr_klass);
	/// Original signature : <code>void mono_custom_attrs_free(MonoCustomAttrInfo*)</code>
	void mono_custom_attrs_free(com.nativelibs4java.mono.library.MonoCustomAttrInfo ainfo);
	/// Original signature : <code>int mono_declsec_flags_from_method(MonoMethod*)</code>
	int mono_declsec_flags_from_method(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method);
	/// Original signature : <code>int mono_declsec_flags_from_class(MonoClass*)</code>
	int mono_declsec_flags_from_class(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>int mono_declsec_flags_from_assembly(MonoAssembly*)</code>
	int mono_declsec_flags_from_assembly(com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly assembly);
	/// Original signature : <code>MonoBoolean mono_declsec_get_demands(MonoMethod*, MonoDeclSecurityActions*)</code>
	byte mono_declsec_get_demands(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod callee, com.nativelibs4java.mono.library.MonoDeclSecurityActions demands);
	/// Original signature : <code>MonoBoolean mono_declsec_get_linkdemands(MonoMethod*, MonoDeclSecurityActions*, MonoDeclSecurityActions*)</code>
	byte mono_declsec_get_linkdemands(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod callee, com.nativelibs4java.mono.library.MonoDeclSecurityActions klass, com.nativelibs4java.mono.library.MonoDeclSecurityActions cmethod);
	/// Original signature : <code>MonoBoolean mono_declsec_get_inheritdemands_class(MonoClass*, MonoDeclSecurityActions*)</code>
	byte mono_declsec_get_inheritdemands_class(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, com.nativelibs4java.mono.library.MonoDeclSecurityActions demands);
	/// Original signature : <code>MonoBoolean mono_declsec_get_inheritdemands_method(MonoMethod*, MonoDeclSecurityActions*)</code>
	byte mono_declsec_get_inheritdemands_method(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod callee, com.nativelibs4java.mono.library.MonoDeclSecurityActions demands);
	/// Original signature : <code>MonoBoolean mono_declsec_get_method_action(MonoMethod*, int, MonoDeclSecurityEntry*)</code>
	byte mono_declsec_get_method_action(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, int action, com.nativelibs4java.mono.library.MonoDeclSecurityEntry entry);
	/// Original signature : <code>MonoBoolean mono_declsec_get_class_action(MonoClass*, int, MonoDeclSecurityEntry*)</code>
	byte mono_declsec_get_class_action(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, int action, com.nativelibs4java.mono.library.MonoDeclSecurityEntry entry);
	/// Original signature : <code>MonoBoolean mono_declsec_get_assembly_action(MonoAssembly*, int, MonoDeclSecurityEntry*)</code>
	byte mono_declsec_get_assembly_action(com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly assembly, int action, com.nativelibs4java.mono.library.MonoDeclSecurityEntry entry);
	/// Original signature : <code>MonoClass* mono_class_get(MonoImage*, int)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_class_get(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int type_token);
	/// Original signature : <code>MonoClass* mono_class_get_full(MonoImage*, int, MonoGenericContext*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_class_get_full(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int type_token, com.nativelibs4java.mono.library.MonoLibrary.MonoGenericContext context);
	/// Original signature : <code>bool mono_class_init(MonoClass*)</code>
	boolean mono_class_init(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>MonoVTable* mono_class_vtable(MonoDomain*, MonoClass*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoVTable mono_class_vtable(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/**
	 * Original signature : <code>MonoClass* mono_class_from_name(MonoImage*, const char*, const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_class_from_name(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, java.lang.String, java.lang.String)} and {@link #mono_class_from_name(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_class_from_name(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, com.sun.jna.Pointer name_space, com.sun.jna.Pointer name);
	/// Original signature : <code>MonoClass* mono_class_from_name(MonoImage*, const char*, const char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_class_from_name(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, java.lang.String name_space, java.lang.String name);
	/**
	 * Original signature : <code>MonoClass* mono_class_from_name_case(MonoImage*, const char*, const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_class_from_name_case(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, java.lang.String, java.lang.String)} and {@link #mono_class_from_name_case(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_class_from_name_case(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, com.sun.jna.Pointer name_space, com.sun.jna.Pointer name);
	/// Original signature : <code>MonoClass* mono_class_from_name_case(MonoImage*, const char*, const char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_class_from_name_case(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, java.lang.String name_space, java.lang.String name);
	/**
	 * Original signature : <code>MonoMethod* mono_class_get_method_from_name_flags(MonoClass*, const char*, int, int)</code><br>
	 * @deprecated use the safer methods {@link #mono_class_get_method_from_name_flags(com.nativelibs4java.mono.library.MonoLibrary.MonoClass, java.lang.String, int, int)} and {@link #mono_class_get_method_from_name_flags(com.nativelibs4java.mono.library.MonoLibrary.MonoClass, com.sun.jna.Pointer, int, int)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoMethod mono_class_get_method_from_name_flags(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, com.sun.jna.Pointer name, int param_count, int flags);
	/// Original signature : <code>MonoMethod* mono_class_get_method_from_name_flags(MonoClass*, const char*, int, int)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoMethod mono_class_get_method_from_name_flags(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, java.lang.String name, int param_count, int flags);
	/// Original signature : <code>MonoClass* mono_class_from_typeref(MonoImage*, int)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_class_from_typeref(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int type_token);
	/// Original signature : <code>MonoClass* mono_class_from_generic_parameter(MonoGenericParam*, MonoImage*, bool)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_class_from_generic_parameter(com.nativelibs4java.mono.library.MonoLibrary.MonoGenericParam param, com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, boolean is_mvar);
	/// Original signature : <code>MonoType* mono_class_inflate_generic_type(MonoType*, MonoGenericContext*)</code>
	com.nativelibs4java.mono.library.MonoType mono_class_inflate_generic_type(com.nativelibs4java.mono.library.MonoType type, com.nativelibs4java.mono.library.MonoLibrary.MonoGenericContext context);
	/// Original signature : <code>MonoMethod* mono_class_inflate_generic_method(MonoMethod*, MonoGenericContext*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoMethod mono_class_inflate_generic_method(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, com.nativelibs4java.mono.library.MonoLibrary.MonoGenericContext context);
	/// Original signature : <code>MonoMethod* mono_get_inflated_method(MonoMethod*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoMethod mono_get_inflated_method(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method);
	/**
	 * Original signature : <code>MonoClassField* mono_field_from_token(MonoImage*, int, MonoClass**, MonoGenericContext*)</code><br>
	 * @deprecated use the safer method {@link #mono_field_from_token(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, int, com.nativelibs4java.mono.library.MonoLibrary.MonoClass[], com.nativelibs4java.mono.library.MonoLibrary.MonoGenericContext)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoClassField mono_field_from_token(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int token, com.sun.jna.ptr.PointerByReference retklass, com.nativelibs4java.mono.library.MonoLibrary.MonoGenericContext context);
	/// Original signature : <code>MonoClassField* mono_field_from_token(MonoImage*, int, MonoClass**, MonoGenericContext*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClassField mono_field_from_token(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int token, com.nativelibs4java.mono.library.MonoLibrary.MonoClass retklass[], com.nativelibs4java.mono.library.MonoLibrary.MonoGenericContext context);
	/// Original signature : <code>MonoClass* mono_bounded_array_class_get(MonoClass*, int, bool)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_bounded_array_class_get(com.nativelibs4java.mono.library.MonoLibrary.MonoClass element_class, int rank, boolean bounded);
	/// Original signature : <code>MonoClass* mono_array_class_get(MonoClass*, int)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_array_class_get(com.nativelibs4java.mono.library.MonoLibrary.MonoClass element_class, int rank);
	/// Original signature : <code>MonoClass* mono_ptr_class_get(MonoType*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_ptr_class_get(com.nativelibs4java.mono.library.MonoType type);
	/// Original signature : <code>MonoClassField* mono_class_get_field(MonoClass*, int)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClassField mono_class_get_field(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, int field_token);
	/**
	 * Original signature : <code>MonoClassField* mono_class_get_field_from_name(MonoClass*, const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_class_get_field_from_name(com.nativelibs4java.mono.library.MonoLibrary.MonoClass, java.lang.String)} and {@link #mono_class_get_field_from_name(com.nativelibs4java.mono.library.MonoLibrary.MonoClass, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoClassField mono_class_get_field_from_name(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, com.sun.jna.Pointer name);
	/// Original signature : <code>MonoClassField* mono_class_get_field_from_name(MonoClass*, const char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClassField mono_class_get_field_from_name(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, java.lang.String name);
	/// Original signature : <code>int mono_class_get_field_token(MonoClassField*)</code>
	int mono_class_get_field_token(com.nativelibs4java.mono.library.MonoLibrary.MonoClassField field);
	/// Original signature : <code>int mono_class_get_event_token(MonoEvent*)</code>
	int mono_class_get_event_token(com.nativelibs4java.mono.library.MonoLibrary.MonoEvent event);
	/**
	 * Original signature : <code>MonoProperty* mono_class_get_property_from_name(MonoClass*, const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_class_get_property_from_name(com.nativelibs4java.mono.library.MonoLibrary.MonoClass, java.lang.String)} and {@link #mono_class_get_property_from_name(com.nativelibs4java.mono.library.MonoLibrary.MonoClass, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoProperty mono_class_get_property_from_name(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, com.sun.jna.Pointer name);
	/// Original signature : <code>MonoProperty* mono_class_get_property_from_name(MonoClass*, const char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoProperty mono_class_get_property_from_name(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, java.lang.String name);
	/// Original signature : <code>int mono_class_get_property_token(MonoProperty*)</code>
	int mono_class_get_property_token(com.nativelibs4java.mono.library.MonoLibrary.MonoProperty prop);
	/// Original signature : <code>int mono_array_element_size(MonoClass*)</code>
	int mono_array_element_size(com.nativelibs4java.mono.library.MonoLibrary.MonoClass ac);
	/// Original signature : <code>int mono_class_instance_size(MonoClass*)</code>
	int mono_class_instance_size(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>int mono_class_array_element_size(MonoClass*)</code>
	int mono_class_array_element_size(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>int mono_class_data_size(MonoClass*)</code>
	int mono_class_data_size(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/**
	 * Original signature : <code>int mono_class_value_size(MonoClass*, int*)</code><br>
	 * @deprecated use the safer methods {@link #mono_class_value_size(com.nativelibs4java.mono.library.MonoLibrary.MonoClass, java.nio.IntBuffer)} and {@link #mono_class_value_size(com.nativelibs4java.mono.library.MonoLibrary.MonoClass, com.sun.jna.ptr.IntByReference)} instead
	 */
	@java.lang.Deprecated
	int mono_class_value_size(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, com.sun.jna.ptr.IntByReference align);
	/// Original signature : <code>int mono_class_value_size(MonoClass*, int*)</code>
	int mono_class_value_size(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, java.nio.IntBuffer align);
	/// Original signature : <code>int mono_class_min_align(MonoClass*)</code>
	int mono_class_min_align(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>MonoClass* mono_class_from_mono_type(MonoType*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_class_from_mono_type(com.nativelibs4java.mono.library.MonoType type);
	/// Original signature : <code>bool mono_class_is_subclass_of(MonoClass*, MonoClass*, bool)</code>
	boolean mono_class_is_subclass_of(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, com.nativelibs4java.mono.library.MonoLibrary.MonoClass klassc, boolean check_interfaces);
	/// Original signature : <code>bool mono_class_is_assignable_from(MonoClass*, MonoClass*)</code>
	boolean mono_class_is_assignable_from(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, com.nativelibs4java.mono.library.MonoLibrary.MonoClass oklass);
	/**
	 * Original signature : <code>void* mono_ldtoken(MonoImage*, int, MonoClass**, MonoGenericContext*)</code><br>
	 * @deprecated use the safer method {@link #mono_ldtoken(com.nativelibs4java.mono.library.MonoLibrary.MonoImage, int, com.nativelibs4java.mono.library.MonoLibrary.MonoClass[], com.nativelibs4java.mono.library.MonoLibrary.MonoGenericContext)} instead
	 */
	@java.lang.Deprecated
	com.sun.jna.Pointer mono_ldtoken(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int token, com.sun.jna.ptr.PointerByReference retclass, com.nativelibs4java.mono.library.MonoLibrary.MonoGenericContext context);
	/// Original signature : <code>void* mono_ldtoken(MonoImage*, int, MonoClass**, MonoGenericContext*)</code>
	com.sun.jna.Pointer mono_ldtoken(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int token, com.nativelibs4java.mono.library.MonoLibrary.MonoClass retclass[], com.nativelibs4java.mono.library.MonoLibrary.MonoGenericContext context);
	/// Original signature : <code>char* mono_type_get_name(MonoType*)</code>
	com.sun.jna.Pointer mono_type_get_name(com.nativelibs4java.mono.library.MonoType type);
	/// Original signature : <code>MonoType* mono_type_get_underlying_type(MonoType*)</code>
	com.nativelibs4java.mono.library.MonoType mono_type_get_underlying_type(com.nativelibs4java.mono.library.MonoType type);
	/**
	 * MonoClass accessors<br>
	 * Original signature : <code>MonoImage* mono_class_get_image(MonoClass*)</code>
	 */
	com.nativelibs4java.mono.library.MonoLibrary.MonoImage mono_class_get_image(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>MonoClass* mono_class_get_element_class(MonoClass*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_class_get_element_class(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>bool mono_class_is_valuetype(MonoClass*)</code>
	boolean mono_class_is_valuetype(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>bool mono_class_is_enum(MonoClass*)</code>
	boolean mono_class_is_enum(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>MonoType* mono_class_enum_basetype(MonoClass*)</code>
	com.nativelibs4java.mono.library.MonoType mono_class_enum_basetype(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>MonoClass* mono_class_get_parent(MonoClass*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_class_get_parent(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>MonoClass* mono_class_get_nesting_type(MonoClass*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_class_get_nesting_type(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>int mono_class_get_rank(MonoClass*)</code>
	int mono_class_get_rank(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>int mono_class_get_flags(MonoClass*)</code>
	int mono_class_get_flags(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>char* mono_class_get_name(MonoClass*)</code>
	java.lang.String mono_class_get_name(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>char* mono_class_get_namespace(MonoClass*)</code>
	java.lang.String mono_class_get_namespace(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>MonoType* mono_class_get_type(MonoClass*)</code>
	com.nativelibs4java.mono.library.MonoType mono_class_get_type(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>int mono_class_get_type_token(MonoClass*)</code>
	int mono_class_get_type_token(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>MonoType* mono_class_get_byref_type(MonoClass*)</code>
	com.nativelibs4java.mono.library.MonoType mono_class_get_byref_type(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>int mono_class_num_fields(MonoClass*)</code>
	int mono_class_num_fields(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>int mono_class_num_methods(MonoClass*)</code>
	int mono_class_num_methods(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>int mono_class_num_properties(MonoClass*)</code>
	int mono_class_num_properties(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>int mono_class_num_events(MonoClass*)</code>
	int mono_class_num_events(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass);
	/// Original signature : <code>MonoClassField* mono_class_get_fields(MonoClass*, void**)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClassField mono_class_get_fields(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, com.sun.jna.ptr.PointerByReference iter);
	/// Original signature : <code>MonoMethod* mono_class_get_methods(MonoClass*, void**)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoMethod mono_class_get_methods(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, com.sun.jna.ptr.PointerByReference iter);
	/// Original signature : <code>MonoProperty* mono_class_get_properties(MonoClass*, void**)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoProperty mono_class_get_properties(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, com.sun.jna.ptr.PointerByReference iter);
	/// Original signature : <code>MonoEvent* mono_class_get_events(MonoClass*, void**)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoEvent mono_class_get_events(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, com.sun.jna.ptr.PointerByReference iter);
	/// Original signature : <code>MonoClass* mono_class_get_interfaces(MonoClass*, void**)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_class_get_interfaces(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, com.sun.jna.ptr.PointerByReference iter);
	/// Original signature : <code>MonoClass* mono_class_get_nested_types(MonoClass*, void**)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_class_get_nested_types(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, com.sun.jna.ptr.PointerByReference iter);
	/**
	 * MonoClassField accessors<br>
	 * Original signature : <code>char* mono_field_get_name(MonoClassField*)</code>
	 */
	java.lang.String mono_field_get_name(com.nativelibs4java.mono.library.MonoLibrary.MonoClassField field);
	/// Original signature : <code>MonoType* mono_field_get_type(MonoClassField*)</code>
	com.nativelibs4java.mono.library.MonoType mono_field_get_type(com.nativelibs4java.mono.library.MonoLibrary.MonoClassField field);
	/// Original signature : <code>MonoClass* mono_field_get_parent(MonoClassField*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_field_get_parent(com.nativelibs4java.mono.library.MonoLibrary.MonoClassField field);
	/// Original signature : <code>int mono_field_get_flags(MonoClassField*)</code>
	int mono_field_get_flags(com.nativelibs4java.mono.library.MonoLibrary.MonoClassField field);
	/// Original signature : <code>int mono_field_get_offset(MonoClassField*)</code>
	int mono_field_get_offset(com.nativelibs4java.mono.library.MonoLibrary.MonoClassField field);
	/// Original signature : <code>char* mono_field_get_data(MonoClassField*)</code>
	java.lang.String mono_field_get_data(com.nativelibs4java.mono.library.MonoLibrary.MonoClassField field);
	/**
	 * MonoProperty acessors<br>
	 * Original signature : <code>char* mono_property_get_name(MonoProperty*)</code>
	 */
	java.lang.String mono_property_get_name(com.nativelibs4java.mono.library.MonoLibrary.MonoProperty prop);
	/// Original signature : <code>MonoMethod* mono_property_get_set_method(MonoProperty*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoMethod mono_property_get_set_method(com.nativelibs4java.mono.library.MonoLibrary.MonoProperty prop);
	/// Original signature : <code>MonoMethod* mono_property_get_get_method(MonoProperty*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoMethod mono_property_get_get_method(com.nativelibs4java.mono.library.MonoLibrary.MonoProperty prop);
	/// Original signature : <code>MonoClass* mono_property_get_parent(MonoProperty*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_property_get_parent(com.nativelibs4java.mono.library.MonoLibrary.MonoProperty prop);
	/// Original signature : <code>int mono_property_get_flags(MonoProperty*)</code>
	int mono_property_get_flags(com.nativelibs4java.mono.library.MonoLibrary.MonoProperty prop);
	/**
	 * MonoEvent accessors<br>
	 * Original signature : <code>char* mono_event_get_name(MonoEvent*)</code>
	 */
	java.lang.String mono_event_get_name(com.nativelibs4java.mono.library.MonoLibrary.MonoEvent event);
	/// Original signature : <code>MonoMethod* mono_event_get_add_method(MonoEvent*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoMethod mono_event_get_add_method(com.nativelibs4java.mono.library.MonoLibrary.MonoEvent event);
	/// Original signature : <code>MonoMethod* mono_event_get_remove_method(MonoEvent*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoMethod mono_event_get_remove_method(com.nativelibs4java.mono.library.MonoLibrary.MonoEvent event);
	/// Original signature : <code>MonoMethod* mono_event_get_raise_method(MonoEvent*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoMethod mono_event_get_raise_method(com.nativelibs4java.mono.library.MonoLibrary.MonoEvent event);
	/// Original signature : <code>MonoClass* mono_event_get_parent(MonoEvent*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoClass mono_event_get_parent(com.nativelibs4java.mono.library.MonoLibrary.MonoEvent event);
	/// Original signature : <code>int mono_event_get_flags(MonoEvent*)</code>
	int mono_event_get_flags(com.nativelibs4java.mono.library.MonoLibrary.MonoEvent event);
	/**
	 * Original signature : <code>MonoMethod* mono_class_get_method_from_name(MonoClass*, const char*, int)</code><br>
	 * @deprecated use the safer methods {@link #mono_class_get_method_from_name(com.nativelibs4java.mono.library.MonoLibrary.MonoClass, java.lang.String, int)} and {@link #mono_class_get_method_from_name(com.nativelibs4java.mono.library.MonoLibrary.MonoClass, com.sun.jna.Pointer, int)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoMethod mono_class_get_method_from_name(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, com.sun.jna.Pointer name, int param_count);
	/// Original signature : <code>MonoMethod* mono_class_get_method_from_name(MonoClass*, const char*, int)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoMethod mono_class_get_method_from_name(com.nativelibs4java.mono.library.MonoLibrary.MonoClass klass, java.lang.String name, int param_count);
	/// Original signature : <code>char* mono_class_name_from_token(MonoImage*, int)</code>
	com.sun.jna.Pointer mono_class_name_from_token(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int type_token);
	/// Original signature : <code>bool mono_method_can_access_field(MonoMethod*, MonoClassField*)</code>
	boolean mono_method_can_access_field(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, com.nativelibs4java.mono.library.MonoLibrary.MonoClassField field);
	/// Original signature : <code>bool mono_method_can_access_method(MonoMethod*, MonoMethod*)</code>
	boolean mono_method_can_access_method(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, com.nativelibs4java.mono.library.MonoLibrary.MonoMethod called);
	/**
	 * Original signature : <code>MonoSymbolFile* mono_debug_open_mono_symbols(MonoDebugHandle*, const char*, int, bool)</code><br>
	 * @deprecated use the safer methods {@link #mono_debug_open_mono_symbols(com.nativelibs4java.mono.library.MonoDebugHandle, java.lang.String, int, boolean)} and {@link #mono_debug_open_mono_symbols(com.nativelibs4java.mono.library.MonoDebugHandle, com.sun.jna.Pointer, int, boolean)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoSymbolFile mono_debug_open_mono_symbols(com.nativelibs4java.mono.library.MonoDebugHandle handle, com.sun.jna.Pointer raw_contents, int size, boolean in_the_debugger);
	/// Original signature : <code>MonoSymbolFile* mono_debug_open_mono_symbols(MonoDebugHandle*, const char*, int, bool)</code>
	com.nativelibs4java.mono.library.MonoSymbolFile mono_debug_open_mono_symbols(com.nativelibs4java.mono.library.MonoDebugHandle handle, java.lang.String raw_contents, int size, boolean in_the_debugger);
	/// Original signature : <code>void mono_debug_close_mono_symbol_file(MonoSymbolFile*)</code>
	void mono_debug_close_mono_symbol_file(com.nativelibs4java.mono.library.MonoSymbolFile symfile);
	/// Original signature : <code>MonoDebugSourceLocation* mono_debug_symfile_lookup_location(MonoDebugMethodInfo*, int)</code>
	com.nativelibs4java.mono.library.MonoDebugSourceLocation mono_debug_symfile_lookup_location(com.nativelibs4java.mono.library.MonoDebugMethodInfo minfo, int offset);
	/// Original signature : <code>int _mono_debug_address_from_il_offset(MonoDebugMethodJitInfo*, int)</code>
	int _mono_debug_address_from_il_offset(com.nativelibs4java.mono.library.MonoDebugMethodJitInfo jit, int il_offset);
	/// Original signature : <code>MonoDebugMethodInfo* mono_debug_symfile_lookup_method(MonoDebugHandle*, MonoMethod*)</code>
	com.nativelibs4java.mono.library.MonoDebugMethodInfo mono_debug_symfile_lookup_method(com.nativelibs4java.mono.library.MonoDebugHandle handle, com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method);
	/// Original signature : <code>void mono_gc_collect(int)</code>
	void mono_gc_collect(int generation);
	/// Original signature : <code>int mono_gc_max_generation()</code>
	int mono_gc_max_generation();
	/// Original signature : <code>int mono_gc_get_generation(MonoObject*)</code>
	int mono_gc_get_generation(com.nativelibs4java.mono.library.MonoObject object);
	/// Original signature : <code>int mono_gc_collection_count(int)</code>
	int mono_gc_collection_count(int generation);
	/// Original signature : <code>mono_gc_get_used_size()</code>
	long mono_gc_get_used_size();
	/// Original signature : <code>mono_gc_get_heap_size()</code>
	long mono_gc_get_heap_size();
	/// Original signature : <code>GSList* mono_image_verify_tables(MonoImage*, int)</code>
	com.nativelibs4java.mono.library.MonoLibrary.GSList mono_image_verify_tables(com.nativelibs4java.mono.library.MonoLibrary.MonoImage image, int level);
	/// Original signature : <code>GSList* mono_method_verify(MonoMethod*, int)</code>
	com.nativelibs4java.mono.library.MonoLibrary.GSList mono_method_verify(com.nativelibs4java.mono.library.MonoLibrary.MonoMethod method, int level);
	/// Original signature : <code>void mono_free_verify_list(GSList*)</code>
	void mono_free_verify_list(com.nativelibs4java.mono.library.MonoLibrary.GSList list);
	/// Original signature : <code>char* mono_verify_corlib()</code>
	com.sun.jna.Pointer mono_verify_corlib();
	/**
	 * Original signature : <code>MonoDomain* mono_jit_init(const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_jit_init(java.lang.String)} and {@link #mono_jit_init(com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoDomain mono_jit_init(com.sun.jna.Pointer file);
	/// Original signature : <code>MonoDomain* mono_jit_init(const char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoDomain mono_jit_init(java.lang.String file);
	/**
	 * Original signature : <code>MonoDomain* mono_jit_init_version(const char*, const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_jit_init_version(java.lang.String, java.lang.String)} and {@link #mono_jit_init_version(com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoDomain mono_jit_init_version(com.sun.jna.Pointer root_domain_name, com.sun.jna.Pointer runtime_version);
	/// Original signature : <code>MonoDomain* mono_jit_init_version(const char*, const char*)</code>
	com.nativelibs4java.mono.library.MonoLibrary.MonoDomain mono_jit_init_version(java.lang.String root_domain_name, java.lang.String runtime_version);
	/// Original signature : <code>int mono_jit_exec(MonoDomain*, MonoAssembly*, int, char*[])</code>
	int mono_jit_exec(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly assembly, int argc, com.sun.jna.ptr.PointerByReference argv);
	/// Original signature : <code>void mono_jit_cleanup(MonoDomain*)</code>
	void mono_jit_cleanup(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain);
	/**
	 * Original signature : <code>bool mono_jit_set_trace_options(const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_jit_set_trace_options(java.lang.String)} and {@link #mono_jit_set_trace_options(com.sun.jna.Pointer)} instead
	 */
	@java.lang.Deprecated
	boolean mono_jit_set_trace_options(com.sun.jna.Pointer options);
	/// Original signature : <code>bool mono_jit_set_trace_options(const char*)</code>
	boolean mono_jit_set_trace_options(java.lang.String options);
	/// Original signature : <code>int mono_main(int, char*[])</code>
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z9mono_mainiPPc", "?mono_main@@YAHHQAPAD@Z"})
	int mono_main(int argc, com.sun.jna.ptr.PointerByReference argv);
	/**
	 * Original signature : <code>MonoDomain* mono_interp_init(const char*)</code><br>
	 * @deprecated use the safer methods {@link #mono_interp_init(java.lang.String)} and {@link #mono_interp_init(com.sun.jna.Pointer)} instead
	 */
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z16mono_interp_initPKc", "?mono_interp_init@@YAPA11_MonoDomainPAD@Z"})
	@java.lang.Deprecated
	com.nativelibs4java.mono.library.MonoLibrary.MonoDomain mono_interp_init(com.sun.jna.Pointer file);
	/// Original signature : <code>MonoDomain* mono_interp_init(const char*)</code>
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z16mono_interp_initPKc", "?mono_interp_init@@YAPA11_MonoDomainPAD@Z"})
	com.nativelibs4java.mono.library.MonoLibrary.MonoDomain mono_interp_init(java.lang.String file);
	/// Original signature : <code>int mono_interp_exec(MonoDomain*, MonoAssembly*, int, char*[])</code>
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z16mono_interp_execP11_MonoDomainP13_MonoAssemblyiPPc", "?mono_interp_exec@@YAHPA11_MonoDomainPA13_MonoAssemblyHQAPAD@Z"})
	int mono_interp_exec(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain, com.nativelibs4java.mono.library.MonoLibrary.MonoAssembly assembly, int argc, com.sun.jna.ptr.PointerByReference argv);
	/// Original signature : <code>void mono_interp_cleanup(MonoDomain*)</code>
	@com.ochafik.lang.jnaerator.runtime.Mangling({"_Z19mono_interp_cleanupP11_MonoDomain", "?mono_interp_cleanup@@YAXPA11_MonoDomain@Z"})
	void mono_interp_cleanup(com.nativelibs4java.mono.library.MonoLibrary.MonoDomain domain);
	public static final com.ochafik.lang.jnaerator.runtime.globals.GlobalStruct<com.nativelibs4java.mono.library.MonoSymbolTable> mono_symbol_table = new com.ochafik.lang.jnaerator.runtime.globals.GlobalStruct<com.nativelibs4java.mono.library.MonoSymbolTable>(com.nativelibs4java.mono.library.MonoLibrary.JNA_NATIVE_LIB, com.nativelibs4java.mono.library.MonoSymbolTable.class, "mono_symbol_table");
	public static final class mono_debug_format {
		public static final class mono_debug_format_holder extends com.sun.jna.Structure {
			/// @see MonoDebugFormat
			public int value;
			mono_debug_format_holder(com.sun.jna.Pointer pointer) {
				super();
				useMemory(pointer, 0);
				read();
			}
		}
		private static mono_debug_format_holder mono_debug_format;
		public static synchronized mono_debug_format_holder get() {
			if (mono_debug_format == null) 
				mono_debug_format = new mono_debug_format_holder(com.nativelibs4java.mono.library.MonoLibrary.JNA_NATIVE_LIB.getGlobalVariableAddress("mono_debug_format"));
			return mono_debug_format;
		}
	}
	public static final class mono_debug_handles {
		public static final class mono_debug_handles_holder extends com.sun.jna.Structure {
			public com.nativelibs4java.mono.library.MonoLibrary.GHashTable value;
			mono_debug_handles_holder(com.sun.jna.Pointer pointer) {
				super();
				useMemory(pointer, 0);
				read();
			}
		}
		private static mono_debug_handles_holder mono_debug_handles;
		public static synchronized mono_debug_handles_holder get() {
			if (mono_debug_handles == null) 
				mono_debug_handles = new mono_debug_handles_holder(com.nativelibs4java.mono.library.MonoLibrary.JNA_NATIVE_LIB.getGlobalVariableAddress("mono_debug_handles"));
			return mono_debug_handles;
		}
	}
	public static final com.ochafik.lang.jnaerator.runtime.globals.GlobalInt mono_debug_debugger_version = new com.ochafik.lang.jnaerator.runtime.globals.GlobalInt(com.nativelibs4java.mono.library.MonoLibrary.JNA_NATIVE_LIB, "mono_debug_debugger_version");
	public static final com.ochafik.lang.jnaerator.runtime.globals.GlobalInt _mono_debug_using_mono_debugger = new com.ochafik.lang.jnaerator.runtime.globals.GlobalInt(com.nativelibs4java.mono.library.MonoLibrary.JNA_NATIVE_LIB, "_mono_debug_using_mono_debugger");
	public static final class mono_opcodes {
		private static com.sun.jna.Pointer mono_opcodes;
		public static synchronized com.sun.jna.Pointer get() {
			if (mono_opcodes == null) 
				mono_opcodes = com.nativelibs4java.mono.library.MonoLibrary.JNA_NATIVE_LIB.getGlobalVariableAddress("mono_opcodes");
			return mono_opcodes;
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoMethod extends com.sun.jna.PointerType {
		public MonoMethod(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoMethod() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoImage extends com.sun.jna.PointerType {
		public MonoImage(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoImage() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoProfiler extends com.sun.jna.PointerType {
		public MonoProfiler(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoProfiler() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoThreadsSync extends com.sun.jna.PointerType {
		public MonoThreadsSync(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoThreadsSync() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoReflectionMethodBody extends com.sun.jna.PointerType {
		public MonoReflectionMethodBody(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoReflectionMethodBody() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoReflectionField extends com.sun.jna.PointerType {
		public MonoReflectionField(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoReflectionField() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoReflectionModule extends com.sun.jna.PointerType {
		public MonoReflectionModule(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoReflectionModule() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoMethodDesc extends com.sun.jna.PointerType {
		public MonoMethodDesc(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoMethodDesc() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoTableInfo extends com.sun.jna.PointerType {
		public MonoTableInfo(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoTableInfo() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class GList extends com.sun.jna.PointerType {
		public GList(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public GList() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoMethodHeader extends com.sun.jna.PointerType {
		public MonoMethodHeader(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoMethodHeader() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoGenericContext extends com.sun.jna.PointerType {
		public MonoGenericContext(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoGenericContext() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoReflectionType extends com.sun.jna.PointerType {
		public MonoReflectionType(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoReflectionType() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoEvent extends com.sun.jna.PointerType {
		public MonoEvent(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoEvent() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoReflectionEvent extends com.sun.jna.PointerType {
		public MonoReflectionEvent(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoReflectionEvent() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoDomain extends com.sun.jna.PointerType {
		public MonoDomain(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoDomain() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoDebugDataTable extends com.sun.jna.PointerType {
		public MonoDebugDataTable(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoDebugDataTable() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoProperty extends com.sun.jna.PointerType {
		public MonoProperty(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoProperty() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class GPtrArray extends com.sun.jna.PointerType {
		public GPtrArray(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public GPtrArray() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoAppContext extends com.sun.jna.PointerType {
		public MonoAppContext(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoAppContext() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoGenericClass extends com.sun.jna.PointerType {
		public MonoGenericClass(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoGenericClass() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoReflectionAssembly extends com.sun.jna.PointerType {
		public MonoReflectionAssembly(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoReflectionAssembly() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoAppDomain extends com.sun.jna.PointerType {
		public MonoAppDomain(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoAppDomain() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoAssembly extends com.sun.jna.PointerType {
		public MonoAssembly(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoAssembly() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoMemPool extends com.sun.jna.PointerType {
		public MonoMemPool(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoMemPool() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class GHashTable extends com.sun.jna.PointerType {
		public GHashTable(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public GHashTable() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoGenericParam extends com.sun.jna.PointerType {
		public MonoGenericParam(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoGenericParam() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class GString extends com.sun.jna.PointerType {
		public GString(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public GString() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoException extends com.sun.jna.PointerType {
		public MonoException(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoException() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoClassField extends com.sun.jna.PointerType {
		public MonoClassField(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoClassField() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class GSList extends com.sun.jna.PointerType {
		public GSList(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public GSList() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoReflectionProperty extends com.sun.jna.PointerType {
		public MonoReflectionProperty(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoReflectionProperty() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoVTable extends com.sun.jna.PointerType {
		public MonoVTable(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoVTable() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoDebugMethodAddress extends com.sun.jna.PointerType {
		public MonoDebugMethodAddress(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoDebugMethodAddress() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoReflectionMethod extends com.sun.jna.PointerType {
		public MonoReflectionMethod(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoReflectionMethod() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoClass extends com.sun.jna.PointerType {
		public MonoClass(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoClass() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoThread extends com.sun.jna.PointerType {
		public MonoThread(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoThread() {
			super();
		}
	}
	/// Pointer to unknown (opaque) type
	public static class MonoJitInfo extends com.sun.jna.PointerType {
		public MonoJitInfo(com.sun.jna.Pointer pointer) {
			super(pointer);
		}
		public MonoJitInfo() {
			super();
		}
	}
}
