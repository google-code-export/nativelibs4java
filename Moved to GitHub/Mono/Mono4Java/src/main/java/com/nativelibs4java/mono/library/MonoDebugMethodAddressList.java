package com.nativelibs4java.mono.library;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>, <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class MonoDebugMethodAddressList extends com.ochafik.lang.jnaerator.runtime.Structure<MonoDebugMethodAddressList, MonoDebugMethodAddressList.ByValue, MonoDebugMethodAddressList.ByReference> {
	public int size;
	public int count;
	/// C type : char[1]
	public byte[] data = new byte[(1)];
	public MonoDebugMethodAddressList() {
		super();
	}
	/// @param data C type : char[1]
	public MonoDebugMethodAddressList(int size, int count, byte data[]) {
		super();
		this.size = size;
		this.count = count;
		if (data.length != this.data.length) 
			throw new java.lang.IllegalArgumentException("Wrong array size !");
		this.data = data;
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected MonoDebugMethodAddressList newInstance() { return new MonoDebugMethodAddressList(); }
	public static MonoDebugMethodAddressList[] newArray(int arrayLength) {
		return com.ochafik.lang.jnaerator.runtime.Structure.newArray(MonoDebugMethodAddressList.class, arrayLength);
	}
	public static class ByReference extends MonoDebugMethodAddressList implements com.sun.jna.Structure.ByReference {}
	public static class ByValue extends MonoDebugMethodAddressList implements com.sun.jna.Structure.ByValue {}
}
