package com.nativelibs4java.mono.library;
/**
 * NOTE:<br>
 * We intentionally do not use GList here since the debugger needs to know about<br>
 * the layout of the fields.<br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>, <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class MonoDebugList extends com.ochafik.lang.jnaerator.runtime.Structure<MonoDebugList, MonoDebugList.ByValue, MonoDebugList.ByReference> {
	/// C type : MonoDebugList*
	public com.nativelibs4java.mono.library.MonoDebugList.ByReference next;
	/// C type : gconstpointer
	public com.sun.jna.Pointer data;
	public MonoDebugList() {
		super();
	}
	/**
	 * @param next C type : MonoDebugList*<br>
	 * @param data C type : gconstpointer
	 */
	public MonoDebugList(com.nativelibs4java.mono.library.MonoDebugList.ByReference next, com.sun.jna.Pointer data) {
		super();
		this.next = next;
		this.data = data;
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected MonoDebugList newInstance() { return new MonoDebugList(); }
	public static MonoDebugList[] newArray(int arrayLength) {
		return com.ochafik.lang.jnaerator.runtime.Structure.newArray(MonoDebugList.class, arrayLength);
	}
	public static class ByReference extends MonoDebugList implements com.sun.jna.Structure.ByReference {}
	public static class ByValue extends MonoDebugList implements com.sun.jna.Structure.ByValue {}
}
